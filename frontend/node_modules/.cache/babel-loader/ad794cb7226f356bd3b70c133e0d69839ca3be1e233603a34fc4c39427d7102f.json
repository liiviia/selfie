{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nexport default {\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const events = ref([]);\n    const activities = ref([]);\n    const pomodoros = ref([]);\n    const incompleteSessions = ref([]);\n    const overdueActivities = ref([]);\n    const queryDate = computed(() => route.query.date);\n    const timeMachine = ref();\n    const confirmDeleteActivity = id => {\n      if (confirm(\"Sicuro di voler eliminare questa Attività?\")) {\n        deleteActivities(id);\n      }\n    };\n    const navigateToAddActivity = () => {\n      router.push({\n        path: '/addActivities',\n        query: {\n          date: queryDate.value\n        }\n      });\n    };\n    const navigateToAddEvent = () => {\n      router.push({\n        path: '/addEvent',\n        query: {\n          date: queryDate.value\n        }\n      });\n    };\n    const navigateToAddPomodoro = () => {\n      router.push({\n        path: '/pomodoroTempo',\n        query: {\n          date: queryDate.value\n        }\n      });\n    };\n    const deleteActivities = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        await axios.delete(`/api/activitiesRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        console.log('Attività eliminata');\n        fetchEvents();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della attività:', error);\n      }\n    };\n    const confirmDeleteEvent = id => {\n      if (confirm(\"Sicuro di voler eliminare questo Evento?\")) {\n        deleteEvents(id);\n      }\n    };\n    const deleteEvents = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/eventsRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Evento eliminato');\n        fetchEvents();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione di evento:', error);\n      }\n    };\n    const confirmDeletePomodoro = id => {\n      if (confirm(\"Sicuro di voler eliminare questa sessione Pomodoro?\")) {\n        deletePomodoro(id);\n      }\n    };\n    const deletePomodoro = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/pomRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Sessione Pomodoro eliminata');\n        fetchPoms();\n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della sessione:', error);\n      }\n    };\n    const iniziaPomodoro = async (id, remainingTime, date, tempoStudio, tempoPausa, ripetizioni) => {\n      try {\n        // Chiamata al backend per aggiornare il pomodoro con isStarted = true\n        const response = await axios.post(`/iniziaPomodoro/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data.success) {\n          router.push({\n            path: '/pomodoroTempo',\n            query: {\n              date: date,\n              remainingTime: remainingTime,\n              isStudyPhase: true,\n              tempoStudio: tempoStudio,\n              tempoPausa: tempoPausa,\n              ripetizioni: ripetizioni,\n              nuovo: true\n            }\n          });\n        } else {\n          console.log(response.data.message);\n        }\n      } catch (error) {\n        console.error('Errore durante l\\'avvio del pomodoro:', error);\n      }\n    };\n    const isSameDay = (date1, date2) => {\n      const d1 = new Date(date1);\n      const d2 = new Date(date2);\n      console.log(\"query date:\", date1, \"time machine date:\", date2);\n      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n    };\n    const fetchActivities = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const author = localStorage.getItem('username'); // Recupera l'autore dal localStorage\n        console.log('Fetching activities for:', {\n          date: queryDate.value,\n          author\n        }); // Debug\n        const response = await axios.get('/api/activities/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            date: queryDate.value,\n            author\n          } // Passa entrambi i parametri\n        });\n        activities.value = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero delle attività:', error);\n      }\n    };\n    const fetchPoms = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        this.poms = response.data.filter(pom => {\n          const sessionDate = new Date(pom.giorno);\n          sessionDate.setHours(0, 0, 0, 0);\n          return sessionDate >= today;\n        });\n        console.log('Sessioni Pomodoro recuperate e filtrate:', this.poms);\n      } catch (error) {\n        console.error('Errore durante il recupero delle sessioni Pomodoro:', error);\n      }\n    };\n    const fetchEvents = async () => {\n      try {\n        const author = route.query.author;\n        const date = route.query.date;\n        const username = route.query.username || author;\n        const token = sessionStorage.getItem('token');\n        console.log('Fetching events for:', author, date);\n        const response = await axios.get('/api/events/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author,\n            date\n          }\n        });\n        events.value = Array.isArray(response.data) ? response.data : [response.data];\n        console.log('Fetched events:', events.value);\n\n        /*      const activityResponse = await axios.get('/api/activities/by-date', {\n                  headers: { Authorization: `Bearer ${token}` },\n                  params: { author, date }\n                });\n                // Filtra le attività completate \n                const allActivities = Array.isArray(activityResponse.data) ? activityResponse.data : [activityResponse.data];\n                activities.value = allActivities;\n                console.log('Fetched activities:', activities.value);\n        */\n        const pomodoroResponse = await axios.get('/api/poms/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username,\n            date\n          }\n        });\n        pomodoros.value = Array.isArray(pomodoroResponse.data) ? pomodoroResponse.data : [pomodoroResponse.data];\n        console.log('Fetched pomodoros:', pomodoros.value);\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi, delle attività e dei pomodori:', error);\n      }\n    };\n    const fetchIncompleteSessions = async () => {\n      console.log(\"fetchIncompleteSessions chiamata\");\n      const token = sessionStorage.getItem('token');\n      const username = localStorage.getItem('username');\n      try {\n        const response = await axios.get('/api/poms/incomplete', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username\n          }\n        });\n        incompleteSessions.value = (Array.isArray(response.data) ? response.data : [response.data]).filter(session => {\n          return session.studyCycles > 0 && session.remainingTime > 0 && session.tempoStudio && session.tempoPausa;\n        });\n      } catch (error) {\n        console.error('Errore nel recupero delle sessioni incomplete:', error);\n      }\n    };\n    const resumePomodoro = session => {\n      const plainSession = JSON.parse(JSON.stringify(session));\n      console.log(\"Sessione passata a pomodoroTempo:\", plainSession);\n      const nuovo = false;\n      router.push({\n        path: '/pomodoroTempo',\n        query: {\n          date: new Date(plainSession.giorno).toISOString(),\n          remainingTime: plainSession.remainingTime,\n          studyCycles: plainSession.studyCycles,\n          isStudyPhase: plainSession.isStudyPhase,\n          tempoStudio: plainSession.tempoStudio,\n          tempoPausa: plainSession.tempoPausa,\n          ripetizioni: plainSession.ripetizioni,\n          nuovo: nuovo\n        }\n      });\n    };\n    const discardPomodoro = async session => {\n      const token = sessionStorage.getItem('token');\n      try {\n        await axios.delete(`/api/pomRemove/${session._id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        incompleteSessions.value = incompleteSessions.value.filter(s => s._id !== session._id);\n        console.log('Sessione Pomodoro scartata.');\n      } catch (error) {\n        console.error('Errore nello scartare la sessione pomodoro:', error.response?.data || error);\n      }\n    };\n    const formatDate = dateString => {\n      if (!dateString) return 'Data non disponibile';\n      const date = new Date(dateString);\n      return date instanceof Date && !isNaN(date) ? date.toLocaleDateString('it-IT', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }) : 'Data non valida';\n    };\n    const fetchOverdueActivities = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/overdue', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username\n          }\n        });\n        overdueActivities.value = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero delle attività scadute:', error);\n      }\n    };\n    const filteredOverdueActivities = computed(() => overdueActivities.value.filter(activity => activity.title && activity.deadline));\n\n    /*const markActivityComplete = async (activity) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n         const response = await axios.post('/api/activities/mark-complete', {\n          id: activity._id,\n          username,\n          }, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n       console.log('Attività completata:', response.data);\n       activities.value = activities.value.filter(a => a._id !== activity._id);\n      } catch (error) {\n      console.error('Errore nel segnare l\\'attività come completata:', error);\n    }\n    };*/\n\n    const markAsCompleted = async activity => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.put(`/api/activities/${activity._id}`, {\n          completed: true\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        activity.completed = true;\n        // Aggiorna la lista localmente\n        activities.value = activities.value.filter(a => a._id !== activity._id);\n        overdueActivities.value = overdueActivities.value.filter(a => a._id !== activity._id);\n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nel completare l\\'attività:', error);\n      }\n    };\n    const discardActivity = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log('Discarding activity with ID:', id);\n        await axios.delete(`/api/activitiesRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        overdueActivities.value = overdueActivities.value.filter(a => a._id !== id);\n      } catch (error) {\n        console.error('Errore nello scartare l\\'attività:', error);\n      }\n    };\n    const getTimeMachine = async () => {\n      try {\n        const response = await axios.get('/api/getTime-machine');\n        timeMachine.value = response.data;\n        //console.log(\" data time machine event day calendar\",timeMachine);\n      } catch (error) {\n        console.log(\"errore recupero data time machine\", error);\n      }\n    };\n    onMounted(() => {\n      fetchEvents();\n      fetchActivities();\n      fetchOverdueActivities();\n      fetchIncompleteSessions();\n      setInterval(getTimeMachine, 1000);\n    });\n    return {\n      events,\n      activities,\n      pomodoros,\n      incompleteSessions,\n      overdueActivities,\n      formatDate,\n      queryDate,\n      navigateToAddEvent,\n      navigateToAddActivity,\n      navigateToAddPomodoro,\n      resumePomodoro,\n      discardPomodoro,\n      confirmDeleteActivity,\n      confirmDeleteEvent,\n      confirmDeletePomodoro,\n      //markActivityComplete ,\n      markAsCompleted,\n      filteredOverdueActivities,\n      discardActivity,\n      iniziaPomodoro,\n      timeMachine,\n      isSameDay\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useRoute","useRouter","axios","setup","route","router","events","activities","pomodoros","incompleteSessions","overdueActivities","queryDate","query","date","timeMachine","confirmDeleteActivity","id","confirm","deleteActivities","navigateToAddActivity","push","path","value","navigateToAddEvent","navigateToAddPomodoro","token","sessionStorage","getItem","username","localStorage","delete","headers","Authorization","params","console","log","fetchEvents","error","confirmDeleteEvent","deleteEvents","confirmDeletePomodoro","deletePomodoro","fetchPoms","window","location","reload","iniziaPomodoro","remainingTime","tempoStudio","tempoPausa","ripetizioni","response","post","data","success","isStudyPhase","nuovo","message","isSameDay","date1","date2","d1","Date","d2","getFullYear","getMonth","getDate","fetchActivities","author","get","today","setHours","poms","filter","pom","sessionDate","giorno","Array","isArray","pomodoroResponse","fetchIncompleteSessions","session","studyCycles","resumePomodoro","plainSession","JSON","parse","stringify","toISOString","discardPomodoro","_id","s","formatDate","dateString","isNaN","toLocaleDateString","year","month","day","fetchOverdueActivities","filteredOverdueActivities","activity","title","deadline","markAsCompleted","put","completed","a","discardActivity","getTimeMachine","setInterval"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/eventDayCalendar.vue"],"sourcesContent":["<template>\n   <div>\n    <h2 class=\"main-title\">Eventi, Attività e Pomodori per {{ formatDate(queryDate) }}</h2>\n     <div class=\"section events-section full-width\">\n      <h3>I TUOI EVENTI:</h3>\n      <div v-if=\"events.length > 0\">\n        <div v-for=\"event in events\" :key=\"event._id\" class=\"item-container\">\n          <h4><span style=\"font-size: 0.9em;\">Titolo:</span> {{ event.title }}</h4>\n          <p>Data: {{ formatDate(event.date) }}</p>\n          <p>Descrizione: {{ event.description }}</p>\n          <button @click=\"confirmDeleteEvent(event._id)\" class=\"delete-btn\">🗑️</button>\n        </div>\n      </div>\n      <p v-else>Nessun evento per questa data.</p>\n      <div class=\"button-container\">\n        <button class=\"fixed-button\" @click=\"navigateToAddEvent\" style=\"background:#f4a460;\">\n          Aggiungi evento\n        </button>\n      </div>\n    </div>\n\n    <div class=\"content-container\">\n      <div class=\"section activities-section\">\n        <h3>LE TUE ATTIVITÀ:</h3>\n        <div v-if=\"activities.length > 0\">\n          <div v-for=\"activity in activities\" :key=\"activity._id\" class=\"item-container\"\n          :class=\"{ completed: activity.completed }\">\n            <h4><span style=\"font-size: 0.9em;\">Titolo:</span> {{ activity.title }}</h4>\n            <p>Data: {{ formatDate(activity.deadline || activity.date) }}</p>\n            <p>Descrizione: {{ activity.description }}</p>\n            <p v-if=\"activity.type === 'gruppo'\" style=\"color: #FF6347;\">\n              Attività di gruppo creata da: {{ activity.author }}<br>\n              Gruppo composto da: {{ activity.participants.join(', ') }}\n            </p>\n            <button v-if=\"!activity.completed\" @click=\"markAsCompleted(activity)\" class=\"complete-btn\">Completata</button>\n            <button @click=\"confirmDeleteActivity(activity._id)\" class=\"delete-btn\">🗑️</button>\n          </div>\n        </div>\n        <p v-else>Nessuna attività per questa data.</p>\n        <div class=\"button-container\">\n          <button class=\"fixed-button\" @click=\"navigateToAddActivity\" style=\"background:#f4a460;\">\n            Aggiungi attivita\n          </button>\n        </div>\n      </div>\n      \n      \n      <div class=\"content-container\">\n       <div class=\"section overdue-activities-section\">\n        <h3>ATTIVITÀ INCOMPLETE:</h3>\n        <div v-if=\"filteredOverdueActivities.length > 0\">\n          <div v-for=\"activity in filteredOverdueActivities\" :key=\"activity._id\" class=\"item-container overdue\">\n            <h4>Titolo: {{ activity.title }}</h4>\n            <p>Data scadenza: {{ formatDate(activity.deadline) }}</p>\n            <p>Descrizione: {{ activity.description }}</p>\n            <button @click=\"discardActivity(activity._id)\" class=\"delete-btn\">Scarta</button>\n          </div>\n        </div>\n        <p v-else>Nessuna attività incompleta trovata.</p>\n      </div>\n    </div>\n  </div>\n\n    <div class=\"content-container\">\n  <div class=\"section pomodoros-section\">\n        <h3>I TUOI POMODORI:</h3>\n        <div v-if=\"pomodoros.length > 0\">\n          <div v-for=\"pomodoro in pomodoros\" :key=\"pomodoro._id\" class=\"item-container\">\n            <h4>Pomodoro Sessione</h4>\n            <p>Data: {{ formatDate(pomodoro.giorno) }}</p>\n            <p>Tempo di studio: {{ pomodoro.tempoStudio }} minuti</p>\n            <p>Tempo di pausa: {{ pomodoro.tempoPausa }} minuti</p>\n            <p>Ripetizioni: {{ pomodoro.ripetizioni }}</p>\n            <button @click=\"confirmDeletePomodoro(pomodoro._id)\" class=\"delete-btn\">🗑️</button>\n            <button v-if=\"isSameDay(queryDate, timeMachine)\" @click=\"iniziaPomodoro(pomodoro._id,pomodoro.isStarted,pomodoro.remainingTime,pomodoro.giorno,pomodoro.tempoStudio , pomodoro.tempoPausa , pomodoro.ripetizioni)\">Inizia il pomodoro</button>\n          </div>\n        </div>\n        <p v-else>Nessun pomodoro per questa data.</p>\n        <div class=\"button-container\">\n          <button class=\"fixed-button\" @click=\"navigateToAddPomodoro\" style=\"background:#f4a460;\">\n            Aggiungi pomodoro\n            </button>\n        </div>\n      </div>\n\n\n      <div class=\"section pomodorosScaduti-section\">\n        <h3>I TUOI POMODORI INCOMPLETI</h3>\n      <div v-if=\"incompleteSessions.length > 0\">\n      <div v-for=\"session in incompleteSessions\" :key=\"session._id\" class=\"item-container\">\n        <p>Data: {{ formatDate(session.giorno) }}</p>\n        <p>Tempo rimanente: {{ Math.floor(session.remainingTime / 60) }}:{{ session.remainingTime % 60 }}</p>\n        <p>Cicli rimanenti: {{ session.studyCycles }}</p>\n         <button @click=\"resumePomodoro(session)\" class=\"action-button\">Riprendi Sessione</button>\n         <button @click=\"discardPomodoro(session)\" class=\"action-button\">\n          <span class=\"trash-icon\">🗑️ </span>Scarta\n         </button> \n      </div>\n    </div>\n    <p v-else>nessun pomodoro da portare a termine</p>\n  </div>\n\n  </div>\n  </div> \n\n</template>\n\n\n<script>\nimport { ref, onMounted, computed } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\n\nexport default {\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const events = ref([]);\n    const activities = ref([]);\n    const pomodoros = ref([]); \n    const incompleteSessions = ref([]);\n    const overdueActivities = ref([]); \n    const queryDate = computed(() => route.query.date);\n    const timeMachine = ref();\n\n    const confirmDeleteActivity = (id) => {\n      if (confirm(\"Sicuro di voler eliminare questa Attività?\")) {\n        deleteActivities(id); \n      }\n    };\n    const navigateToAddActivity = () => {\n      router.push({ path: '/addActivities', query: { date: queryDate.value } });\n    };\n    const navigateToAddEvent = () => {\n      router.push({ path: '/addEvent', query: { date: queryDate.value } });\n    };\n    const navigateToAddPomodoro = () => {\n      router.push({ path: '/pomodoroTempo', query: { date: queryDate.value } });\n    };\n\n    const deleteActivities = async (id) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        await axios.delete(`/api/activitiesRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          },\n          params: { username: username } \n        });\n        console.log('Attività eliminata');\n        fetchEvents(); \n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della attività:', error);\n      }\n    };\n\n    const confirmDeleteEvent = (id) => {\n      if (confirm(\"Sicuro di voler eliminare questo Evento?\")) {\n        deleteEvents(id); \n      }\n    };\n\n    const deleteEvents = async (id) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/eventsRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          }\n        });\n        console.log('Evento eliminato');\n        fetchEvents(); \n      } catch (error) {\n        console.error('Errore nell\\'eliminazione di evento:', error);\n      }\n    };\n\n    const confirmDeletePomodoro = (id) => {\n      if (confirm(\"Sicuro di voler eliminare questa sessione Pomodoro?\")) {\n        deletePomodoro(id); \n      }\n    };\n\n    const deletePomodoro = async (id) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/pomRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          }\n        });\n        console.log('Sessione Pomodoro eliminata');\n        fetchPoms(); \n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della sessione:', error);\n      }\n    };\n\n    const iniziaPomodoro = async (id, remainingTime, date, tempoStudio, tempoPausa, ripetizioni) => {\n  try {\n    // Chiamata al backend per aggiornare il pomodoro con isStarted = true\n    const response = await axios.post(`/iniziaPomodoro/${id}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    if (response.data.success) {\n      router.push({\n        path: '/pomodoroTempo',\n        query: {\n          date: date,\n          remainingTime: remainingTime,\n          isStudyPhase: true,\n          tempoStudio: tempoStudio,\n          tempoPausa: tempoPausa,\n          ripetizioni: ripetizioni,\n          nuovo: true\n        }\n      });\n    } else {\n      console.log(response.data.message); \n    }\n  } catch (error) {\n    console.error('Errore durante l\\'avvio del pomodoro:', error);\n  }\n};\n\n\n\n    const isSameDay = (date1, date2) => {\n      const d1 = new Date(date1);\n        const d2 = new Date(date2);\n        console.log(\"query date:\", date1 , \"time machine date:\" , date2);\n        return (\n            d1.getFullYear() === d2.getFullYear() &&\n            d1.getMonth() === d2.getMonth() &&\n            d1.getDate() === d2.getDate()\n        );\n\n    };\n\n\n    const fetchActivities = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    const author = localStorage.getItem('username'); // Recupera l'autore dal localStorage\n    console.log('Fetching activities for:', { date: queryDate.value, author }); // Debug\n    const response = await axios.get('/api/activities/by-date', {\n      headers: { Authorization: `Bearer ${token}` },\n      params: { date: queryDate.value, author }, // Passa entrambi i parametri\n    });\n    activities.value = response.data;\n  } catch (error) {\n    console.error('Errore nel recupero delle attività:', error);\n  }\n};\n\n\n\n     const fetchPoms = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { username: username }\n        });\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        this.poms = response.data.filter(pom => {\n          const sessionDate = new Date(pom.giorno);\n          sessionDate.setHours(0, 0, 0, 0);\n          return sessionDate >= today;\n        });\n\n        console.log('Sessioni Pomodoro recuperate e filtrate:', this.poms);\n      } catch (error) {\n        console.error('Errore durante il recupero delle sessioni Pomodoro:', error);\n      }\n    }\n\n\n    const fetchEvents = async () => {\n      try {\n        const author = route.query.author;\n        const date = route.query.date;\n        const username = route.query.username || author;\n\n        const token = sessionStorage.getItem('token');\n        console.log('Fetching events for:', author, date);\n\n        const response = await axios.get('/api/events/by-date', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { author, date }\n        });\n        events.value = Array.isArray(response.data) ? response.data : [response.data];\n        console.log('Fetched events:', events.value);\n\n/*      const activityResponse = await axios.get('/api/activities/by-date', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { author, date }\n        });\n        // Filtra le attività completate \n        const allActivities = Array.isArray(activityResponse.data) ? activityResponse.data : [activityResponse.data];\n        activities.value = allActivities;\n        console.log('Fetched activities:', activities.value);\n*/\n        const pomodoroResponse = await axios.get('/api/poms/by-date', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { username, date }\n        });\n        pomodoros.value = Array.isArray(pomodoroResponse.data) ? pomodoroResponse.data : [pomodoroResponse.data];\n        console.log('Fetched pomodoros:', pomodoros.value);\n\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi, delle attività e dei pomodori:', error);\n      }\n    };\n\n    const fetchIncompleteSessions = async () => {\n      console.log(\"fetchIncompleteSessions chiamata\");\n      const token = sessionStorage.getItem('token');\n      const username = localStorage.getItem('username');\n\n      try {\n        const response = await axios.get('/api/poms/incomplete', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { username }\n        });\n        \n        incompleteSessions.value = (Array.isArray(response.data) ? response.data : [response.data]).filter(session => {\n        return (\n          session.studyCycles > 0 && \n          session.remainingTime > 0 &&\n          session.tempoStudio && \n          session.tempoPausa \n      );\n    });\n\n      } catch (error) {\n        console.error('Errore nel recupero delle sessioni incomplete:', error);\n      }\n    };\n\n    const resumePomodoro = (session) => {\n    const plainSession = JSON.parse(JSON.stringify(session));\n\n    console.log(\"Sessione passata a pomodoroTempo:\", plainSession);\n    const nuovo = false;\n\n    router.push({\n      path: '/pomodoroTempo',\n      query: {\n        date: new Date(plainSession.giorno).toISOString(),\n        remainingTime: plainSession.remainingTime,\n        studyCycles: plainSession.studyCycles,\n        isStudyPhase: plainSession.isStudyPhase,\n        tempoStudio: plainSession.tempoStudio, \n        tempoPausa: plainSession.tempoPausa,   \n        ripetizioni: plainSession.ripetizioni, \n        nuovo: nuovo,\n    },\n  });\n    };\n\n    const discardPomodoro = async (session) => {\n      const token = sessionStorage.getItem('token');\n      try {\n        await axios.delete(`/api/pomRemove/${session._id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n        incompleteSessions.value = incompleteSessions.value.filter(s => s._id !== session._id);\n        console.log('Sessione Pomodoro scartata.');\n      } catch (error) {\n        console.error('Errore nello scartare la sessione pomodoro:', error.response?.data || error);\n      }\n    };\n\n\n    const formatDate = (dateString) => {\n      if (!dateString) return 'Data non disponibile';\n      const date = new Date(dateString);\n      return date instanceof Date && !isNaN(date)\n        ? date.toLocaleDateString('it-IT', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        : 'Data non valida';\n    };\n\n\n    const fetchOverdueActivities = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/overdue', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { username },\n        });\n        overdueActivities.value = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero delle attività scadute:', error);\n      }\n    };\n\n    const filteredOverdueActivities = computed(() =>\n      overdueActivities.value.filter(activity => activity.title && activity.deadline)\n    );\n\n\n    /*const markActivityComplete = async (activity) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n\n        const response = await axios.post('/api/activities/mark-complete', {\n          id: activity._id,\n          username,\n          }, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n\n      console.log('Attività completata:', response.data);\n\n      activities.value = activities.value.filter(a => a._id !== activity._id);\n      } catch (error) {\n      console.error('Errore nel segnare l\\'attività come completata:', error);\n    }\n  };*/\n\n      const markAsCompleted = async (activity) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.put(`/api/activities/${activity._id}`, { completed: true }, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        activity.completed = true;\n        // Aggiorna la lista localmente\n        activities.value = activities.value.filter(a => a._id !== activity._id);\n        overdueActivities.value = overdueActivities.value.filter(a => a._id !== activity._id);\n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nel completare l\\'attività:', error);\n      }\n    };\n\n    const discardActivity = async (id) => {\n  try {\n    const token = sessionStorage.getItem('token');\n    console.log('Discarding activity with ID:', id); \n    await axios.delete(`/api/activitiesRemove/${id}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    overdueActivities.value = overdueActivities.value.filter(a => a._id !== id);\n  } catch (error) {\n    console.error('Errore nello scartare l\\'attività:', error);\n  }\n};\n\n   const getTimeMachine = async () => {\n\n    try{\n    const response = await axios.get('/api/getTime-machine');\n    timeMachine.value = response.data\n    //console.log(\" data time machine event day calendar\",timeMachine);\n\n    } catch (error) {\n      console.log(\"errore recupero data time machine\" , error);\n    }\n   };\n\n    onMounted(() => {\n      fetchEvents();\n      fetchActivities();\n      fetchOverdueActivities();\n      fetchIncompleteSessions();\n      setInterval(getTimeMachine, 1000);    });\n\n    return {\n      events,\n      activities,\n      pomodoros, \n      incompleteSessions, \n      overdueActivities,\n      formatDate,\n      queryDate,\n      navigateToAddEvent,\n      navigateToAddActivity,\n      navigateToAddPomodoro, \n      resumePomodoro, \n      discardPomodoro,\n      confirmDeleteActivity,\n      confirmDeleteEvent,\n      confirmDeletePomodoro,\n      //markActivityComplete ,\n      markAsCompleted,\n      filteredOverdueActivities,\n      discardActivity,\n      iniziaPomodoro,\n      timeMachine,\n      isSameDay\n    };\n  }\n};\n\n\n</script>\n\n<style scoped>\n.full-width {\n  width: 100%;\n  margin-bottom: 20px;\n  background-color: rgba(230, 247, 255, 0.8);\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  padding: 25px;\n}\n\n\n.center-container {\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n}\n\n.content-container {\n  display: flex;\n  justify-content: space-between;\n  gap: 40px;\n  padding: 20px;\n}\n\n.button-container {\n  margin-top: auto; \n  margin-bottom: 10px; \n}\n\nbutton {\n  margin-right: 10px;\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n.activities-section {\n  flex: 1.5; \n  background-color: #f9f9f9;\n}\n\n.events-section {\n  flex: 1.5; \n  background-color: #e6f7ff;\n}\n\n.pomodoros-section {\n  flex: 1.5; \n  background-color: #ffe6e6;\n}\n\n.section {\n  margin-right: 100px;\n  min-width: 500px;\n  flex: 1.5; \n  padding: 25px;\n  border: 1px solid #ddd; \n  border-radius: 10px; \n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); \n  background-color: rgba(255, 255, 255, 0.8); \n  display: flex; \n  flex-direction: column; \n  justify-content: space-between; \n}\n\n.section:hover {\n  transform: scale(1.02); \n}\n\n.activities-section {\n  background-color: rgba(249, 249, 249, 0.8); \n}\n\n.events-section {\n  background-color: rgba(230, 247, 255, 0.8); \n}\n\n.pomodoros-section {\n  background-color: rgba(255, 230, 230, 0.8);\n}\n\nhr {\n  border: 0; \n  height: 1px; \n  background-color: #ddd; \n  margin: 10px 0; \n}\n.item-container {\n  background-color: rgba(255, 255, 255, 0.9);\n  border: 1px solid #ddd; \n  border-radius: 8px; \n  padding: 15px; \n  margin-bottom: 15px; \n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  position: relative; \n}\n\n.delete-btn {\n  position: absolute; \n  bottom: 10px;\n  right: 10px; \n  background: none;\n  border: none; \n  cursor: pointer; \n  font-size: 1.2em;\n  color: #e74c3c; \n}\n\n.delete-btn:hover {\n  color: #c0392b; \n}\n\n\n@media (max-width: 768px) {\n  .content-container {\n    flex-direction: column; \n    margin-left: 0; \n  }\n\n  .section {\n    min-width: auto; \n    margin-right: 0; \n    margin-bottom: 20px; \n  }\n  .main-title {\n  margin-top: 20px; \n}\n}\n\n.item-container {\n  background-color: rgba(255, 255, 255, 0.9);\n  border: 1px solid #ddd; \n  border-radius: 8px; \n  padding: 15px; \n  margin-bottom: 15px; \n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  position: relative; \n  transition: border-color 0.3s ease; \n}\n\n.item-container.overdue {\n  border-color: red;\n  background-color: #ffe6e6;\n}\n\n.item-container.incpom {\n  border-color: red;\n  background-color: #ffe6e6;\n}\n\n\n.item-container.completed {\n  border-color: green;\n  box-shadow: 0 2px 8px rgba(0, 128, 0, 0.5); \n}\n\n.complete-btn {\n  background-color: #28a745; \n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.complete-btn:hover {\n  background-color: #218838; \n}\n\n.complete-btn:before {\n  content: '✔️ '; \n  margin-right: 8px; \n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}