{"ast":null,"code":"import axios from 'axios';\nimport { marked } from 'marked';\nexport default {\n  name: 'HomePrincipale',\n  data() {\n    return {\n      username: localStorage.getItem('username'),\n      lastEventTitle: '',\n      lastEventDescription: '',\n      lastEventDate: '',\n      lastActivityTitle: '',\n      lastActivityDescription: '',\n      lastActivityDeadline: '',\n      noActivitiesMessage: '',\n      notifications: [],\n      noNotificationsMessage: '',\n      users: [],\n      selectedUsers: [],\n      notificationMessage: '',\n      lastNoteHeading: '',\n      lastNoteAuthor: '',\n      noEventsMessage: '',\n      noNotesMessage: '',\n      noPomodorosMessage: '',\n      lastPomodoroTempoStudio: '',\n      lastPomodoroTempoPausa: '',\n      lastPomodoroRipetizioni: '',\n      currentEventTitle: '',\n      currentEventDescription: '',\n      currentEventDate: '',\n      currentActivityTitle: '',\n      currentActivityDescription: '',\n      currentActivityDeadline: '',\n      isCurrentDay: false,\n      lastNoteText: '',\n      showNoteText: false,\n      isCurrentDayActivity: false\n    };\n  },\n  mounted() {\n    this.getLastEvent();\n    this.getLastActivity();\n    this.getNotifies();\n    this.getUsers();\n    this.getLastNote();\n    this.getLastPomodoro();\n  },\n  methods: {\n    /////INZIO METODO PRENDI ATTIVITA IL GIORNO CORRENTE\n    async getCurrentDayActivities() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/current-day', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        if (response.data && response.data.length > 0) {\n          const activity = response.data[0];\n          this.lastActivityTitle = activity.title;\n          this.lastActivityDescription = activity.description;\n          this.lastActivityDeadline = new Date(activity.deadline).toLocaleDateString();\n          this.noActivitiesMessage = '';\n          this.isCurrentDayActivity = true;\n        } else {\n          this.noActivitiesMessage = 'Non ci sono attività imminenti';\n          this.lastActivityTitle = '';\n          this.lastActivityDescription = '';\n          this.lastActivityDeadline = '';\n          this.isCurrentDayActivity = true;\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          this.noActivitiesMessage = 'Non ci sono attività imminenti123';\n          console.log(\"no\", error);\n          this.lastActivityTitle = '';\n          this.lastActivityDescription = '';\n          this.lastActivityDeadline = '';\n          this.isCurrentDayActivity = true;\n        } else {\n          console.error('Errore nel recupero delle attività del giorno corrente:', error);\n          this.noActivitiesMessage = 'Errore nel caricamento delle attività del giorno corrente.';\n        }\n      }\n    },\n    //FINE METODO PRENDI ATTIVITA IL GIORNO CORRENTE\n\n    //INZIO METODO PRENDI ULTIMA ATTIVITA\n    async getLastActivity() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        if (response.data) {\n          this.lastActivityTitle = response.data.title;\n          this.lastActivityDescription = response.data.description;\n          this.lastActivityDeadline = new Date(response.data.deadline).toLocaleDateString();\n          this.noActivitiesMessage = '';\n        } else {\n          this.noActivitiesMessage = 'Non ci sono attività imminenti';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero delle attività:', error);\n      }\n    },\n    //FINE METODO PRENDI ULTIMA ATTIVITA\n\n    //INIZIO METODO PRENDI EVENTO GIORNO CORRENTE\n\n    async getCurrentDayEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        this.lastEventTitle = '';\n        this.lastEventDescription = '';\n        this.lastEventDate = '';\n        const response = await axios.get('/api/events/current-day', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        this.isCurrentDay = true;\n        if (response.data && response.data.length > 0) {\n          const event = response.data[0];\n          this.lastEventTitle = event.title;\n          this.lastEventDescription = event.description;\n          this.lastEventDate = new Date(event.date).toLocaleDateString();\n          this.noEventsMessage = '';\n        } else {\n          this.noEventsMessage = 'Non ci sono eventi imminenti';\n          this.lastEventTitle = '';\n          this.lastEventDescription = '';\n          this.lastEventDate = '';\n        }\n        console.log(\"eventi del giorno corrente\", response.data);\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi del giorno corrente:', error);\n        this.noEventsMessage = 'Errore nel caricamento degli eventi del giorno corrente.';\n        this.lastEventTitle = '';\n        this.lastEventDescription = '';\n        this.lastEventDate = '';\n      }\n    },\n    //FINE METODO PRENDI EVENTO GIORNO CORRENTE\n\n    //INIZIO METODO PRENDI ULTIMO EVENTO\n\n    async getLastEvent() {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log(\"token home \", token);\n        const response = await axios.get('/api/events/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: this.username\n          }\n        });\n        this.isCurrentDay = false;\n        if (response.data) {\n          this.lastEventTitle = response.data.title || 'Nessun evento';\n          this.lastEventDescription = response.data.description || 'Nessuna descrizione';\n          this.lastEventDate = response.data.date || 'Nessuna data';\n        } else {\n          this.noEventsMessage = 'Nessun evento trovato.';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultimo evento:', error);\n        this.noEventsMessage = 'Errore nel caricamento dell\\'ultimo evento.';\n      }\n    },\n    //FINE METODO PRENDI ULTIMO EVENTO\n\n    //INIZIO METODO PRENDI ULTIMA NOTA\n\n    async getLastNote() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/notes/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: username\n          }\n        });\n        if (response.data) {\n          this.lastNoteHeading = response.data.heading;\n          this.lastNoteAuthor = response.data.author;\n          this.noNotesMessage = '';\n        } else {\n          this.noNotesMessage = 'Non ci sono note trovate';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultima nota:', error);\n        this.noNotesMessage = 'Errore nel caricamento dell\\'ultima nota.';\n      }\n    },\n    //FINE METODO PRENDI ULTIMA NOTA\n\n    //INIZIO FUNZIONE PRENDI TESTO ULTIMA NOTA\n\n    async getNoteText() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/notes/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: username\n          }\n        });\n        if (response.data && response.data.content) {\n          this.lastNoteText = response.data.content;\n          this.showNoteText = true;\n        } else {\n          this.lastNoteText = 'Testo non disponibile';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero del testo della nota:', error);\n        this.lastNoteText = 'Errore nel caricamento del testo della nota.';\n      }\n    },\n    //  FINE   FUNZIONE PRENDI TESTO ULTIMA NOTA\n\n    //METODO MARKED INIZIO\n    convertMarkdown(content) {\n      return marked(content);\n    },\n    //METODO MARKED FINE\n\n    //METODO TRUE-FALSE PER TESTO NOTA INIZIO\n    etNoteText() {\n      // Logica per ottenere il testo della nota\n      this.showNoteText = true; // Mostra il testo quando viene cliccato\n    },\n    //METODO TRUE-FALSE PER TESTO NOTA FINE\n\n    //INIZIO METODO PRENDI ULTIMO POMODORO\n\n    async getLastPomodoro() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        if (response.data) {\n          this.lastPomodoroTempoStudio = response.data.tempoStudio;\n          this.lastPomodoroTempoPausa = response.data.tempoPausa;\n          this.lastPomodoroRipetizioni = response.data.ripetizioni;\n          this.noPomodorosMessage = '';\n        } else {\n          this.noPomodorosMessage = 'Nessun pomodoro trovato';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultimo pomodoro:', error);\n        this.noPomodorosMessage = 'Errore nel caricamento dell\\'ultimo pomodoro.';\n      }\n    },\n    //FINE METODO PRENDI ULTIMO POMODORO\n\n    //INZIO ALTRI METODI (NOTIFICHE ECC)\n\n    async getNotifies() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/notifications/getNotif', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: this.username\n          }\n        });\n        //console.log(response.data);\n        if (response.data) {\n          this.notifications = response.data;\n        } else {\n          this.noNotificationsMessage = 'Nessuna notifica trovata.';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero delle notifiche :', error);\n        this.noNotificationsMessage = 'Errore caricamento delle notifiche.';\n      }\n    },\n    async getUsers() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: this.username\n          }\n        });\n        this.users = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero degli utenti:', error);\n      }\n    },\n    async sendNotifications() {\n      if (this.selectedUsers.length === 0) {\n        alert('Seleziona almeno un utente per inviare una notifica.');\n        return;\n      }\n      if (this.notificationMessage.trim() === '') {\n        alert('Scrivi un messaggio per inviare una notifica.');\n        return;\n      }\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/notifications/send', {\n          recipients: this.selectedUsers,\n          message: this.notificationMessage\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert('notifiche inviate!');\n      } catch (error) {\n        console.error('errore durante invio notifiche:', error);\n        alert('Errore durante invio notifiche.');\n      }\n    },\n    async deleteNotification(notificationId) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/notifications/${notificationId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.notifications = this.notifications.filter(notification => notification._id !== notificationId);\n        alert('Notifica eliminata!');\n      } catch (error) {\n        console.error('errore durante eliminazione notifica:', error);\n        alert('errore durante leliminazione della notifica.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","marked","name","data","username","localStorage","getItem","lastEventTitle","lastEventDescription","lastEventDate","lastActivityTitle","lastActivityDescription","lastActivityDeadline","noActivitiesMessage","notifications","noNotificationsMessage","users","selectedUsers","notificationMessage","lastNoteHeading","lastNoteAuthor","noEventsMessage","noNotesMessage","noPomodorosMessage","lastPomodoroTempoStudio","lastPomodoroTempoPausa","lastPomodoroRipetizioni","currentEventTitle","currentEventDescription","currentEventDate","currentActivityTitle","currentActivityDescription","currentActivityDeadline","isCurrentDay","lastNoteText","showNoteText","isCurrentDayActivity","mounted","getLastEvent","getLastActivity","getNotifies","getUsers","getLastNote","getLastPomodoro","methods","getCurrentDayActivities","token","sessionStorage","response","get","headers","Authorization","params","length","activity","title","description","Date","deadline","toLocaleDateString","error","status","console","log","getCurrentDayEvents","event","date","author","heading","getNoteText","content","convertMarkdown","etNoteText","tempoStudio","tempoPausa","ripetizioni","sendNotifications","alert","trim","post","recipients","message","deleteNotification","notificationId","delete","filter","notification","_id"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/HomePrincipale.vue"],"sourcesContent":["<template>\n\n  <div class=\"home-principale\">\n    <div class=\"container mt-3\">\n      <div class=\"row\">\n\n        <div class=\"col-md-6\">\n       \n          <div class=\"notification-form mt-4\">\n            <div class=\"form-group\">\n              <label for=\"userSelect\">Seleziona utenti per notifica:</label>\n              <select id=\"userSelect\" v-model=\"selectedUsers\" multiple class=\"form-control\">\n                <option v-for=\"user in users\" :key=\"user._id\" :value=\"user._id\">\n                  {{ user.username }}\n                </option>\n              </select>\n            </div>\n          \n            <div class=\"form-group\">\n              <label for=\"message\">Scrivi il messaggio:</label>\n              <textarea id=\"message\" v-model=\"notificationMessage\" placeholder=\"Scrivi il tuo messaggio qui...\" class=\"form-control\"></textarea>\n            </div>\n          \n            <button @click=\"sendNotifications\" class=\"btn btn-primary\">Invia Notifica</button>\n          </div>\n        </div>\n\n\n\n\n        <!--   INIZIO CAROSELLO PREVIEW-->         <!--   INIZIO CAROSELLO PREVIEW-->         <!--   INIZIO CAROSELLO PREVIEW-->         <!--   INIZIO CAROSELLO PREVIEW-->\n\n        <div class=\"col-md-6\">\n          <div id=\"carouselExampleIndicators\" class=\"carousel slide mt-4\" data-bs-ride=\"carousel\">\n            <div class=\"carousel-indicators\">\n              <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"0\" class=\"active\" aria-current=\"true\" aria-label=\"Slide 1\"></button>\n              <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"1\" aria-label=\"Slide 2\"></button>\n              <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"2\" aria-label=\"Slide 3\"></button>\n              <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"3\" aria-label=\"Slide 4\"></button>\n            </div>\n\n\n\n            <div class=\"carousel-inner\">\n\n\n              <div class=\"carousel-item active\">\n    <div class=\"d-block w-100 text-center p-4\">\n      <h2>{{ isCurrentDay ? 'Evento di Oggi' : 'Ultimo Evento' }}</h2>\n      <p v-if=\"noEventsMessage\">{{ noEventsMessage }}</p>\n      <p v-else>\n        <strong>Titolo:</strong> {{ lastEventTitle }}<br>\n        <strong>Descrizione:</strong> {{ lastEventDescription }}<br>\n        <strong>Data:</strong> {{ lastEventDate }}\n      </p>\n      <button v-if=\"!isCurrentDay\" class=\"btn btn-primary mt-3\" @click=\"getCurrentDayEvents\">Vedi eventi del giorno corrente</button>\n      <button v-else class=\"btn btn-secondary mt-3\" @click=\"getLastEvent\">Torna all'ultimo evento</button>\n    </div>\n  </div>\n\n\n\n  <div class=\"carousel-item\">\n    <div class=\"d-block w-100 text-center p-4\">\n      <h2>{{ isCurrentDayActivity ? 'Attività di Oggi' : 'Ultima Attività' }}</h2>\n      <p v-if=\"noActivitiesMessage\">{{ noActivitiesMessage }}</p>\n      <p v-else>\n        <strong>Titolo:</strong> {{ lastActivityTitle }}<br>\n        <strong>Descrizione:</strong> {{ lastActivityDescription }}<br>\n        <strong>Scadenza:</strong> {{ lastActivityDeadline }}\n      </p>\n      <button v-if=\"!isCurrentDayActivity\" class=\"btn btn-primary mt-3\" @click=\"getCurrentDayActivities\">Vedi attività del giorno corrente</button>\n      <button v-else class=\"btn btn-secondary mt-3\" @click=\"getLastActivity\">Torna all'ultima attività</button>\n    </div>\n  </div>\n\n\n\n\n  \n  <div class=\"carousel-item\">\n  <div class=\"d-block w-100 text-center p-4\">\n    <!-- Titolo della nota, sempre visibile -->\n    <h2>Ultima Nota</h2>\n    <p><strong>Titolo:</strong> {{ lastNoteHeading }}</p>\n\n    <!-- Se showNoteText è false, mostra autore e bottone per vedere il testo completo -->\n    <div v-if=\"!showNoteText\">\n      <p v-if=\"noNotesMessage\">{{ noNotesMessage }}</p>\n\n      <p v-else>\n        <strong>Autore:</strong> {{ lastNoteAuthor }}\n      </p>\n      <!-- Bottone per visualizzare il testo della nota -->\n      <button v-if=\"lastNoteHeading\" class=\"btn btn-primary mt-3\" @click=\"getNoteText\">Vedi testo completo della nota</button>\n    </div>\n\n    <!-- Se showNoteText è true, mostra solo il testo della nota -->\n    <div v-if=\"showNoteText\" class=\"note-text\">\n      <p><strong>Testo completo:</strong></p>\n      <div v-html=\"convertMarkdown(lastNoteText)\"></div>\n      <!-- Bottone per tornare alla visualizzazione normale -->\n      <button class=\"btn btn-secondary mt-3\" @click=\"showNoteText = false\">Torna indietro</button>\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n\n\n            <div class=\"carousel-item\">\n              <div class=\"d-block w-100 text-center p-4\">\n                <h2>Ultimo Pomodoro</h2>\n                <p v-if=\"noPomodorosMessage\">{{ noPomodorosMessage }}</p>\n                <p v-else>\n                   <strong>tempo studio prefissato:</strong> {{ lastPomodoroTempoStudio }}<br>\n                   <strong>tempo pausa prefissato:</strong> {{ lastPomodoroTempoPausa }}<br>\n                   <strong>ripetizioni prefissate:</strong> {{ lastPomodoroRipetizioni }}\n                </p>\n              </div>\n            </div>\n\n\n\n            <!-- FINE CAROSELLO PREVIEW     --> <!-- FINE CAROSELLO PREVIEW     --> <!-- FINE CAROSELLO PREVIEW     --> <!-- FINE CAROSELLO PREVIEW     -->\n\n\n            </div>\n            <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide=\"prev\">\n              <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Previous</span>\n            </button>\n            <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide=\"next\">\n              <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Next</span>\n            </button>\n\n\n\n          </div>\n\n\n          <div id=\"carouselNotifications\" class=\"carousel slide mt-4\" data-bs-ride=\"carousel\">\n            <div class=\"carousel-indicators\">\n              <button v-for=\"(notification, index) in notifications\" :key=\"index\" type=\"button\" \n                      :data-bs-target=\"'#carouselNotifications'\" :data-bs-slide-to=\"index\" \n                      :class=\"{ active: index === 0 }\" :aria-current=\"index === 0 ? 'true' : 'false'\"\n                      :aria-label=\"'Slide ' + (index + 1)\">\n              </button>\n            </div>\n          \n            <div class=\"carousel-inner\">\n              <div v-if=\"notifications.length === 0\" class=\"carousel-item active\">\n                <div class=\"d-block w-100 text-center p-4\">\n                  <h2>Nessuna Notifica</h2>\n                  <p>{{ noNotificationsMessage }}</p>\n                </div>\n              </div>\n          \n              <div v-else v-for=\"(notification, index) in notifications\" :key=\"index\" \n                   :class=\"['carousel-item', { active: index === 0 }]\">\n                <div class=\"d-block w-100 text-center p-4\">\n                  <h2>Notifica {{ index + 1 }}</h2>\n                  <p>\n                    <strong>Messaggio:</strong> {{ notification.message }}<br>\n                    <strong>Data:</strong> {{ new Date(notification.createdAt).toLocaleDateString() }}\n                  </p>\n                  <button @click=\"deleteNotification(notification._id)\" class=\"btn btn-danger\">Elimina</button>\n                </div>\n              </div>\n            </div>\n          \n            <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselNotifications\"\n              data-bs-slide=\"prev\">\n              <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Previous</span>\n            </button>\n          \n            <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselNotifications\"\n              data-bs-slide=\"next\">\n              <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Next</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n\nimport axios from 'axios';\nimport { marked } from 'marked';\n\nexport default {\n  name: 'HomePrincipale',\n  \n  data() {\n    return {\n      username: localStorage.getItem('username'),\n      lastEventTitle: '',\n      lastEventDescription: '',\n      lastEventDate: '',\n      lastActivityTitle: '',\n      lastActivityDescription: '',\n      lastActivityDeadline: '',\n      noActivitiesMessage: '',\n\n      notifications: [],\n      noNotificationsMessage:'',\n\n      users: [], \n      selectedUsers: [], \n      notificationMessage: '' ,\n      lastNoteHeading: '',\n      lastNoteAuthor: '',\n      noEventsMessage: '' ,\n      noNotesMessage: '',\n      noPomodorosMessage: '',\n      lastPomodoroTempoStudio: '',\n      lastPomodoroTempoPausa: '',\n      lastPomodoroRipetizioni: '',\n      currentEventTitle: '',\n      currentEventDescription: '',\n      currentEventDate: '',\n      currentActivityTitle: '',\n      currentActivityDescription: '',\n      currentActivityDeadline: '',\n      isCurrentDay: false,\n      lastNoteText: '', \n      showNoteText: false,\n      isCurrentDayActivity: false\n    };\n  },\n  mounted() {\n    this.getLastEvent();\n    this.getLastActivity();\n    this.getNotifies();\n    this.getUsers();\n    this.getLastNote();\n    this.getLastPomodoro();\n  },\n  methods: {\n\n                /////INZIO METODO PRENDI ATTIVITA IL GIORNO CORRENTE\n    async getCurrentDayActivities() {\n  try {\n    const token = sessionStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const response = await axios.get('/api/activities/current-day', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      params: { username: username }\n    });\n\n    if (response.data && response.data.length > 0) {\n      const activity = response.data[0];\n      this.lastActivityTitle = activity.title;\n      this.lastActivityDescription = activity.description;\n      this.lastActivityDeadline = new Date(activity.deadline).toLocaleDateString();\n      this.noActivitiesMessage = '';\n      this.isCurrentDayActivity = true;\n    } else {\n      this.noActivitiesMessage = 'Non ci sono attività imminenti';\n      this.lastActivityTitle = '';\n      this.lastActivityDescription = '';\n      this.lastActivityDeadline = '';\n      this.isCurrentDayActivity = true;\n    }\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      this.noActivitiesMessage = 'Non ci sono attività imminenti123';\n      console.log(\"no\",error) ;\n      this.lastActivityTitle = '';\n      this.lastActivityDescription = '';\n      this.lastActivityDeadline = '';\n      this.isCurrentDayActivity = true;\n    } else {\n      console.error('Errore nel recupero delle attività del giorno corrente:', error);\n      this.noActivitiesMessage = 'Errore nel caricamento delle attività del giorno corrente.';\n    }\n  }\n},\n\n            //FINE METODO PRENDI ATTIVITA IL GIORNO CORRENTE\n\n\n\n             //INZIO METODO PRENDI ULTIMA ATTIVITA\n    async getLastActivity() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { username: username }\n        });\n\n        if (response.data) {\n          this.lastActivityTitle = response.data.title;\n          this.lastActivityDescription = response.data.description;\n          this.lastActivityDeadline = new Date(response.data.deadline).toLocaleDateString();\n          this.noActivitiesMessage = '';\n        } else {\n          this.noActivitiesMessage = 'Non ci sono attività imminenti';\n        }\n\n      } catch (error) {\n        console.error('Errore nel recupero delle attività:', error);\n      }\n    },\n\n    //FINE METODO PRENDI ULTIMA ATTIVITA\n\n\n\n\n\n            //INIZIO METODO PRENDI EVENTO GIORNO CORRENTE\n\n            async getCurrentDayEvents() {\n  try { \n    const token = sessionStorage.getItem('token');\n    const username = localStorage.getItem('username');\n\n    this.lastEventTitle = '';\n    this.lastEventDescription = '';\n    this.lastEventDate = '';\n\n\n    const response = await axios.get('/api/events/current-day', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      params: { username: username }\n    });     \n\n\n    this.isCurrentDay = true;\n\n    if (response.data && response.data.length > 0) {\n      const event = response.data[0]; \n      this.lastEventTitle = event.title;\n      this.lastEventDescription = event.description;\n      this.lastEventDate = new Date(event.date).toLocaleDateString();\n      this.noEventsMessage = '';\n    } else {\n      this.noEventsMessage = 'Non ci sono eventi imminenti';\n      this.lastEventTitle = '';\n      this.lastEventDescription = '';\n      this.lastEventDate = '';\n    }\n    console.log(\"eventi del giorno corrente\", response.data);\n  } catch (error) { \n    console.error('Errore nel recupero degli eventi del giorno corrente:', error);\n    this.noEventsMessage = 'Errore nel caricamento degli eventi del giorno corrente.';\n    this.lastEventTitle = '';\n    this.lastEventDescription = '';\n    this.lastEventDate = '';\n  }\n\n},\n\n//FINE METODO PRENDI EVENTO GIORNO CORRENTE\n\n\n\n\n            //INIZIO METODO PRENDI ULTIMO EVENTO\n\n    async getLastEvent() {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log(\"token home \", token);\n        const response = await axios.get('/api/events/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: this.username }\n        });\n\n        this.isCurrentDay = false; \n\n        if (response.data) {\n          this.lastEventTitle = response.data.title || 'Nessun evento';\n          this.lastEventDescription = response.data.description || 'Nessuna descrizione';\n          this.lastEventDate = response.data.date || 'Nessuna data';\n        } else {\n          this.noEventsMessage = 'Nessun evento trovato.';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultimo evento:', error);\n        this.noEventsMessage = 'Errore nel caricamento dell\\'ultimo evento.';\n      }\n    },\n\n    //FINE METODO PRENDI ULTIMO EVENTO\n\n\n\n   \n\n\n\n\n\n   //INIZIO METODO PRENDI ULTIMA NOTA\n\n    async getLastNote() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/notes/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n\n        if (response.data) {\n          this.lastNoteHeading = response.data.heading;\n          this.lastNoteAuthor = response.data.author;\n          this.noNotesMessage = '';\n        } else {\n          this.noNotesMessage = 'Non ci sono note trovate';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultima nota:', error);\n        this.noNotesMessage = 'Errore nel caricamento dell\\'ultima nota.';\n      }\n    },\n\n    //FINE METODO PRENDI ULTIMA NOTA\n\n\n\n\n    //INIZIO FUNZIONE PRENDI TESTO ULTIMA NOTA\n\n    async getNoteText() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/notes/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n\n        if (response.data && response.data.content) {\n          this.lastNoteText = response.data.content;  \n          this.showNoteText = true;\n        } else {\n          this.lastNoteText = 'Testo non disponibile';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero del testo della nota:', error);\n        this.lastNoteText = 'Errore nel caricamento del testo della nota.';\n      }\n    },\n\n    //  FINE   FUNZIONE PRENDI TESTO ULTIMA NOTA\n\n\n\n     //METODO MARKED INIZIO\n    convertMarkdown(content) {\n      return marked(content);\n    },\n         //METODO MARKED FINE\n\n         //METODO TRUE-FALSE PER TESTO NOTA INIZIO\n         etNoteText() {\n      // Logica per ottenere il testo della nota\n      this.showNoteText = true; // Mostra il testo quando viene cliccato\n    },\n\n             //METODO TRUE-FALSE PER TESTO NOTA FINE\n\n  \n\n\n\n\n    //INIZIO METODO PRENDI ULTIMO POMODORO\n\n    async getLastPomodoro() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { username: username }\n        });\n\n        if (response.data) {\n          this.lastPomodoroTempoStudio = response.data.tempoStudio;\n          this.lastPomodoroTempoPausa = response.data.tempoPausa;\n          this.lastPomodoroRipetizioni = response.data.ripetizioni;\n          this.noPomodorosMessage = '';\n        } else {\n          this.noPomodorosMessage = 'Nessun pomodoro trovato';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultimo pomodoro:', error);\n        this.noPomodorosMessage = 'Errore nel caricamento dell\\'ultimo pomodoro.';\n      }\n    },\n\n    //FINE METODO PRENDI ULTIMO POMODORO\n\n\n\n\n\n    //INZIO ALTRI METODI (NOTIFICHE ECC)\n\n\n    async getNotifies(){\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/notifications/getNotif', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: this.username }\n        });\n        //console.log(response.data);\n        if (response.data) {\n          this.notifications=response.data;\n        } else {\n          this.noNotificationsMessage = 'Nessuna notifica trovata.';        \n        }\n      } catch (error) {\n        console.error('Errore nel recupero delle notifiche :', error);\n        this.noNotificationsMessage = 'Errore caricamento delle notifiche.';\n      }\n    },\n\n    async getUsers(){\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: this.username }\n        });\n        this.users = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero degli utenti:', error);\n      }\n    },\n\n    async sendNotifications() {\n      if (this.selectedUsers.length === 0) {\n        alert('Seleziona almeno un utente per inviare una notifica.');\n        return;\n      }\n\n      if (this.notificationMessage.trim() === '') {\n        alert('Scrivi un messaggio per inviare una notifica.');\n        return;\n      }\n\n      try {\n        const token = sessionStorage.getItem('token');\n\n        await axios.post('/api/notifications/send', {\n          recipients: this.selectedUsers,\n          message: this.notificationMessage\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        alert('notifiche inviate!');\n      } catch (error) {\n        console.error('errore durante invio notifiche:', error);\n        alert('Errore durante invio notifiche.');\n      }\n    },\n    \n    async deleteNotification(notificationId) {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        await axios.delete(`/api/notifications/${notificationId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        this.notifications = this.notifications.filter(notification => notification._id !== notificationId);\n        alert('Notifica eliminata!');\n      } catch (error) {\n        console.error('errore durante eliminazione notifica:', error);\n        alert('errore durante leliminazione della notifica.');\n      }\n    },\n\n    \n   \n    \n\n  }\n\n};\n</script>\n\n<style scoped>\nbody {\n  background: linear-gradient(to bottom, #0000ff, #ffffff);\n  margin: 0;\n}\n\n.home-principale {\n  text-align: center;\n  background-image:  url('https://images.hdqwalls.com/wallpapers/abstract-shapes-4k-q2.jpg');\n  background-size: cover;\n  background-position: center;\n  min-height: 100vh; \n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  color: rgb(0, 0, 0); \n}\n\n.carousel-item {\n  background-color: #f0f0f0;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  background-color: #000;\n  border-radius: 50%;\n}\n\n.notification-form {\n  max-width: 300px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 10px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-group label {\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.form-group select,\n.form-group textarea {\n  width: 100%;\n  padding: 8px;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\ntextarea {\n  height: 100px;\n  resize: vertical;\n}\n\nbutton.btn {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  background-color: #007bff;\n  color: white;\n  font-size: 1.1rem;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\nbutton.btn:hover {\n  background-color: #0056b3;\n}\n\nbutton.btn-danger{\n  background-color: rgb(194, 27, 27);\n}\n\n.note-text {\n  margin-top: 20px;\n  text-align: left;\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}