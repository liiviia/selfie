{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nexport default {\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const events = ref([]);\n    const activities = ref([]);\n    const queryDate = computed(() => route.query.date);\n    const navigateToAddEvent = () => {\n      router.push({\n        path: '/addEvent',\n        query: {\n          date: queryDate.value\n        }\n      });\n    };\n    const navigateToAddActivity = () => {\n      router.push({\n        path: '/addActivities',\n        query: {\n          date: queryDate.value\n        }\n      });\n    };\n    const fetchEvents = async () => {\n      try {\n        const {\n          author,\n          date\n        } = route.query;\n        const token = sessionStorage.getItem('token');\n        console.log('Fetching events for:', author, date);\n        const response = await axios.get('/api/events/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author,\n            date\n          }\n        });\n        events.value = Array.isArray(response.data) ? response.data : [response.data];\n        console.log('Fetched events:', events.value);\n        const activityResponse = await axios.get('/api/activities/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author,\n            date\n          }\n        });\n        activities.value = Array.isArray(activityResponse.data) ? activityResponse.data : [activityResponse.data];\n        console.log('Fetched activities:', activities.value);\n        activities.value.forEach(activity => {\n          if (activity.deadline) {\n            const parsedDate = new Date(activity.deadline);\n            if (isNaN(parsedDate)) {\n              console.error('Data non valida per l\\'attività:', activity);\n            } else {\n              activity.date = parsedDate;\n            }\n          } else {\n            console.error('Attività senza data di scadenza:', activity);\n          }\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi e delle attività:', error);\n      }\n    };\n    const formatDate = dateString => {\n      if (!dateString) return 'Data non disponibile';\n      const date = new Date(dateString);\n      return date instanceof Date && !isNaN(date) ? date.toLocaleDateString('it-IT', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }) : 'Data non valida';\n    };\n    onMounted(fetchEvents);\n    return {\n      events,\n      activities,\n      formatDate,\n      queryDate,\n      navigateToAddEvent,\n      navigateToAddActivity\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useRoute","useRouter","axios","setup","route","router","events","activities","queryDate","query","date","navigateToAddEvent","push","path","value","navigateToAddActivity","fetchEvents","author","token","sessionStorage","getItem","console","log","response","get","headers","Authorization","params","Array","isArray","data","activityResponse","forEach","activity","deadline","parsedDate","Date","isNaN","error","formatDate","dateString","toLocaleDateString","year","month","day"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/eventDayCalendar.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Eventi e Attività per {{ formatDate(queryDate) }}</h2>\n      <div class=\"button-container\">\n      <button @click=\"navigateToAddEvent\">Aggiungi Evento</button>\n      <button @click=\"navigateToAddActivity\">Aggiungi Attività</button>\n    </div>\n      <div v-if=\"events.length > 0\">\n        <h3>Eventi:</h3>\n        <div v-for=\"event in events\" :key=\"event._id\">\n          <h4>{{ event.title }}</h4>\n          <p>Data: {{ formatDate(event.date) }}</p>\n          <p>Descrizione: {{ event.description }}</p>\n        </div>\n      </div>\n      <div v-if=\"activities.length > 0\">\n        <h3>Attività:</h3>\n        <div v-for=\"activity in activities\" :key=\"activity._id\">\n          <h4>{{ activity.title }}</h4>\n          <p>Data: {{ formatDate(activity.deadline || activity.date) }}</p>\n          <p>Descrizione: {{ activity.description }}</p>\n        </div>\n      </div>\n      <div v-if=\"events.length === 0 && activities.length === 0\">\n        <p>Nessun evento o attività per questa data.</p>\n\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted, computed } from 'vue';\n  import { useRoute, useRouter } from 'vue-router';\n  import axios from 'axios';\n  \n  export default {\n    setup() {\n      const route = useRoute();\n      const router = useRouter();\n      const events = ref([]);\n      const activities = ref([]);\n      const queryDate = computed(() => route.query.date);\n\n\n      const navigateToAddEvent = () => {\n        router.push({ path: '/addEvent', query: { date: queryDate.value } });\n      };\n\n      const navigateToAddActivity = () => {\n        router.push({ path: '/addActivities', query: { date: queryDate.value } });\n      };\n  \n      const fetchEvents = async () => {\n    try {\n      const { author, date } = route.query;\n      const token = sessionStorage.getItem('token');\n      console.log('Fetching events for:', author, date);\n      const response = await axios.get('/api/events/by-date', {\n        headers: { Authorization: `Bearer ${token}` },\n        params: { author, date }\n      });\n      events.value = Array.isArray(response.data) ? response.data : [response.data];\n      console.log('Fetched events:', events.value);\n  \n      const activityResponse = await axios.get('/api/activities/by-date', {\n        headers: { Authorization: `Bearer ${token}` },\n        params: { author, date }\n      });\n      activities.value = Array.isArray(activityResponse.data) ? activityResponse.data : [activityResponse.data];\n      console.log('Fetched activities:', activities.value);\n  \n      activities.value.forEach(activity => {\n        if (activity.deadline) {\n          const parsedDate = new Date(activity.deadline);\n          if (isNaN(parsedDate)) {\n            console.error('Data non valida per l\\'attività:', activity);\n          } else {\n            activity.date = parsedDate; \n          }\n        } else {\n          console.error('Attività senza data di scadenza:', activity);\n        }\n      });\n    } catch (error) {\n      console.error('Errore nel recupero degli eventi e delle attività:', error);\n    }\n  };\n  \n  const formatDate = (dateString) => {\n    if (!dateString) return 'Data non disponibile';\n    const date = new Date(dateString);\n    return date instanceof Date && !isNaN(date) \n      ? date.toLocaleDateString('it-IT', { \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        }) \n      : 'Data non valida';\n  };\n  \n      onMounted(fetchEvents);\n  \n      return { events,activities, formatDate, queryDate ,navigateToAddEvent, navigateToAddActivity};\n    }\n  }\n  </script>\n\n\n\n<style scoped>\n.button-container {\n  margin-bottom: 20px;\n}\n\nbutton {\n  margin-right: 10px;\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}