{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  setup() {\n    const route = useRoute();\n    const pomodoro12 = ref(null); // Dichiarazione reattiva tramite ref\n    const modalVisible = ref(false); // Stato per il modal\n\n    // Metodo per aprire il modal\n    const openModal = () => {\n      modalVisible.value = true;\n    };\n\n    // Metodo per caricare i dati delle sessioni Pomodoro\n    const loadPomodoroData = () => {\n      axios.get(\"/api/pomodoro-today\").then(response => {\n        if (response.data) {\n          pomodoro.value = response.data; // Assicurati che i dati siano corretti\n        }\n      });\n    };\n    const cercaPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const currentDate = new Date().toISOString().split('T')[0];\n        const response = await axios.get('/api/pomsGiornoCorrente', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username,\n            giorno: currentDate\n          }\n        });\n        if (response.data) {\n          pomodoro.value = response.data; // PoichÃ© ora ricevi un oggetto singolo\n          let alertMessage = \"Ci sono sessioni Pomodoro programmate per oggi:\\n\";\n          console.log(response.data);\n\n          // Aggiungi i dettagli della sessione Pomodoro nell'alert\n          alertMessage += `cicli: ${pomodoro.value.ripetizioni},\\n  tempo studio: ${pomodoro.value.tempoStudio} minuti,  \\n tempo pausa: ${pomodoro.value.tempoPausa} minuti   \\n`;\n          alert(alertMessage);\n          const startSession = confirm(\"Vuoi iniziare la sessione Pomodoro?\");\n          if (startSession) {\n            sessionIDP.value = pomodoro.value.sessionID;\n            console.log(\"Inizia la sessione Pomodoro\");\n            console.log(sessionIDP);\n            studyCycles.value = pomodoro.value.ripetizioni; // Imposta il numero di cicli\n            startStudyTimer(pomodoro.value.tempoStudio, studyCycles.value, pomodoro.value.tempoPausa);\n            pomEsistente = true;\n            await savePomDataIntermediGiaAggiunti(pomodoro);\n          }\n        }\n      } catch (error) {\n        console.error(\"Errore:\", error);\n      }\n    };\n    const newPom = ref({\n      username: localStorage.getItem('username') || 'Guest',\n      tempoStudio: 30,\n      tempoPausa: 5,\n      ripetizioni: 5,\n      sessionID: uuidv4(),\n      giorno: ''\n    });\n    const statusMessage = ref('');\n    let studyCycles = ref(0);\n    let timerInterval = null;\n    let isStudyPhase = ref(true);\n    let remainingTime = ref(0);\n    let isPaused = ref(false);\n    // let isPomodoroSaved = false;\n    const sessionIDP = ref(null);\n    let pomEsistente = false;\n    const pomodoro = ref(null);\n    onMounted(() => {\n      if (route.query.date) {\n        newPom.value.giorno = route.query.date;\n      }\n\n      /*  let savePomDataFunction;\n      window.addEventListener('beforeunload', () => {\n      if (!isPomodoroSaved) {\n      if (pomEsistente) {\n        // Usa una funzione wrapper per passare `pomodoro`\n        savePomDataFunction = () => savePomDataIntermediGiaAggiunti(pomodoro);\n        console.log(pomodoro);\n      } else {\n        savePomDataFunction = savePomDataIntermedi;\n      }\n      savePomDataFunction();\n      }\n      });\n      onBeforeUnmount(() => {\n      if (pomEsistente) {\n      // Rimuovi l'event listener passando la funzione senza eseguirla\n      window.removeEventListener('beforeunload', savePomDataFunction);\n      } else {\n      window.removeEventListener('beforeunload', savePomDataIntermedi);\n      }\n      });*/\n\n      cercaPomodoro();\n    });\n    const savePomDataIntermediGiaAggiunti = async pomodoro => {\n      try {\n        console.log('Dati pomodoro prima del salvataggio:', pomodoro);\n        const token = sessionStorage.getItem('token');\n\n        // Definisci le variabili per il tempo rimanente\n        let savedTempoStudio;\n        let savedTempoPausa;\n\n        // Se siamo in fase di studio\n        if (isStudyPhase.value) {\n          savedTempoStudio = Math.floor(remainingTime.value / 60); // Tempo di studio completato\n          savedTempoPausa = pomodoro.value.tempoPausa; // Usa il tempo di pausa predefinito\n        } else {\n          // Se siamo in pausa\n          savedTempoStudio = pomodoro.value.tempoStudio; // Usa il tempo di studio predefinito\n          savedTempoPausa = Math.floor(remainingTime.value / 60); // Tempo di pausa completato\n        }\n        console.log(savedTempoPausa);\n        console.log(savedTempoStudio);\n\n        // Crea il payload per il salvataggio\n        const pomData = {\n          username: pomodoro.value.username,\n          tempoStudio: savedTempoStudio,\n          tempoPausa: savedTempoPausa,\n          ripetizioni: studyCycles.value,\n          sessionID: pomodoro.value.sessionID,\n          giorno: pomodoro.value.giorno\n        };\n\n        // Invia i dati al backend\n        await axios.post('/api/savePomDataIntermedi', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Salvataggio pomData:', pomData);\n      } catch (error) {\n        console.error('Errore nel salvataggio dei dati:', error);\n      }\n    };\n    const savePomDataIntermedi = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        // Definisci le variabili per il tempo rimanente\n        let savedTempoStudio;\n        let savedTempoPausa;\n\n        // Se siamo in fase di studio\n        if (isStudyPhase.value) {\n          savedTempoStudio = Math.floor(remainingTime.value / 60); // Calcola il tempo di studio completato\n          savedTempoPausa = newPom.value.tempoPausa; // Usa il tempo di pausa predefinito\n        } else {\n          // Se siamo in pausa\n          savedTempoStudio = newPom.value.tempoStudio; // Usa il tempo di studio predefinito\n          savedTempoPausa = Math.floor(remainingTime.value / 60); // Calcola il tempo di pausa completato\n        }\n\n        // Crea il payload da inviare\n        const pomData = {\n          username: newPom.value.username,\n          tempoStudio: savedTempoStudio,\n          tempoPausa: savedTempoPausa,\n          ripetizioni: studyCycles.value,\n          sessionID: newPom.value.sessionID,\n          giorno: newPom.value.giorno\n        };\n        console.log('Salvataggio pomData:', pomData); // Aggiungi questo log per il debug\n\n        await axios.post('/api/savePomDataIntermedi', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } catch (error) {\n        console.error('Errore nel salvataggio dei dati:', error);\n      }\n    };\n    const aggiungiPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const currentDate = new Date();\n        const selectedDate = new Date(newPom.value.giorno);\n        const response = await axios.post('/api/pomsPOST', newPom.value, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Sessione pomodoro aggiunta:', response.data);\n        if (selectedDate.getTime() > currentDate.getTime()) {\n          statusMessage.value = 'Sessione pomodoro aggiunta per una data futura.';\n        } else {\n          studyCycles.value = newPom.value.ripetizioni;\n          startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n        }\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    };\n    const startStudyTimer = async (studyTime, cycles, pause) => {\n      if (cycles <= 0) {\n        try {\n          const token = sessionStorage.getItem('token');\n\n          // Crea l'oggetto pomodoro da inviare\n          const pomData = {\n            sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n            terminato: true\n          };\n\n          // Fai la richiesta PATCH\n          await axios.patch('/api/pomsUpdateFinito', pomData, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          console.log('Ciclo marcato come terminato nel backend.');\n        } catch (error) {\n          console.error('Errore nell\\'aggiornamento del ciclo:', error);\n        }\n        alert('Ciclo completato!');\n        return;\n      }\n      statusMessage.value = `Studio! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = studyTime * 60;\n      console.log(remainingTime.value);\n      isStudyPhase.value = true;\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, studyTime, pause, cycles, startBreakTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    const startBreakTimer = (pauseTime, cycles) => {\n      if (cycles <= 0) {\n        alert('Ciclo completato!');\n        return;\n      }\n      statusMessage.value = `Pausa! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = pauseTime * 60;\n      isStudyPhase.value = false;\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, pauseTime, pauseTime, cycles, startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    const updateTimer = (remaining, phaseTime, pauseTime, cycles, nextPhase) => {\n      if (remaining > 0) {\n        const minutes = Math.floor(remaining / 60);\n        const seconds = remaining % 60;\n        document.getElementById('timerDisplay').textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      } else {\n        clearInterval(timerInterval);\n        studyCycles.value--;\n        nextPhase(phaseTime, studyCycles.value);\n      }\n    };\n    const skipPhase = async () => {\n      clearInterval(timerInterval);\n      if (isStudyPhase.value) {\n        studyCycles.value--;\n        startBreakTimer(newPom.value.tempoPausa, studyCycles.value);\n      } else {\n        startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n      }\n      if (studyCycles.value <= 0) {\n        try {\n          const token = sessionStorage.getItem('token');\n\n          // Crea l'oggetto pomodoro da inviare\n          const pomData = {\n            sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n            terminato: true\n          };\n\n          // Fai la richiesta PATCH\n          await axios.patch('/api/pomsUpdateFinito', pomData, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          console.log('Ciclo marcato come terminato nel backend.');\n        } catch (error) {\n          console.error('Errore nell\\'aggiornamento del ciclo:', error);\n        }\n        statusMessage.value = \"Ciclo completato!\";\n        document.getElementById('timerDisplay').textContent = \"00:00\";\n      }\n    };\n    const restartCycle = () => {\n      clearInterval(timerInterval);\n      studyCycles.value = newPom.value.ripetizioni;\n      startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n    };\n    const endCycle = async () => {\n      clearInterval(timerInterval);\n      studyCycles.value = 0;\n      try {\n        const token = sessionStorage.getItem('token');\n\n        // Crea l'oggetto pomodoro da inviare\n        const pomData = {\n          sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n          terminato: true\n        };\n\n        // Fai la richiesta PATCH\n        await axios.patch('/api/pomsUpdateFinito', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Ciclo marcato come terminato nel backend.');\n      } catch (error) {\n        console.error('Errore nell\\'aggiornamento del ciclo:', error);\n      }\n      statusMessage.value = 'Ciclo terminato manualmente.';\n      document.getElementById('timerDisplay').textContent = \"00:00\";\n    };\n    const pauseTimer = () => {\n      clearInterval(timerInterval);\n      if (pomEsistente) {\n        console.log(\"pomodoro prima di chiamare f\", pomodoro);\n        savePomDataIntermediGiaAggiunti(pomodoro);\n      } else {\n        console.log(\"pomodoro.value undefined\");\n        savePomDataIntermedi();\n      }\n\n      // isPomodoroSaved = true; \n      isPaused.value = true;\n    };\n    const resumeTimer = () => {\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, newPom.value.tempoStudio, newPom.value.tempoPausa, studyCycles.value, isStudyPhase.value ? startBreakTimer : startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    return {\n      newPom,\n      statusMessage,\n      aggiungiPomodoro,\n      skipPhase,\n      restartCycle,\n      endCycle,\n      pauseTimer,\n      resumeTimer,\n      isPaused,\n      modalVisible,\n      openModal,\n      pomodoro12\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","axios","v4","uuidv4","setup","route","pomodoro12","modalVisible","openModal","value","loadPomodoroData","get","then","response","data","pomodoro","cercaPomodoro","token","sessionStorage","getItem","username","localStorage","currentDate","Date","toISOString","split","headers","Authorization","params","giorno","alertMessage","console","log","ripetizioni","tempoStudio","tempoPausa","alert","startSession","confirm","sessionIDP","sessionID","studyCycles","startStudyTimer","pomEsistente","savePomDataIntermediGiaAggiunti","error","newPom","statusMessage","timerInterval","isStudyPhase","remainingTime","isPaused","query","date","savedTempoStudio","savedTempoPausa","Math","floor","pomData","post","savePomDataIntermedi","aggiungiPomodoro","selectedDate","getTime","studyTime","cycles","pause","terminato","patch","clearInterval","setInterval","updateTimer","startBreakTimer","pauseTime","remaining","phaseTime","nextPhase","minutes","seconds","document","getElementById","textContent","String","padStart","skipPhase","restartCycle","endCycle","pauseTimer","resumeTimer"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/pomodoroTempo.vue"],"sourcesContent":["<template>\n  <div class=\"event-form\">\n    <h1>Sessione Pomodoro</h1>\n    <form @submit.prevent=\"aggiungiPomodoro\">\n      <div>\n        <label for=\"tempoStudio\">Tempo di studio (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoStudio\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"tempoPausa\">Tempo di pausa (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoPausa\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"ripetizioni\">Numero di ripetizioni:</label>\n        <input type=\"number\" v-model=\"newPom.ripetizioni\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"giorno\">Giorno della sessione:</label>\n        <input type=\"date\" v-model=\"newPom.giorno\" required>\n      </div>\n\n      <button type=\"submit\" class=\"rounded-btn\">Aggiungi Sessione</button>\n    </form>\n\n    <p id=\"studio-pausa\">{{ statusMessage }}</p>\n\n    <div id=\"clock\" class=\"blob\">\n      <div class=\"timer\" id=\"timerDisplay\">00:00</div>\n      <div class=\"progress-bar\"></div>\n    </div>\n\n    <div class=\"controls\">\n  <div class=\"button-row\">\n    <button @click=\"skipPhase\">Salta alla fase successiva</button>\n    <button @click=\"restartCycle\">Ricomincia ciclo</button>\n  </div>\n  <div class=\"button-row\">\n    <button @click=\"endCycle\">Termina ciclo</button>\n    <button @click=\"pauseTimer\">Stoppa timer</button>\n    <button v-if=\"isPaused\" @click=\"resumeTimer\">Riprendi timer</button> \n  </div>\n</div>\n\n\n<div>\n    <!-- Bottone per aprire il modal -->\n    <b-button v-if=\"pomodoro.value\" @click=\"openModal\" variant=\"primary\">\n      Mostra Sessioni Pomodoro\n    </b-button>\n\n    <!-- Modal per visualizzare le sessioni Pomodoro -->\n    <b-modal v-model=\"modalVisible\" title=\"Sessioni Pomodoro per oggi\">\n      <div v-if=\"pomodoro.value\">\n        <p v-for=\"session in pomodoro.value\" :key=\"session.id\">\n          Sessione: {{ session.name }} <br>\n          Durata: {{ session.durata }} minuti <br>\n          Inizia alle: {{ session.inizio }} <br>\n          Termina alle: {{ session.fine }} <br>\n        </p>\n      </div>\n      <div v-else>\n        <p>Nessuna sessione Pomodoro programmata per oggi.</p>\n      </div>\n    </b-modal>\n  </div>\n\n\n\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid'; \n\n\n\n\nexport default {\n  setup() {\n    const route = useRoute();\n\n    const pomodoro12 = ref(null); // Dichiarazione reattiva tramite ref\n    const modalVisible = ref(false); // Stato per il modal\n\n    // Metodo per aprire il modal\n    const openModal = () => {\n      modalVisible.value = true;\n    };\n\n    // Metodo per caricare i dati delle sessioni Pomodoro\n    const loadPomodoroData = () => {\n      axios.get(\"/api/pomodoro-today\").then((response) => {\n        if (response.data) {\n          pomodoro.value = response.data; // Assicurati che i dati siano corretti\n        }\n      });\n    };\n\n\n    const cercaPomodoro = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    const response = await axios.get('/api/pomsGiornoCorrente', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        username,\n        giorno: currentDate\n      }\n    });\n\n    if (response.data) {\n       pomodoro.value = response.data; // PoichÃ© ora ricevi un oggetto singolo\n     let alertMessage = \"Ci sono sessioni Pomodoro programmate per oggi:\\n\";\n\n      console.log(response.data);\n\n      // Aggiungi i dettagli della sessione Pomodoro nell'alert\n     alertMessage += `cicli: ${pomodoro.value.ripetizioni},\\n  tempo studio: ${pomodoro.value.tempoStudio} minuti,  \\n tempo pausa: ${pomodoro.value.tempoPausa} minuti   \\n`;\n\n     alert(alertMessage);\n\n      const startSession = confirm(\"Vuoi iniziare la sessione Pomodoro?\");\n\n               if (startSession) {\n                sessionIDP.value = pomodoro.value.sessionID;\n                   console.log(\"Inizia la sessione Pomodoro\");\n                   console.log(sessionIDP);\n                   studyCycles.value = pomodoro.value.ripetizioni; // Imposta il numero di cicli\n        startStudyTimer(pomodoro.value.tempoStudio, studyCycles.value, pomodoro.value.tempoPausa);\n      pomEsistente = true;\n\n        await savePomDataIntermediGiaAggiunti(pomodoro);\n}\n    }\n  } catch (error) {\n    console.error(\"Errore:\", error);\n  }\n};\n\n\n\n\n\n    const newPom = ref({\n      username: localStorage.getItem('username') || 'Guest',\n      tempoStudio: 30,  \n      tempoPausa: 5,    \n      ripetizioni: 5,  \n      sessionID: uuidv4(),\n      giorno: ''\n    });\n    const statusMessage = ref('');\n    let studyCycles = ref(0); \n    let timerInterval = null;\n    let isStudyPhase = ref(true); \n    let remainingTime = ref(0); \n    let isPaused = ref(false); \n   // let isPomodoroSaved = false;\n    const sessionIDP = ref(null);\n    let pomEsistente = false;\n    const pomodoro = ref(null);\n\n    \n\n    onMounted(() => {\n      if (route.query.date) {\n        newPom.value.giorno = route.query.date;\n      }\n\n     \n     \n     \n    /*  let savePomDataFunction;\n\nwindow.addEventListener('beforeunload', () => {\n  if (!isPomodoroSaved) {\n    if (pomEsistente) {\n      // Usa una funzione wrapper per passare `pomodoro`\n      savePomDataFunction = () => savePomDataIntermediGiaAggiunti(pomodoro);\n      console.log(pomodoro);\n    } else {\n      savePomDataFunction = savePomDataIntermedi;\n    }\n    savePomDataFunction();\n  }\n});\n\nonBeforeUnmount(() => {\n  if (pomEsistente) {\n    // Rimuovi l'event listener passando la funzione senza eseguirla\n    window.removeEventListener('beforeunload', savePomDataFunction);\n  } else {\n    window.removeEventListener('beforeunload', savePomDataIntermedi);\n  }\n});*/\n\n\n  \n  \n  cercaPomodoro();\n \n\n\n});\n\n\n\n\n    \n  \n    const savePomDataIntermediGiaAggiunti = async (pomodoro) => {\n  try {\n    console.log('Dati pomodoro prima del salvataggio:', pomodoro);\n\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio = Math.floor(remainingTime.value / 60); // Tempo di studio completato\n      savedTempoPausa = pomodoro.value.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = pomodoro.value.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Tempo di pausa completato\n    }\n\n    console.log(savedTempoPausa);\n    console.log(savedTempoStudio);\n\n    // Crea il payload per il salvataggio\n    const pomData = {\n      username: pomodoro.value.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value,\n      sessionID: pomodoro.value.sessionID,\n      giorno: pomodoro.value.giorno\n    };\n\n    // Invia i dati al backend\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      \n    });\n    console.log('Salvataggio pomData:', pomData); \n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n\n\n    const savePomDataIntermedi = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio =Math.floor(remainingTime.value / 60); // Calcola il tempo di studio completato\n      savedTempoPausa = newPom.value.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = newPom.value.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Calcola il tempo di pausa completato\n    }\n\n    // Crea il payload da inviare\n    const pomData = {\n      username: newPom.value.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value, \n      sessionID: newPom.value.sessionID,\n      giorno: newPom.value.giorno\n    };\n\n    console.log('Salvataggio pomData:', pomData); // Aggiungi questo log per il debug\n\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n     \n\n\n\n\n\n\n    const aggiungiPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        const currentDate = new Date();\n        const selectedDate = new Date(newPom.value.giorno);\n\n        const response = await axios.post('/api/pomsPOST', newPom.value, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        console.log('Sessione pomodoro aggiunta:', response.data);\n\n        if (selectedDate.getTime() > currentDate.getTime()) {\n          statusMessage.value = 'Sessione pomodoro aggiunta per una data futura.';\n        } else {\n          studyCycles.value = newPom.value.ripetizioni;\n          startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n        }\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    };\n\n    const startStudyTimer = async (studyTime, cycles, pause) => {\n\n      if (cycles <= 0) {\n        try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Studio! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = studyTime * 60;\n      console.log(remainingTime.value);\n\n      isStudyPhase.value = true;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, studyTime, pause, cycles, startBreakTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const startBreakTimer = (pauseTime, cycles) => {\n      if (cycles <= 0) {\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Pausa! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = pauseTime * 60;\n      isStudyPhase.value = false;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, pauseTime, pauseTime, cycles, startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const updateTimer = (remaining, phaseTime, pauseTime, cycles, nextPhase) => {\n      if (remaining > 0) {\n        const minutes = Math.floor(remaining / 60);\n        const seconds = remaining % 60;\n        document.getElementById('timerDisplay').textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      } else {\n        clearInterval(timerInterval);\n        studyCycles.value--;\n        nextPhase(phaseTime, studyCycles.value);\n      }\n    };\n\n    const skipPhase = async () => {\n      clearInterval(timerInterval);\n\n      if (isStudyPhase.value) {\n        studyCycles.value--;\n        startBreakTimer(newPom.value.tempoPausa, studyCycles.value);\n      } else {\n        startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n      }\n\n      if (studyCycles.value <= 0) {\n        \n        try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n\n        \n        statusMessage.value = \"Ciclo completato!\";\n        document.getElementById('timerDisplay').textContent = \"00:00\";\n      }\n    };\n\n    const restartCycle = () => {\n      clearInterval(timerInterval);\n      studyCycles.value = newPom.value.ripetizioni;\n      startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n    };\n\n    const endCycle = async () => {\n  clearInterval(timerInterval);\n  studyCycles.value = 0;\n  try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n  statusMessage.value = 'Ciclo terminato manualmente.';\n  document.getElementById('timerDisplay').textContent = \"00:00\";\n\n \n};\n\n\n    const pauseTimer = () => {\n      clearInterval(timerInterval);\n      if(pomEsistente) {\n        console.log(\"pomodoro prima di chiamare f\",pomodoro);\n        savePomDataIntermediGiaAggiunti(pomodoro);\n      }\n      else{\n        console.log(\"pomodoro.value undefined\");\n        savePomDataIntermedi();}\n      \n     // isPomodoroSaved = true; \n      isPaused.value = true;\n    };\n\n    const resumeTimer = () => {\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, newPom.value.tempoStudio, newPom.value.tempoPausa, studyCycles.value, isStudyPhase.value ? startBreakTimer : startStudyTimer);\n        remainingTime.value--;\n      }, 1000); \n    };\n\n    return {\n      newPom,\n      statusMessage,\n      aggiungiPomodoro,\n      skipPhase,\n      restartCycle,\n      endCycle,\n      pauseTimer,\n      resumeTimer,\n      isPaused,\n      modalVisible,\n      openModal,\n      pomodoro12\n    };\n  }\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n  width: 300px;\n  text-align: center;\n}\n\nbutton {\n  padding: 10px;\n  margin: 10px;\n  cursor: pointer;\n}\n\n.view-pomodoro-btn {\n  margin-top: 20px;\n  padding: 10px;\n}\n\n#clock {\n  margin-top: 20px;\n}\n\n.progress-bar {\n  width: 0;\n  height: 20px;\n  background-color: green;\n  transition: width 1s linear;\n}\n\n.timer {\n  font-size: 2em;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\nform {\n  max-width: 400px;\n  margin: auto;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 10px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\nbutton.rounded-btn {\n  border-radius: 20px; \n}\n\n\n.controls {\n  margin-top: 20px;\n  margin-bottom: 40px;\n  display: flex; \n  flex-wrap: wrap; \n  justify-content: center; \n}\n\n.controls button {\n  padding: 10px;\n  margin: 10px; \n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\n.button-row {\n  display: flex; \n  justify-content: space-between; \n  margin-bottom: 10px; \n}\n\n.controls button {\n  flex: 1; \n  margin-right: 10px; \n}\n\n.controls button:last-child {\n  margin-right: 0;\n}\n\n#clock {\n  margin-top: 40px;\n}\n\n@media (max-width: 600px) {\n  h1 {\n    margin-top: 30px; \n  }\n\n  .controls button {\n    margin-right: 10px; \n  }\n}\n\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}