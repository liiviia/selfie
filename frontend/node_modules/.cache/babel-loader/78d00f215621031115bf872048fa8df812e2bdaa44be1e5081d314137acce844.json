{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport axios from 'axios';\nexport default {\n  name: 'NotificationManager',\n  data() {\n    return {\n      events: [],\n      // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(),\n      // Data corrente\n      intervalId: null,\n      // ID per l'intervallo che può essere utilizzato per fermarlo\n      notifiedEvents: new Set(),\n      eventTimers: new Map()\n    };\n  },\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        // Funzione per inviare l'email\n        const sendEmail = async () => {\n          try {\n            await axios.post('/api/events/email', {\n              emailRicevente,\n              eventDetails: event\n            }, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            console.log('Notifica email inviata con successo');\n          } catch (error) {\n            console.error('Errore durante invio della notifica email:', error);\n          }\n        };\n\n        // Invia la prima email\n        await sendEmail();\n      } catch (error) {\n        console.error('Errore durante il processo di invio delle notifiche email:', error);\n      }\n    },\n    sendAlertNotification(event) {\n      // Verifica se l'evento è già stato notificato\n      if (this.notifiedEvents.has(event.id)) {\n        // Se la notifica è già stata inviata, non fare nulla\n        return;\n      }\n\n      // Invia la notifica iniziale\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n\n      // Aggiungi l'evento all'elenco degli eventi notificati per evitare notifiche multiple\n      this.notifiedEvents.add(event.id);\n    },\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"Schedulazione notifiche...\");\n      console.log(\"Evento passato\", event);\n\n      // Verifica se è già stato impostato un timer per questo evento e cancella l'eventuale timer esistente\n      if (this.eventTimers.has(event.id)) {\n        console.log(\"timer eliminato\");\n        clearTimeout(this.eventTimers.get(event.id)); // Cancella il timer esistente\n        this.eventTimers.delete(event.id); // Elimina il timer dalla mappa\n      }\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n        const timeMachineNow = new Date(response.data).getTime();\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n        const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;\n        const eventTime = new Date(eventDateTimeString).getTime();\n        console.log(\"Event Time:\", eventTime);\n        if (isNaN(eventTime)) {\n          console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n          return;\n        }\n\n        // Calcola il tempo per la notifica\n        const notificationTime = eventTime - event.notificationTime * 60000;\n        console.log(\"Notification Time:\", notificationTime);\n\n        // Calcola quanto manca alla notifica\n        const timeUntilNotification = notificationTime - timeMachineNow;\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n        console.log(\"notifica:::\", event.title);\n        if (timeUntilNotification > 0) {\n          // Crea il nuovo `setTimeout` e salva l'ID nella `Map`\n          const timerId = setTimeout(() => {\n            console.log(\"Triggering notifications for event:\", event.title);\n            this.triggerNotifications(event, emailRicevente);\n          }, timeUntilNotification);\n\n          // Salva l'ID del timer nella mappa\n          this.eventTimers.set(event.id, timerId);\n        } else {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"evento notifica meccanismo:\", event.notificationMechanism);\n\n      // Verifica se la notifica per questo evento è già stata inviata\n      if (this.notifiedEvents.has(event.id)) {\n        return; // Se è già stata inviata, non fare nulla\n      }\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n\n      // Aggiungi l'evento all'elenco degli eventi notificati\n      this.notifiedEvents.add(event.id);\n    },\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: username\n          }\n        });\n        console.log(response.data);\n        this.events = response.data;\n\n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"venti trovati\");\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n    // Avvia l'aggiornamento periodico degli eventi\n    startPeriodicUpdate() {\n      this.intervalId = setInterval(() => {\n        console.log(\"Aggiornamento eventi in corso...\");\n        this.fetchEvents();\n      }, 1000); // Aggiorna ogni 10secondi (1000 ms)\n    },\n    // Ferma l'aggiornamento periodico\n    stopPeriodicUpdate() {\n      clearInterval(this.intervalId);\n    }\n  },\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents(); // Recupera gli eventi inizialmente\n    this.startPeriodicUpdate(); // Avvia l'aggiornamento periodico\n  },\n  beforeUnmount() {\n    this.stopPeriodicUpdate();\n    this.eventTimers.forEach(timerId => clearTimeout(timerId));\n    this.eventTimers.clear();\n  }\n};","map":{"version":3,"names":["axios","name","data","events","currentDate","Date","intervalId","notifiedEvents","Set","eventTimers","Map","methods","requestNotificationPermission","window","permesso","Notification","requestPermission","console","log","warn","error","sendEmailNotification","event","emailRicevente","token","sessionStorage","getItem","sendEmail","post","eventDetails","headers","Authorization","sendAlertNotification","has","id","alert","title","startTime","date","add","scheduleNotification","clearTimeout","get","delete","response","timeMachineNow","getTime","eventDateTimeString","slice","eventTime","isNaN","notificationTime","timeUntilNotification","timerId","setTimeout","triggerNotifications","set","notificationMechanism","includes","sendSystemNotification","fetchEvents","username","localStorage","params","author","forEach","startPeriodicUpdate","setInterval","stopPeriodicUpdate","clearInterval","mounted","beforeUnmount","clear"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n\n  data() {\n    return {\n      events: [], // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(), // Data corrente\n      intervalId: null, // ID per l'intervallo che può essere utilizzato per fermarlo\n      notifiedEvents: new Set(),\n      eventTimers: new Map()\n    };\n  },\n\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n    async sendEmailNotification(event, emailRicevente) {\n  try {\n    const token = sessionStorage.getItem('token');\n    \n    // Funzione per inviare l'email\n    const sendEmail = async () => {\n      try {\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    };\n\n    // Invia la prima email\n    await sendEmail();\n\n    \n  } catch (error) {\n    console.error('Errore durante il processo di invio delle notifiche email:', error);\n  }\n},\n\n\n    sendAlertNotification(event) {\n  // Verifica se l'evento è già stato notificato\n  if (this.notifiedEvents.has(event.id)) {\n    // Se la notifica è già stata inviata, non fare nulla\n    return;\n  }\n\n  // Invia la notifica iniziale\n  window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n\n  \n\n  // Aggiungi l'evento all'elenco degli eventi notificati per evitare notifiche multiple\n  this.notifiedEvents.add(event.id);\n},\n\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n  console.log(\"Schedulazione notifiche...\");\n  console.log(\"Evento passato\", event);\n\n  // Verifica se è già stato impostato un timer per questo evento e cancella l'eventuale timer esistente\n  if (this.eventTimers.has(event.id)) {\n    console.log(\"timer eliminato\");\n    clearTimeout(this.eventTimers.get(event.id));  // Cancella il timer esistente\n    this.eventTimers.delete(event.id);  // Elimina il timer dalla mappa\n  }\n\n  try {\n    console.log(\"Chiamata API iniziata...\");\n    const response = await axios.get('/api/getTime-machine');\n    console.log(\"Time machine data:\", response.data);\n\n    const timeMachineNow = new Date(response.data).getTime();\n    console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n    const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;\n    const eventTime = new Date(eventDateTimeString).getTime();\n    console.log(\"Event Time:\", eventTime);\n\n    if (isNaN(eventTime)) {\n      console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n      return;\n    }\n\n    // Calcola il tempo per la notifica\n    const notificationTime = eventTime - event.notificationTime * 60000;\n    console.log(\"Notification Time:\", notificationTime);\n\n    // Calcola quanto manca alla notifica\n    const timeUntilNotification = notificationTime - timeMachineNow;\n    console.log(\"Time Until Notification:\", timeUntilNotification);\n    console.log(\"notifica:::\" , event.title);\n    if (timeUntilNotification > 0) {\n      // Crea il nuovo `setTimeout` e salva l'ID nella `Map`\n      const timerId = setTimeout(() => {\n        console.log(\"Triggering notifications for event:\", event.title);\n        this.triggerNotifications(event, emailRicevente);\n      }, timeUntilNotification);\n\n      // Salva l'ID del timer nella mappa\n      this.eventTimers.set(event.id, timerId);\n    } else {\n      console.warn(\"L'orario della notifica è già passato o non è valido.\");\n    }\n  } catch (error) {\n    console.error(\"Errore durante la richiesta della Time Machine:\", error);\n  }\n},\n\n\n\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"evento notifica meccanismo:\",event.notificationMechanism);\n    \n    // Verifica se la notifica per questo evento è già stata inviata\n    if (this.notifiedEvents.has(event.id)) {\n      return; // Se è già stata inviata, non fare nulla\n    }\n\n    if (event.notificationMechanism.includes('system')) {\n      this.sendSystemNotification(event);\n    }\n    if (event.notificationMechanism.includes('email')) {\n      this.sendEmailNotification(event, emailRicevente);\n    }\n    if (event.notificationMechanism.includes('alert')) {\n      this.sendAlertNotification(event);\n    }\n\n    // Aggiungi l'evento all'elenco degli eventi notificati\n    this.notifiedEvents.add(event.id);\n    },\n\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username'); \n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n        console.log(response.data);\n        \n        this.events = response.data\n        \n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"venti trovati\");\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n\n    // Avvia l'aggiornamento periodico degli eventi\n    startPeriodicUpdate() {\n      this.intervalId = setInterval(() => {\n        console.log(\"Aggiornamento eventi in corso...\");\n        this.fetchEvents();\n      }, 1000); // Aggiorna ogni 10secondi (1000 ms)\n    },\n\n    // Ferma l'aggiornamento periodico\n    stopPeriodicUpdate() {\n      clearInterval(this.intervalId);\n    }\n  },\n\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents();  // Recupera gli eventi inizialmente\n    this.startPeriodicUpdate(); // Avvia l'aggiornamento periodico\n  },\n\n  beforeUnmount() {\n    this.stopPeriodicUpdate();\n    this.eventTimers.forEach(timerId => clearTimeout(timerId));\n    this.eventTimers.clear();\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}