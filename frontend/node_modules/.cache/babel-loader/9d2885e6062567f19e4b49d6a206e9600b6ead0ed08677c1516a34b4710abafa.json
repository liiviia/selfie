{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["\n<template>\n  <div></div>\n</template>\n\n<script>\n\nimport axios from 'axios';\nconst timeMachineNow = import {getTimeMachineDate} from timeMachineConfig;\n\nexport default {\n  name: 'NotificationManager',\n  \n  methods: {\n\n     //permesso notifiche\n     async requestNotificationPermission(){\n      try {\n        if ('Notification' in window) {\n        const permesso=await Notification.requestPermission();\n        console.log(\"permesso: \", permesso);\n        if (permesso === 'granted') {\n          console.log('Permesso notifiche di sistema concesso');\n        }else{\n          console.warn('Permesso notifiche di sistema neagtoo');\n        }\n      }\n      } catch (error) {\n          console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n\n    async sendEmailNotification(event,emailRicevente){\n      try {\n        const token = sessionStorage.getItem('token');\n\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers:{\n            Authorization: `Bearer ${token}`\n          }\n        });\n      console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n\n   \n    //Notifica di sistema --> visibile anche quando l'utente non è sull app\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      } \n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n        body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`,  \n      });\n\n        notification.onclick = () => {\n          window.focus();\n        };\n\n      }else{\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n\n    //notifica alert\n    sendAlertNotification(event){\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n    },\n    \n    //scheduler notifiche\n\n    scheduleNotification(event, emailRicevente) {\n  const eventTime = new Date(`${event.date}T${event.startTime}`).getTime(); // orario inizio evento in millisecondi\n  const notificationTime = eventTime - event.notificationTime * 60000;  // ora in cui mostrare la notifica\n  \n  // Usa l'orario della Time Machine come riferimento corrente\n  const timeMachineNow = timeMachineConfig.getTimeMachineDate().getTime();\n  const timeUntilNotification = notificationTime - timeMachineNow;\n\n  // Verifica se la notifica è ancora valida\n  if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n    console.warn(\"L'orario della notifica è già passato o non è valido.\");\n    return;\n  }\n\n  if (timeUntilNotification > 0) { // controllo che il tempo rimanente sia positivo\n    setTimeout(() => {\n      this.triggerNotifications(event, emailRicevente);\n      \n      // Se la notifica è ripetuta, pianifica gli intervalli di notifica successivi\n      if (event.repeatNotification > 0) {\n        setInterval(() => {\n          this.triggerNotifications(event, emailRicevente);\n        }, event.repeatNotification * 60000);\n      }\n    }, timeUntilNotification);\n  } else {\n    console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n  }\n},\n\n    \n    \n    triggerNotifications(event, emailRicevente) {\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      // if (event.notificationMechanism.includes('whatsapp')) {\n      //   this.sendWhatsAppNotification(event);\n      // }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n    },\n\n    \n  },\n\n  \n  mounted(){\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n  },\n\n\n};\n\n</script>"],"mappings":";;uBAEEA,mBAAA,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}