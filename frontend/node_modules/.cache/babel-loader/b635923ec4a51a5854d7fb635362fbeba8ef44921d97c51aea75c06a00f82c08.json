{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      newPom: {\n        username: localStorage.getItem('username') || 'Guest',\n        tempoStudio: '',\n        tempoPausa: '',\n        ripetizioni: ''\n      },\n      statusMessage: ''\n    };\n  },\n  methods: {\n    async aggiungiPomodoro() {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log('Dati inviati:', this.newPom);\n        const response = await axios.post('/api/pomsPOST', this.newPom, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Sessione pomodoro aggiunta:', response.data);\n        this.startStudyTimer(this.newPom.tempoStudio, this.newPom.ripetizioni, this.newPom.tempoPausa);\n        this.newPom = {\n          username: this.newPom.username,\n          tempoStudio: '',\n          tempoPausa: '',\n          ripetizioni: ''\n        };\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    },\n    startStudyTimer(studyTime, studyCycles, pause) {\n      this.statusMessage = `Studio! Numero cicli rimanenti: ${studyCycles}`;\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.style.width = '0%';\n      const startTime = Date.now();\n      const endTime = startTime + studyTime * 60000;\n      const updateProgressBar = () => {\n        const now = Date.now();\n        const elapsedTime = now - startTime;\n        const progressPercentage = elapsedTime / (studyTime * 60000) * 100;\n        progressBar.style.width = `${progressPercentage}%`;\n        if (now < endTime) {\n          const studyDifference = endTime - now;\n          const studyMinutes = Math.floor(studyDifference % (1000 * 60 * 60) / (1000 * 60));\n          const studySeconds = Math.floor(studyDifference % (1000 * 60) / 1000);\n          document.getElementById('timerDisplay').textContent = `${String(studyMinutes).padStart(2, '0')}:${String(studySeconds).padStart(2, '0')}`;\n          requestAnimationFrame(updateProgressBar);\n        } else {\n          progressBar.style.width = '0%';\n          this.startBreakTimer(pause, studyCycles);\n        }\n      };\n      updateProgressBar();\n    },\n    startBreakTimer(pause, studyCycles) {\n      this.statusMessage = `Pausa! Numero cicli rimanenti: ${studyCycles}`;\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.style.width = '0%';\n      const startTime = Date.now();\n      const endTime = startTime + pause * 60000;\n      const updateProgressBar = () => {\n        const now = Date.now();\n        const elapsedTime = now - startTime;\n        const progressPercentage = elapsedTime / (pause * 60000) * 100;\n        progressBar.style.width = `${progressPercentage}%`;\n        if (now < endTime) {\n          const breakDifference = endTime - now;\n          const breakMinutes = Math.floor(breakDifference % (1000 * 60 * 60) / (1000 * 60));\n          const breakSeconds = Math.floor(breakDifference % (1000 * 60) / 1000);\n          document.getElementById('timerDisplay').textContent = `${String(breakMinutes).padStart(2, '0')}:${String(breakSeconds).padStart(2, '0')}`;\n          requestAnimationFrame(updateProgressBar);\n        } else {\n          progressBar.style.width = '0%';\n          studyCycles--;\n          if (studyCycles > 0) {\n            this.startStudyTimer(this.newPom.tempoStudio, studyCycles, pause);\n          } else {\n            this.statusMessage = `Finito! Cicli rimanenti: ${studyCycles}`;\n            document.getElementById('timerDisplay').textContent = \"\";\n          }\n        }\n      };\n      updateProgressBar();\n    }\n  }\n};","map":{"version":3,"names":["axios","data","newPom","username","localStorage","getItem","tempoStudio","tempoPausa","ripetizioni","statusMessage","methods","aggiungiPomodoro","token","sessionStorage","console","log","response","post","headers","Authorization","startStudyTimer","error","studyTime","studyCycles","pause","progressBar","document","querySelector","style","width","startTime","Date","now","endTime","updateProgressBar","elapsedTime","progressPercentage","studyDifference","studyMinutes","Math","floor","studySeconds","getElementById","textContent","String","padStart","requestAnimationFrame","startBreakTimer","breakDifference","breakMinutes","breakSeconds"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/pomodoroTempo.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Aggiungi una Sessione Pomodoro</h1>\n    <form @submit.prevent=\"aggiungiPomodoro\">\n      <div>\n        <label for=\"tempoStudio\">Tempo di studio (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoStudio\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"tempoPausa\">Tempo di pausa (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoPausa\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"ripetizioni\">Numero di ripetizioni:</label>\n        <input type=\"number\" v-model=\"newPom.ripetizioni\" min=\"1\" required>\n      </div>\n\n      <button type=\"submit\">Aggiungi Sessione</button>\n    </form>\n\n    <p id=\"studio-pausa\">{{ statusMessage }}</p>\n    <div id=\"clock\" class=\"blob\">\n      <div class=\"timer\" id=\"timerDisplay\">00:00</div>\n      <div class=\"progress-bar\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      newPom: {\n        username: localStorage.getItem('username') || 'Guest',\n        tempoStudio: '',\n        tempoPausa: '',\n        ripetizioni: ''\n      },\n      statusMessage: ''\n    };\n  },\n  methods: {\n    async aggiungiPomodoro() {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log('Dati inviati:', this.newPom);\n\n        const response = await axios.post('/api/pomsPOST', this.newPom, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          }\n        });\n        console.log('Sessione pomodoro aggiunta:', response.data);\n        this.startStudyTimer(this.newPom.tempoStudio, this.newPom.ripetizioni, this.newPom.tempoPausa);\n        this.newPom = {\n          username: this.newPom.username,\n          tempoStudio: '',\n          tempoPausa: '',\n          ripetizioni: ''\n        };\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    },\n    startStudyTimer(studyTime, studyCycles, pause) {\n      this.statusMessage = `Studio! Numero cicli rimanenti: ${studyCycles}`;\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.style.width = '0%'; \n\n      const startTime = Date.now();\n      const endTime = startTime + studyTime * 60000;\n\n      const updateProgressBar = () => {\n        const now = Date.now();\n        const elapsedTime = now - startTime;\n        const progressPercentage = (elapsedTime / (studyTime * 60000)) * 100;\n        progressBar.style.width = `${progressPercentage}%`;\n\n        if (now < endTime) {\n          const studyDifference = endTime - now;\n          const studyMinutes = Math.floor((studyDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const studySeconds = Math.floor((studyDifference % (1000 * 60)) / 1000);\n          document.getElementById('timerDisplay').textContent = `${String(studyMinutes).padStart(2, '0')}:${String(studySeconds).padStart(2, '0')}`;\n          requestAnimationFrame(updateProgressBar);\n        } else {\n          progressBar.style.width = '0%';\n          this.startBreakTimer(pause, studyCycles);\n        }\n      };\n\n      updateProgressBar();\n    },\n    startBreakTimer(pause, studyCycles) {\n      this.statusMessage = `Pausa! Numero cicli rimanenti: ${studyCycles}`;\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.style.width = '0%'; \n\n      const startTime = Date.now();\n      const endTime = startTime + pause * 60000;\n\n      const updateProgressBar = () => {\n        const now = Date.now();\n        const elapsedTime = now - startTime;\n        const progressPercentage = (elapsedTime / (pause * 60000)) * 100;\n        progressBar.style.width = `${progressPercentage}%`;\n\n        if (now < endTime) {\n          const breakDifference = endTime - now;\n          const breakMinutes = Math.floor((breakDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const breakSeconds = Math.floor((breakDifference % (1000 * 60)) / 1000);\n          document.getElementById('timerDisplay').textContent = `${String(breakMinutes).padStart(2, '0')}:${String(breakSeconds).padStart(2, '0')}`;\n          requestAnimationFrame(updateProgressBar);\n        } else {\n          progressBar.style.width = '0%';\n          studyCycles--;\n          if (studyCycles > 0) {\n            this.startStudyTimer(this.newPom.tempoStudio, studyCycles, pause);\n          } else {\n            this.statusMessage = `Finito! Cicli rimanenti: ${studyCycles}`;\n            document.getElementById('timerDisplay').textContent = \"\";\n          }\n        }\n      };\n\n      updateProgressBar();\n    }\n  }\n};\n</script>\n\n<style scoped>\n#clock {\n  margin-top: 20px;\n}\n\n.progress-bar {\n  width: 0;\n  height: 20px;\n  background-color: green;\n  transition: width 0.5s;\n}\n\n.timer {\n  font-size: 2em;\n}\n\nform {\n  max-width: 400px;\n  margin: auto;\n}\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 10px;\n}\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\nbutton:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}