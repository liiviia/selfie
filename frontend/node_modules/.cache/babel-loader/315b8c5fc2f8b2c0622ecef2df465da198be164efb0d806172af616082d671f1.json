{"ast":null,"code":"/* import NavigationBar from '../components/NavigationBar.vue';\n */\nimport axios from 'axios';\nexport default {\n  name: 'HomePrincipale',\n  /* components: {\n    NavigationBar,\n  }, */\n  data() {\n    return {\n      username: localStorage.getItem('username'),\n      lastEventTitle: '',\n      lastEventDescription: '',\n      lastEventDate: '',\n      lastActivityTitle: '',\n      lastActivityDescription: '',\n      lastActivityDeadline: '',\n      noEventsMessage: '',\n      noActivitiesMessage: '',\n      notifications: [],\n      noNotificationsMessage: '',\n      users: [],\n      // Array che contiene tutti gli utenti\n      selectedUsers: [],\n      // Array che contiene gli ID degli utenti selezionati\n      notificationMessage: '' // Il messaggio personalizzato inserito dall'utente\n    };\n  },\n  mounted() {\n    this.getLastEvent();\n    this.getLastActivity();\n    this.getNotifies();\n    this.getUsers();\n  },\n  methods: {\n    async getLastEvent() {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log(\"token home \", token);\n        const response = await axios.get('/api/events/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: this.username\n          }\n        });\n        if (response.data) {\n          this.lastEventTitle = response.data.title || 'Nessun evento';\n          this.lastEventDescription = response.data.description || 'Nessuna descrizione';\n          this.lastEventDate = response.data.date || 'Nessuna data';\n        } else {\n          this.noEventsMessage = 'Nessun evento trovato.';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultimo evento:', error);\n        this.noEventsMessage = 'Errore nel caricamento dell\\'ultimo evento.';\n      }\n    },\n    async getLastActivity() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        if (response.data) {\n          this.lastActivityTitle = response.data.title;\n          this.lastActivityDescription = response.data.description;\n          this.lastActivityDeadline = new Date(response.data.deadline).toLocaleDateString();\n          this.noActivitiesMessage = '';\n        } else {\n          this.noActivitiesMessage = 'Non ci sono attività imminenti';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero delle attività:', error);\n      }\n    },\n    async getNotifies() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/notifications/getNotif', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: this.username\n          }\n        });\n        //console.log(response.data);\n        if (response.data) {\n          this.notifications = response.data;\n        } else {\n          this.noNotificationsMessage = 'Nessuna notifica trovata.';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero delle notifiche :', error);\n        this.noNotificationsMessage = 'Errore caricamento delle notifiche.';\n      }\n    },\n    async getUsers() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: this.username\n          }\n        });\n        this.users = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero degli utenti:', error);\n      }\n    },\n    // Invia le notifiche agli utenti selezionati\n    async sendNotifications() {\n      if (this.selectedUsers.length === 0) {\n        alert('Seleziona almeno un utente per inviare una notifica.');\n        return;\n      }\n      if (this.notificationMessage.trim() === '') {\n        alert('Scrivi un messaggio per inviare una notifica.');\n        return;\n      }\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/notifications/send', {\n          recipients: this.selectedUsers,\n          message: this.notificationMessage\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert('notifiche inviate!');\n      } catch (error) {\n        console.error('errore durante invio notifiche:', error);\n        alert('Errore durante invio notifiche.');\n      }\n    },\n    async deleteNotification(notificationId) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/notifications/${notificationId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // tolgo la notifica dalla lista\n        this.notifications = this.notifications.filter(notification => notification._id !== notificationId);\n        alert('Notifica eliminata!');\n      } catch (error) {\n        console.error('errore durante eliminazione notifica:', error);\n        alert('errore durante leliminazione della notifica.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","username","localStorage","getItem","lastEventTitle","lastEventDescription","lastEventDate","lastActivityTitle","lastActivityDescription","lastActivityDeadline","noEventsMessage","noActivitiesMessage","notifications","noNotificationsMessage","users","selectedUsers","notificationMessage","mounted","getLastEvent","getLastActivity","getNotifies","getUsers","methods","token","sessionStorage","console","log","response","get","headers","Authorization","params","author","title","description","date","error","Date","deadline","toLocaleDateString","sendNotifications","length","alert","trim","post","recipients","message","deleteNotification","notificationId","delete","filter","notification","_id"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/HomePrincipale.vue"],"sourcesContent":["<template>\n\n  <div class=\"home-principale\">\n    <div class=\"container mt-3\">\n      <div class=\"row\">\n\n        <div class=\"col-md-6\">\n          <!-- <div class=\"d-flex justify-content-center align-items-center\">\n            \n          </div>          \n -->\n          <div class=\"notification-form mt-4\">\n            <div class=\"form-group\">\n              <label for=\"userSelect\">Seleziona utenti per notifica:</label>\n              <select id=\"userSelect\" v-model=\"selectedUsers\" multiple class=\"form-control\">\n                <option v-for=\"user in users\" :key=\"user._id\" :value=\"user._id\">\n                  {{ user.username }}\n                </option>\n              </select>\n            </div>\n          \n            <div class=\"form-group\">\n              <label for=\"message\">Scrivi il messaggio:</label>\n              <textarea id=\"message\" v-model=\"notificationMessage\" placeholder=\"Scrivi il tuo messaggio qui...\" class=\"form-control\"></textarea>\n            </div>\n          \n            <button @click=\"sendNotifications\" class=\"btn btn-primary\">Invia Notifica</button>\n          </div>\n        </div>\n\n\n        <div class=\"col-md-6\">\n          <div id=\"carouselExampleIndicators\" class=\"carousel slide mt-4\" data-bs-ride=\"carousel\">\n            <div class=\"carousel-indicators\">\n              <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"0\" class=\"active\"\n                aria-current=\"true\" aria-label=\"Slide 1\"></button>\n              <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"1\"\n                aria-label=\"Slide 2\"></button>\n            </div>\n            <div class=\"carousel-inner\">\n              <div class=\"carousel-item active\">\n                <div class=\"d-block w-100 text-center p-4\">\n                  <h2>Ultimo Evento</h2>\n                  <p v-if=\"noEventsMessage\">{{ noEventsMessage }}</p>\n                  <p v-else>\n                    <strong>Titolo:</strong> {{ lastEventTitle }}<br>\n                    <strong>Descrizione:</strong> {{ lastEventDescription }}<br>\n                    <strong>Data:</strong> {{ lastEventDate }}\n                  </p>\n                </div>\n              </div>\n\n              <div class=\"carousel-item\">\n                <div class=\"d-block w-100 text-center p-4\">\n                  <h2>Ultima Attività</h2>\n                  <p v-if=\"noActivitiesMessage\">{{ noActivitiesMessage }}</p>\n                  <p v-else>\n                    <strong>Titolo:</strong> {{ lastActivityTitle }}<br>\n                    <strong>Descrizione:</strong> {{ lastActivityDescription }}<br>\n                    <strong>Scadenza:</strong> {{ lastActivityDeadline }}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\"\n              data-bs-slide=\"prev\">\n              <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Previous</span>\n            </button>\n\n            <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\"\n              data-bs-slide=\"next\">\n              <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Next</span>\n            </button>\n\n\n\n          </div>\n\n\n          <div id=\"carouselNotifications\" class=\"carousel slide mt-4\" data-bs-ride=\"carousel\">\n            <div class=\"carousel-indicators\">\n              <button v-for=\"(notification, index) in notifications\" :key=\"index\" type=\"button\" \n                      :data-bs-target=\"'#carouselNotifications'\" :data-bs-slide-to=\"index\" \n                      :class=\"{ active: index === 0 }\" :aria-current=\"index === 0 ? 'true' : 'false'\"\n                      :aria-label=\"'Slide ' + (index + 1)\">\n              </button>\n            </div>\n          \n            <div class=\"carousel-inner\">\n              <div v-if=\"notifications.length === 0\" class=\"carousel-item active\">\n                <div class=\"d-block w-100 text-center p-4\">\n                  <h2>Nessuna Notifica</h2>\n                  <p>{{ noNotificationsMessage }}</p>\n                </div>\n              </div>\n          \n              <div v-else v-for=\"(notification, index) in notifications\" :key=\"index\" \n                   :class=\"['carousel-item', { active: index === 0 }]\">\n                <div class=\"d-block w-100 text-center p-4\">\n                  <h2>Notifica {{ index + 1 }}</h2>\n                  <p>\n                    <strong>Messaggio:</strong> {{ notification.message }}<br>\n                    <strong>Data:</strong> {{ new Date(notification.createdAt).toLocaleDateString() }}\n                  </p>\n                  <button @click=\"deleteNotification(notification._id)\" class=\"btn btn-danger\">Elimina</button>\n                </div>\n              </div>\n            </div>\n          \n            <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselNotifications\"\n              data-bs-slide=\"prev\">\n              <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Previous</span>\n            </button>\n          \n            <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselNotifications\"\n              data-bs-slide=\"next\">\n              <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n              <span class=\"visually-hidden\">Next</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n/* import NavigationBar from '../components/NavigationBar.vue';\n */\nimport axios from 'axios';\n\nexport default {\n  name: 'HomePrincipale',\n  /* components: {\n    NavigationBar,\n  }, */\n  data() {\n    return {\n      username: localStorage.getItem('username'),\n      lastEventTitle: '',\n      lastEventDescription: '',\n      lastEventDate: '',\n      lastActivityTitle: '',\n      lastActivityDescription: '',\n      lastActivityDeadline: '',\n      noEventsMessage: '',\n      noActivitiesMessage: '',\n\n      notifications: [],\n      noNotificationsMessage:'',\n\n      users: [], // Array che contiene tutti gli utenti\n      selectedUsers: [], // Array che contiene gli ID degli utenti selezionati\n      notificationMessage: '' // Il messaggio personalizzato inserito dall'utente\n    };\n  },\n  mounted() {\n    this.getLastEvent();\n    this.getLastActivity();\n    this.getNotifies();\n    this.getUsers();\n  },\n  methods: {\n    async getLastEvent() {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log(\"token home \", token);\n        const response = await axios.get('/api/events/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: this.username }\n        });\n        if (response.data) {\n          this.lastEventTitle = response.data.title || 'Nessun evento';\n          this.lastEventDescription = response.data.description || 'Nessuna descrizione';\n          this.lastEventDate = response.data.date || 'Nessuna data';\n        } else {\n          this.noEventsMessage = 'Nessun evento trovato.';\n        }\n      } catch (error) {\n        console.error('Errore nel recupero dell\\'ultimo evento:', error);\n        this.noEventsMessage = 'Errore nel caricamento dell\\'ultimo evento.';\n      }\n    },\n\n\n    async getLastActivity() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/last', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { username: username }\n        });\n\n        if (response.data) {\n          this.lastActivityTitle = response.data.title;\n          this.lastActivityDescription = response.data.description;\n          this.lastActivityDeadline = new Date(response.data.deadline).toLocaleDateString();\n          this.noActivitiesMessage = '';\n        } else {\n          this.noActivitiesMessage = 'Non ci sono attività imminenti';\n        }\n\n      } catch (error) {\n        console.error('Errore nel recupero delle attività:', error);\n      }\n    },\n\n    async getNotifies(){\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/notifications/getNotif', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: this.username }\n        });\n        //console.log(response.data);\n        if (response.data) {\n          this.notifications=response.data;\n        } else {\n          this.noNotificationsMessage = 'Nessuna notifica trovata.';        \n        }\n      } catch (error) {\n        console.error('Errore nel recupero delle notifiche :', error);\n        this.noNotificationsMessage = 'Errore caricamento delle notifiche.';\n      }\n    },\n\n    async getUsers(){\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get('/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: this.username }\n        });\n        this.users = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero degli utenti:', error);\n      }\n    },\n\n    // Invia le notifiche agli utenti selezionati\n    async sendNotifications() {\n      if (this.selectedUsers.length === 0) {\n        alert('Seleziona almeno un utente per inviare una notifica.');\n        return;\n      }\n\n      if (this.notificationMessage.trim() === '') {\n        alert('Scrivi un messaggio per inviare una notifica.');\n        return;\n      }\n\n      try {\n        const token = sessionStorage.getItem('token');\n\n        await axios.post('/api/notifications/send', {\n          recipients: this.selectedUsers,\n          message: this.notificationMessage\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        alert('notifiche inviate!');\n      } catch (error) {\n        console.error('errore durante invio notifiche:', error);\n        alert('Errore durante invio notifiche.');\n      }\n    },\n    \n    async deleteNotification(notificationId) {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        await axios.delete(`/api/notifications/${notificationId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // tolgo la notifica dalla lista\n        this.notifications = this.notifications.filter(notification => notification._id !== notificationId);\n        alert('Notifica eliminata!');\n      } catch (error) {\n        console.error('errore durante eliminazione notifica:', error);\n        alert('errore durante leliminazione della notifica.');\n      }\n    }\n\n  }\n\n};\n</script>\n\n<style scoped>\nbody {\n  background: linear-gradient(to bottom, #0000ff, #ffffff);\n  margin: 0;\n}\n\n.home-principale {\n  text-align: center;\n  background-image:  url('https://images.hdqwalls.com/wallpapers/abstract-shapes-4k-q2.jpg');\n  background-size: cover;\n  background-position: center;\n  min-height: 100vh; /* Imposta l'altezza minima per riempire la viewport */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  color: rgb(0, 0, 0); /* colore testo */\n}\n\n.carousel-item {\n  background-color: #f0f0f0;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  background-color: #000;\n  border-radius: 50%;\n}\n\n.notification-form {\n  max-width: 300px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 10px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-group label {\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.form-group select,\n.form-group textarea {\n  width: 100%;\n  padding: 8px;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\ntextarea {\n  height: 100px;\n  resize: vertical;\n}\n\nbutton.btn {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  background-color: #007bff;\n  color: white;\n  font-size: 1.1rem;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\nbutton.btn:hover {\n  background-color: #0056b3;\n}\n\nbutton.btn-danger{\n  background-color: rgb(194, 27, 27);\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}