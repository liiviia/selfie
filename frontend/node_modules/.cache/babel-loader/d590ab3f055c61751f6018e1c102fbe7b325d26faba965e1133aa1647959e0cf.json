{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationComponent.vue"],"sourcesContent":["<template>\n  <div>\n   \n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      alerts: [],  \n    };\n  },\n  created() {\n    this.startPolling();  \n  },\n  methods: {\n    startPolling() {\n      setInterval(() => {\n        fetch('/api/get-latest-alert')\n          .then(response => {\n            if (!response.ok) {\n              throw new Error('Errore nella risposta');\n            }\n            return response.json();  \n          })\n          .then(data => {\n            \n            if (data.alerts && data.alerts.length > 0) {\n              const username = localStorage.getItem('username');  \n              \n              const filteredAlerts = data.alerts.filter(alert => alert.userNome.toLowerCase() === username.toLowerCase());\n              console.log('Alert filtrati:', filteredAlerts); \n\n              if (filteredAlerts.length > 0) {\n                this.alerts = filteredAlerts; \n                filteredAlerts.forEach(alert => {\n                  alert(`Nuovo alert: ${alert.title}`);\n                }); \n              }\n            } else {\n              console.log('Nessun alert trovato.');\n            }\n          })\n          .catch(err => {\n            console.error('Errore nel polling:', err);\n          });\n      }, 5000); \n    }\n  }\n};\n\n</script>\n\n<style scoped>\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  margin-bottom: 10px;\n}\nstrong {\n  color: #333;\n}\n</style>\n"],"mappings":";;uBACEA,mBAAA,CAEM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}