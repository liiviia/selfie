{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"studio-pausa\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"h1\", null, \"Aggiungi una Sessione Pomodoro\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.aggiungiPomodoro && $options.aggiungiPomodoro(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"tempoStudio\"\n  }, \"Tempo di studio (minuti):\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPom.tempoStudio = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPom.tempoStudio]])]), _createElementVNode(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"tempoPausa\"\n  }, \"Tempo di pausa (minuti):\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.newPom.tempoPausa = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPom.tempoPausa]])]), _createElementVNode(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"ripetizioni\"\n  }, \"Numero di ripetizioni:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.newPom.ripetizioni = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPom.ripetizioni]])]), _cache[7] || (_cache[7] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Aggiungi Sessione\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createElementVNode(\"p\", _hoisted_1, _toDisplayString($data.statusMessage), 1 /* TEXT */), _cache[9] || (_cache[9] = _createElementVNode(\"div\", {\n    id: \"clock\",\n    class: \"blob\"\n  }, [_createElementVNode(\"div\", {\n    class: \"timer\",\n    id: \"timerDisplay\"\n  }, \"00:00\"), _createElementVNode(\"div\", {\n    class: \"progress-bar\"\n  })], -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["id","_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","aggiungiPomodoro","for","type","$event","$data","newPom","tempoStudio","min","required","tempoPausa","ripetizioni","_hoisted_1","_toDisplayString","statusMessage","class"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/pomodoroTempo.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Aggiungi una Sessione Pomodoro</h1>\n    <form @submit.prevent=\"aggiungiPomodoro\">\n      <div>\n        <label for=\"tempoStudio\">Tempo di studio (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoStudio\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"tempoPausa\">Tempo di pausa (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoPausa\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"ripetizioni\">Numero di ripetizioni:</label>\n        <input type=\"number\" v-model=\"newPom.ripetizioni\" min=\"1\" required>\n      </div>\n\n      <button type=\"submit\">Aggiungi Sessione</button>\n    </form>\n\n    <p id=\"studio-pausa\">{{ statusMessage }}</p>\n    <div id=\"clock\" class=\"blob\">\n      <div class=\"timer\" id=\"timerDisplay\">00:00</div>\n      <div class=\"progress-bar\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      newPom: {\n        username: localStorage.getItem('username') || 'Guest',\n        tempoStudio: '',\n        tempoPausa: '',\n        ripetizioni: ''\n      },\n      statusMessage: ''\n    };\n  },\n  methods: {\n    async aggiungiPomodoro() {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log('Dati inviati:', this.newPom);\n\n        const response = await axios.post('/api/pomsPOST', this.newPom, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          }\n        });\n        console.log('Sessione pomodoro aggiunta:', response.data);\n        this.startStudyTimer(this.newPom.tempoStudio, this.newPom.ripetizioni, this.newPom.tempoPausa);\n        this.newPom = {\n          username: this.newPom.username,\n          tempoStudio: '',\n          tempoPausa: '',\n          ripetizioni: ''\n        };\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    },\n    startStudyTimer(studyTime, studyCycles, pause) {\n      this.statusMessage = `Studio! Numero cicli rimanenti: ${studyCycles}`;\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.style.width = '0%'; \n\n      const startTime = Date.now();\n      const endTime = startTime + studyTime * 60000;\n\n      const updateProgressBar = () => {\n        const now = Date.now();\n        const elapsedTime = now - startTime;\n        const progressPercentage = (elapsedTime / (studyTime * 60000)) * 100;\n        progressBar.style.width = `${progressPercentage}%`;\n\n        if (now < endTime) {\n          const studyDifference = endTime - now;\n          const studyMinutes = Math.floor((studyDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const studySeconds = Math.floor((studyDifference % (1000 * 60)) / 1000);\n          document.getElementById('timerDisplay').textContent = `${String(studyMinutes).padStart(2, '0')}:${String(studySeconds).padStart(2, '0')}`;\n          requestAnimationFrame(updateProgressBar);\n        } else {\n          progressBar.style.width = '0%';\n          this.startBreakTimer(pause, studyCycles);\n        }\n      };\n\n      updateProgressBar();\n    },\n    startBreakTimer(pause, studyCycles) {\n      this.statusMessage = `Pausa! Numero cicli rimanenti: ${studyCycles}`;\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.style.width = '0%'; \n\n      const startTime = Date.now();\n      const endTime = startTime + pause * 60000;\n\n      const updateProgressBar = () => {\n        const now = Date.now();\n        const elapsedTime = now - startTime;\n        const progressPercentage = (elapsedTime / (pause * 60000)) * 100;\n        progressBar.style.width = `${progressPercentage}%`;\n\n        if (now < endTime) {\n          const breakDifference = endTime - now;\n          const breakMinutes = Math.floor((breakDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const breakSeconds = Math.floor((breakDifference % (1000 * 60)) / 1000);\n          document.getElementById('timerDisplay').textContent = `${String(breakMinutes).padStart(2, '0')}:${String(breakSeconds).padStart(2, '0')}`;\n          requestAnimationFrame(updateProgressBar);\n        } else {\n          progressBar.style.width = '0%';\n          studyCycles--;\n          if (studyCycles > 0) {\n            this.startStudyTimer(this.newPom.tempoStudio, studyCycles, pause);\n          } else {\n            this.statusMessage = `Finito! Cicli rimanenti: ${studyCycles}`;\n            document.getElementById('timerDisplay').textContent = \"\";\n          }\n        }\n      };\n\n      updateProgressBar();\n    }\n  }\n};\n</script>\n\n<style scoped>\n#clock {\n  margin-top: 20px;\n}\n\n.progress-bar {\n  width: 0;\n  height: 20px;\n  background-color: green;\n  transition: width 0.5s;\n}\n\n.timer {\n  font-size: 2em;\n}\n\nform {\n  max-width: 400px;\n  margin: auto;\n}\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 10px;\n}\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\nbutton:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":";;EAsBOA,EAAE,EAAC;AAAc;;uBArBtBC,mBAAA,CA0BM,c,0BAzBJC,mBAAA,CAAuC,YAAnC,gCAA8B,sBAClCA,mBAAA,CAiBO;IAjBAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;MACrCJ,mBAAA,CAGM,c,0BAFJA,mBAAA,CAA0D;IAAnDO,GAAG,EAAC;EAAa,GAAC,2BAAyB,sB,gBAClDP,mBAAA,CAAmE;IAA5DQ,IAAI,EAAC,QAAQ;IAN5B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAMsCC,KAAA,CAAAC,MAAM,CAACC,WAAW,GAAAH,MAAA;IAAEI,GAAG,EAAC,GAAG;IAACC,QAAQ,EAAR;iDAA5BJ,KAAA,CAAAC,MAAM,CAACC,WAAW,E,KAGlDZ,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAwD;IAAjDO,GAAG,EAAC;EAAY,GAAC,0BAAwB,sB,gBAChDP,mBAAA,CAAkE;IAA3DQ,IAAI,EAAC,QAAQ;IAX5B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAWsCC,KAAA,CAAAC,MAAM,CAACI,UAAU,GAAAN,MAAA;IAAEI,GAAG,EAAC,GAAG;IAACC,QAAQ,EAAR;iDAA3BJ,KAAA,CAAAC,MAAM,CAACI,UAAU,E,KAGjDf,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAuD;IAAhDO,GAAG,EAAC;EAAa,GAAC,wBAAsB,sB,gBAC/CP,mBAAA,CAAmE;IAA5DQ,IAAI,EAAC,QAAQ;IAhB5B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAgBsCC,KAAA,CAAAC,MAAM,CAACK,WAAW,GAAAP,MAAA;IAAEI,GAAG,EAAC,GAAG;IAACC,QAAQ,EAAR;iDAA5BJ,KAAA,CAAAC,MAAM,CAACK,WAAW,E,+BAGlDhB,mBAAA,CAAgD;IAAxCQ,IAAI,EAAC;EAAQ,GAAC,mBAAiB,qB,4BAGzCR,mBAAA,CAA4C,KAA5CiB,UAA4C,EAAAC,gBAAA,CAApBR,KAAA,CAAAS,aAAa,kB,0BACrCnB,mBAAA,CAGM;IAHDF,EAAE,EAAC,OAAO;IAACsB,KAAK,EAAC;MACpBpB,mBAAA,CAAgD;IAA3CoB,KAAK,EAAC,OAAO;IAACtB,EAAE,EAAC;KAAe,OAAK,GAC1CE,mBAAA,CAAgC;IAA3BoB,KAAK,EAAC;EAAc,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}