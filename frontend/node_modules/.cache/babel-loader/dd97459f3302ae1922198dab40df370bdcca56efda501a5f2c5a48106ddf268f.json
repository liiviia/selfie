{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  setup() {\n    const route = useRoute();\n    const cercaPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const currentDate = new Date().toISOString().split('T')[0];\n        const response = await axios.get('/api/pomsGiornoCorrente', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username,\n            giorno: currentDate\n          }\n        });\n        if (response.data) {\n          pomodoro.value = response.data; // PoichÃ© ora ricevi un oggetto singolo\n          let alertMessage = \"Ci sono sessioni Pomodoro programmate per oggi:\\n\";\n          console.log(response.data);\n\n          // Aggiungi i dettagli della sessione Pomodoro nell'alert\n          alertMessage += `cicli: ${pomodoro.value.ripetizioni},\\n  tempo studio: ${pomodoro.value.tempoStudio} minuti,  \\n tempo pausa: ${pomodoro.value.tempoPausa} minuti   \\n`;\n          alert(alertMessage);\n          const startSession = confirm(\"Vuoi iniziare la sessione Pomodoro?\");\n          if (startSession) {\n            sessionIDP.value = pomodoro.value.sessionID;\n            console.log(\"Inizia la sessione Pomodoro\");\n            console.log(sessionIDP);\n            studyCycles.value = pomodoro.value.ripetizioni; // Imposta il numero di cicli\n            startStudyTimer(pomodoro.value.tempoStudio, studyCycles.value, pomodoro.value.tempoPausa);\n            //  pomEsistente = true;\n\n            await savePomDataIntermediGiaAggiunti(pomodoro);\n          }\n        }\n      } catch (error) {\n        console.error(\"Errore:\", error);\n      }\n    };\n    const newPom = ref({\n      username: localStorage.getItem('username') || 'Guest',\n      tempoStudio: 30,\n      tempoPausa: 5,\n      ripetizioni: 5,\n      sessionID: uuidv4(),\n      giorno: ''\n    });\n    const statusMessage = ref('');\n    let studyCycles = ref(0);\n    let timerInterval = null;\n    let isStudyPhase = ref(true);\n    let remainingTime = ref(0);\n    let isPaused = ref(false);\n    let isPomodoroSaved = false;\n    const sessionIDP = ref(null);\n    //let pomEsistente = false;\n    const pomodoro = ref(null);\n    onMounted(() => {\n      if (route.query.date) {\n        newPom.value.giorno = route.query.date;\n      }\n      window.addEventListener('beforeunload', () => {\n        if (!isPomodoroSaved) {\n          savePomDataIntermedi();\n        }\n      });\n      cercaPomodoro();\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('beforeunload', savePomDataIntermedi); //quando l'utente chiude la pag o chiude il browser\n    });\n    const savePomDataIntermediGiaAggiunti = async pomodoro => {\n      try {\n        console.log('Dati pomodoro prima del salvataggio:', pomodoro);\n        const token = sessionStorage.getItem('token');\n\n        // Definisci le variabili per il tempo rimanente\n        let savedTempoStudio;\n        let savedTempoPausa;\n\n        // Se siamo in fase di studio\n        if (isStudyPhase.value) {\n          savedTempoStudio = Math.floor(remainingTime.value / 60); // Tempo di studio completato\n          savedTempoPausa = pomodoro.tempoPausa; // Usa il tempo di pausa predefinito\n        } else {\n          // Se siamo in pausa\n          savedTempoStudio = pomodoro.tempoStudio; // Usa il tempo di studio predefinito\n          savedTempoPausa = Math.floor(remainingTime.value / 60); // Tempo di pausa completato\n        }\n        console.log(savedTempoPausa);\n        console.log(savedTempoStudio);\n\n        // Crea il payload per il salvataggio\n        const pomData = {\n          username: pomodoro.username,\n          tempoStudio: savedTempoStudio,\n          tempoPausa: savedTempoPausa,\n          ripetizioni: studyCycles.value,\n          sessionID: pomodoro.sessionID,\n          giorno: pomodoro.giorno\n        };\n\n        // Invia i dati al backend\n        await axios.post('/api/savePomDataIntermedi', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Salvataggio pomData:', pomData);\n      } catch (error) {\n        console.error('Errore nel salvataggio dei dati:', error);\n      }\n    };\n    const savePomDataIntermedi = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        // Definisci le variabili per il tempo rimanente\n        let savedTempoStudio;\n        let savedTempoPausa;\n\n        // Se siamo in fase di studio\n        if (isStudyPhase.value) {\n          savedTempoStudio = Math.floor(remainingTime.value / 60); // Calcola il tempo di studio completato\n          savedTempoPausa = newPom.value.tempoPausa; // Usa il tempo di pausa predefinito\n        } else {\n          // Se siamo in pausa\n          savedTempoStudio = newPom.value.tempoStudio; // Usa il tempo di studio predefinito\n          savedTempoPausa = Math.floor(remainingTime.value / 60); // Calcola il tempo di pausa completato\n        }\n\n        // Crea il payload da inviare\n        const pomData = {\n          username: newPom.value.username,\n          tempoStudio: savedTempoStudio,\n          tempoPausa: savedTempoPausa,\n          ripetizioni: studyCycles.value,\n          sessionID: newPom.value.sessionID,\n          giorno: newPom.value.giorno\n        };\n        console.log('Salvataggio pomData:', pomData); // Aggiungi questo log per il debug\n\n        await axios.post('/api/savePomDataIntermedi', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } catch (error) {\n        console.error('Errore nel salvataggio dei dati:', error);\n      }\n    };\n    const aggiungiPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const currentDate = new Date();\n        const selectedDate = new Date(newPom.value.giorno);\n        const response = await axios.post('/api/pomsPOST', newPom.value, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Sessione pomodoro aggiunta:', response.data);\n        if (selectedDate.getTime() > currentDate.getTime()) {\n          statusMessage.value = 'Sessione pomodoro aggiunta per una data futura.';\n        } else {\n          studyCycles.value = newPom.value.ripetizioni;\n          startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n        }\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    };\n    const startStudyTimer = async (studyTime, cycles, pause) => {\n      if (cycles <= 0) {\n        try {\n          const token = sessionStorage.getItem('token');\n          await axios.patch('/api/pomsUpdate', {\n            sessionID: newPom.value.sessionID,\n            terminato: true\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          console.log('Ciclo marcato come terminato nel backend.');\n        } catch (error) {\n          console.error('Errore nell\\'aggiornamento del ciclo:', error);\n        }\n        alert('Ciclo completato!');\n        return;\n      }\n      statusMessage.value = `Studio! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = studyTime * 60;\n      console.log(remainingTime.value);\n      isStudyPhase.value = true;\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, studyTime, pause, cycles, startBreakTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    const startBreakTimer = (pauseTime, cycles) => {\n      if (cycles <= 0) {\n        alert('Ciclo completato!');\n        return;\n      }\n      statusMessage.value = `Pausa! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = pauseTime * 60;\n      isStudyPhase.value = false;\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, pauseTime, pauseTime, cycles, startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    const updateTimer = (remaining, phaseTime, pauseTime, cycles, nextPhase) => {\n      if (remaining > 0) {\n        const minutes = Math.floor(remaining / 60);\n        const seconds = remaining % 60;\n        document.getElementById('timerDisplay').textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      } else {\n        clearInterval(timerInterval);\n        studyCycles.value--;\n        nextPhase(phaseTime, studyCycles.value);\n      }\n    };\n    const skipPhase = async () => {\n      clearInterval(timerInterval);\n      if (isStudyPhase.value) {\n        studyCycles.value--;\n        startBreakTimer(newPom.value.tempoPausa, studyCycles.value);\n      } else {\n        startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n      }\n      if (studyCycles.value <= 0) {\n        try {\n          const token = sessionStorage.getItem('token');\n          await axios.patch('/api/pomsUpdateFinito', {\n            sessionID: newPom.value.sessionID,\n            terminato: true\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          console.log('Ciclo marcato come terminato nel backend.');\n        } catch (error) {\n          console.error('Errore nell\\'aggiornamento del ciclo:', error);\n        }\n        statusMessage.value = \"Ciclo completato!\";\n        document.getElementById('timerDisplay').textContent = \"00:00\";\n      }\n    };\n    const restartCycle = () => {\n      clearInterval(timerInterval);\n      studyCycles.value = newPom.value.ripetizioni;\n      startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n    };\n    const endCycle = async () => {\n      clearInterval(timerInterval);\n      studyCycles.value = 0;\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.patch('/api/pomsUpdate', {\n          sessionID: newPom.value.sessionID,\n          terminato: true\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Ciclo marcato come terminato nel backend.');\n      } catch (error) {\n        console.error('Errore nell\\'aggiornamento del ciclo:', error);\n      }\n      statusMessage.value = 'Ciclo terminato manualmente.';\n      document.getElementById('timerDisplay').textContent = \"00:00\";\n    };\n    const pauseTimer = () => {\n      clearInterval(timerInterval);\n      if (pomodoro.value) {\n        console.log(\"pomodoro prima di chiamare f\", pomodoro.value);\n        savePomDataIntermediGiaAggiunti(pomodoro.value);\n      } else {\n        console.log(\"pomodoro.value undefined\");\n        savePomDataIntermedi();\n      }\n      isPomodoroSaved = true;\n      isPaused.value = true;\n    };\n    const resumeTimer = () => {\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, newPom.value.tempoStudio, newPom.value.tempoPausa, studyCycles.value, isStudyPhase.value ? startBreakTimer : startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    return {\n      newPom,\n      statusMessage,\n      aggiungiPomodoro,\n      skipPhase,\n      restartCycle,\n      endCycle,\n      pauseTimer,\n      resumeTimer,\n      isPaused\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","useRoute","axios","v4","uuidv4","setup","route","cercaPomodoro","token","sessionStorage","getItem","username","localStorage","currentDate","Date","toISOString","split","response","get","headers","Authorization","params","giorno","data","pomodoro","value","alertMessage","console","log","ripetizioni","tempoStudio","tempoPausa","alert","startSession","confirm","sessionIDP","sessionID","studyCycles","startStudyTimer","savePomDataIntermediGiaAggiunti","error","newPom","statusMessage","timerInterval","isStudyPhase","remainingTime","isPaused","isPomodoroSaved","query","date","window","addEventListener","savePomDataIntermedi","removeEventListener","savedTempoStudio","savedTempoPausa","Math","floor","pomData","post","aggiungiPomodoro","selectedDate","getTime","studyTime","cycles","pause","patch","terminato","clearInterval","setInterval","updateTimer","startBreakTimer","pauseTime","remaining","phaseTime","nextPhase","minutes","seconds","document","getElementById","textContent","String","padStart","skipPhase","restartCycle","endCycle","pauseTimer","resumeTimer"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/pomodoroTempo.vue"],"sourcesContent":["<template>\n  <div class=\"event-form\">\n    <h1>Sessione Pomodoro</h1>\n    <form @submit.prevent=\"aggiungiPomodoro\">\n      <div>\n        <label for=\"tempoStudio\">Tempo di studio (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoStudio\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"tempoPausa\">Tempo di pausa (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoPausa\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"ripetizioni\">Numero di ripetizioni:</label>\n        <input type=\"number\" v-model=\"newPom.ripetizioni\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"giorno\">Giorno della sessione:</label>\n        <input type=\"date\" v-model=\"newPom.giorno\" required>\n      </div>\n\n      <button type=\"submit\" class=\"rounded-btn\">Aggiungi Sessione</button>\n    </form>\n\n    <p id=\"studio-pausa\">{{ statusMessage }}</p>\n\n    <div id=\"clock\" class=\"blob\">\n      <div class=\"timer\" id=\"timerDisplay\">00:00</div>\n      <div class=\"progress-bar\"></div>\n    </div>\n\n    <div class=\"controls\">\n  <div class=\"button-row\">\n    <button @click=\"skipPhase\">Salta alla fase successiva</button>\n    <button @click=\"restartCycle\">Ricomincia ciclo</button>\n  </div>\n  <div class=\"button-row\">\n    <button @click=\"endCycle\">Termina ciclo</button>\n    <button @click=\"pauseTimer\">Stoppa timer</button>\n    <button v-if=\"isPaused\" @click=\"resumeTimer\">Riprendi timer</button> \n  </div>\n</div>\n\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted , onBeforeUnmount} from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid'; \n\n\nexport default {\n  setup() {\n    const route = useRoute();\n\n\n    const cercaPomodoro = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    const response = await axios.get('/api/pomsGiornoCorrente', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        username,\n        giorno: currentDate\n      }\n    });\n\n    if (response.data) {\n       pomodoro.value = response.data; // PoichÃ© ora ricevi un oggetto singolo\n      let alertMessage = \"Ci sono sessioni Pomodoro programmate per oggi:\\n\";\n\n      console.log(response.data);\n\n      // Aggiungi i dettagli della sessione Pomodoro nell'alert\n      alertMessage += `cicli: ${pomodoro.value.ripetizioni},\\n  tempo studio: ${pomodoro.value.tempoStudio} minuti,  \\n tempo pausa: ${pomodoro.value.tempoPausa} minuti   \\n`;\n\n      alert(alertMessage);\n\n      const startSession = confirm(\"Vuoi iniziare la sessione Pomodoro?\");\n\n               if (startSession) {\n                sessionIDP.value = pomodoro.value.sessionID;\n                   console.log(\"Inizia la sessione Pomodoro\");\n                   console.log(sessionIDP);\n                   studyCycles.value = pomodoro.value.ripetizioni; // Imposta il numero di cicli\n        startStudyTimer(pomodoro.value.tempoStudio, studyCycles.value, pomodoro.value.tempoPausa);\n      //  pomEsistente = true;\n\n        await savePomDataIntermediGiaAggiunti(pomodoro);\n}\n    }\n  } catch (error) {\n    console.error(\"Errore:\", error);\n  }\n};\n\n\n\n\n\n    const newPom = ref({\n      username: localStorage.getItem('username') || 'Guest',\n      tempoStudio: 30,  \n      tempoPausa: 5,    \n      ripetizioni: 5,  \n      sessionID: uuidv4(),\n      giorno: ''\n    });\n    const statusMessage = ref('');\n    let studyCycles = ref(0); \n    let timerInterval = null;\n    let isStudyPhase = ref(true); \n    let remainingTime = ref(0); \n    let isPaused = ref(false); \n    let isPomodoroSaved = false;\n    const sessionIDP = ref(null);\n    //let pomEsistente = false;\n    const pomodoro = ref(null);\n\n    onMounted(() => {\n      if (route.query.date) {\n        newPom.value.giorno = route.query.date;\n      }\n\n      window.addEventListener('beforeunload', () => {\n    if (!isPomodoroSaved) {\n      savePomDataIntermedi();\n    }\n  });\n  \n  \n  cercaPomodoro();\n \n\n\n});\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('beforeunload', savePomDataIntermedi); //quando l'utente chiude la pag o chiude il browser\n    });\n\n    \n  \n    const savePomDataIntermediGiaAggiunti = async (pomodoro) => {\n  try {\n    console.log('Dati pomodoro prima del salvataggio:', pomodoro);\n\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio = Math.floor(remainingTime.value / 60); // Tempo di studio completato\n      savedTempoPausa = pomodoro.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = pomodoro.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Tempo di pausa completato\n    }\n\n    console.log(savedTempoPausa);\n    console.log(savedTempoStudio);\n\n    // Crea il payload per il salvataggio\n    const pomData = {\n      username: pomodoro.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value,\n      sessionID: pomodoro.sessionID,\n      giorno: pomodoro.giorno\n    };\n\n    // Invia i dati al backend\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      \n    });\n    console.log('Salvataggio pomData:', pomData); \n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n\n\n    const savePomDataIntermedi = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio =Math.floor(remainingTime.value / 60); // Calcola il tempo di studio completato\n      savedTempoPausa = newPom.value.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = newPom.value.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Calcola il tempo di pausa completato\n    }\n\n    // Crea il payload da inviare\n    const pomData = {\n      username: newPom.value.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value, \n      sessionID: newPom.value.sessionID,\n      giorno: newPom.value.giorno\n    };\n\n    console.log('Salvataggio pomData:', pomData); // Aggiungi questo log per il debug\n\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n     \n\n\n\n\n\n\n    const aggiungiPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        const currentDate = new Date();\n        const selectedDate = new Date(newPom.value.giorno);\n\n        const response = await axios.post('/api/pomsPOST', newPom.value, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        console.log('Sessione pomodoro aggiunta:', response.data);\n\n        if (selectedDate.getTime() > currentDate.getTime()) {\n          statusMessage.value = 'Sessione pomodoro aggiunta per una data futura.';\n        } else {\n          studyCycles.value = newPom.value.ripetizioni;\n          startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n        }\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    };\n\n    const startStudyTimer = async (studyTime, cycles, pause) => {\n\n      if (cycles <= 0) {\n        try {\n    const token = sessionStorage.getItem('token');\n    await axios.patch('/api/pomsUpdate', {\n      sessionID: newPom.value.sessionID,\n      terminato: true\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Ciclo marcato come terminato nel backend.');\n  } catch (error) {\n    console.error('Errore nell\\'aggiornamento del ciclo:', error);\n  }\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Studio! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = studyTime * 60;\n      console.log(remainingTime.value);\n\n      isStudyPhase.value = true;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, studyTime, pause, cycles, startBreakTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const startBreakTimer = (pauseTime, cycles) => {\n      if (cycles <= 0) {\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Pausa! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = pauseTime * 60;\n      isStudyPhase.value = false;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, pauseTime, pauseTime, cycles, startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const updateTimer = (remaining, phaseTime, pauseTime, cycles, nextPhase) => {\n      if (remaining > 0) {\n        const minutes = Math.floor(remaining / 60);\n        const seconds = remaining % 60;\n        document.getElementById('timerDisplay').textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      } else {\n        clearInterval(timerInterval);\n        studyCycles.value--;\n        nextPhase(phaseTime, studyCycles.value);\n      }\n    };\n\n    const skipPhase = async () => {\n      clearInterval(timerInterval);\n\n      if (isStudyPhase.value) {\n        studyCycles.value--;\n        startBreakTimer(newPom.value.tempoPausa, studyCycles.value);\n      } else {\n        startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n      }\n\n      if (studyCycles.value <= 0) {\n        \n        try {\n    const token = sessionStorage.getItem('token');\n    await axios.patch('/api/pomsUpdateFinito', {\n      sessionID: newPom.value.sessionID,\n      terminato: true\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Ciclo marcato come terminato nel backend.');\n  } catch (error) {\n    console.error('Errore nell\\'aggiornamento del ciclo:', error);\n  }\n        \n        statusMessage.value = \"Ciclo completato!\";\n        document.getElementById('timerDisplay').textContent = \"00:00\";\n      }\n    };\n\n    const restartCycle = () => {\n      clearInterval(timerInterval);\n      studyCycles.value = newPom.value.ripetizioni;\n      startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n    };\n\n    const endCycle = async () => {\n  clearInterval(timerInterval);\n  studyCycles.value = 0;\n  try {\n    const token = sessionStorage.getItem('token');\n    await axios.patch('/api/pomsUpdate', {\n      sessionID: newPom.value.sessionID,\n      terminato: true\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Ciclo marcato come terminato nel backend.');\n  } catch (error) {\n    console.error('Errore nell\\'aggiornamento del ciclo:', error);\n  }\n  statusMessage.value = 'Ciclo terminato manualmente.';\n  document.getElementById('timerDisplay').textContent = \"00:00\";\n\n \n};\n\n\n    const pauseTimer = () => {\n      clearInterval(timerInterval);\n      if(pomodoro.value) {\n        console.log(\"pomodoro prima di chiamare f\",pomodoro.value);\n        savePomDataIntermediGiaAggiunti(pomodoro.value);\n      }\n      else{\n        console.log(\"pomodoro.value undefined\");\n        savePomDataIntermedi();}\n      \n      isPomodoroSaved = true; \n      isPaused.value = true;\n    };\n\n    const resumeTimer = () => {\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, newPom.value.tempoStudio, newPom.value.tempoPausa, studyCycles.value, isStudyPhase.value ? startBreakTimer : startStudyTimer);\n        remainingTime.value--;\n      }, 1000); \n    };\n\n    return {\n      newPom,\n      statusMessage,\n      aggiungiPomodoro,\n      skipPhase,\n      restartCycle,\n      endCycle,\n      pauseTimer,\n      resumeTimer,\n      isPaused\n    };\n  }\n};\n</script>\n\n<style scoped>\n#clock {\n  margin-top: 20px;\n}\n\n.progress-bar {\n  width: 0;\n  height: 20px;\n  background-color: green;\n  transition: width 1s linear;\n}\n\n.timer {\n  font-size: 2em;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\nform {\n  max-width: 400px;\n  margin: auto;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 10px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\nbutton.rounded-btn {\n  border-radius: 20px; \n}\n\n\n.controls {\n  margin-top: 20px;\n  margin-bottom: 40px;\n  display: flex; \n  flex-wrap: wrap; \n  justify-content: center; \n}\n\n.controls button {\n  padding: 10px;\n  margin: 10px; \n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\n.button-row {\n  display: flex; \n  justify-content: space-between; \n  margin-bottom: 10px; \n}\n\n.controls button {\n  flex: 1; \n  margin-right: 10px; \n}\n\n.controls button:last-child {\n  margin-right: 0;\n}\n\n#clock {\n  margin-top: 40px;\n}\n\n@media (max-width: 600px) {\n  h1 {\n    margin-top: 30px; \n  }\n\n  .controls button {\n    margin-right: 10px; \n  }\n}\n\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}