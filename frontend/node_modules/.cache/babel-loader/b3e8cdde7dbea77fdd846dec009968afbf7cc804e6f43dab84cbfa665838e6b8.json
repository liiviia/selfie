{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Non è necessario visualizzare notifiche in una lista, ma si possono processare qui -->\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      intervalId: null, // Per memorizzare l'ID dell'intervallo\n    };\n  },\n  created() {\n    const fetchAlerts = async () => {\n      try {\n        const loggedInUser = localStorage.getItem('username');\n        const response = await fetch(`/alerts?userNome=${loggedInUser}`);\n\n        if (response.ok) {\n          // Verifica se la risposta è vuota\n          const text = await response.text(); // Ottieni la risposta come testo\n\n          if (text.trim() === \"\") {\n            console.log('Nessuna notifica disponibile per l\\'utente');\n            return; // Se la risposta è vuota, non fare nulla\n          }\n\n          // Controlla che la risposta sia in formato JSON\n          const contentType = response.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            const newAlerts = JSON.parse(text);\n\n            if (Array.isArray(newAlerts) && newAlerts.length > 0) {\n              // Quando ci sono notifiche, visualizzale subito come alert()\n              newAlerts.forEach(alert => {\n                alert(`TITOLO: ${alert.title}\\nData: ${alert.date}\\nOra di inizio: ${alert.startTime}`);\n              });\n            } else {\n              console.log('Nessuna notifica per l\\'utente');\n            }\n          } else {\n            console.error('La risposta del server non è in formato JSON');\n          }\n        } else {\n          console.error('Errore nella richiesta:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta:', error);\n      }\n    };\n\n    // Esegui `fetchAlerts` ogni secondo\n    this.intervalId = setInterval(fetchAlerts, 1000); // 1000ms = 1 secondo\n  },\n  beforeDestroy() {\n    // Quando il componente viene distrutto, cancella l'intervallo\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* Stilizzazione personalizzata, se necessaria */\n</style>\n"],"mappings":";;uBACEA,mBAAA,CAEM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}