{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n\n  data() {\n    return {\n      events: [], // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(), // Data corrente\n      intervalId: null, // ID per l'intervallo che può essere utilizzato per fermarlo\n      activeTimers: {},\n    };\n  },\n\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n    async sendEmailNotification(event, emailRicevente) {\n    try {\n      const token = sessionStorage.getItem('token');\n      await axios.post('/api/events/email', {\n        emailRicevente,\n        eventDetails: event\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Notifica email inviata con successo');\n    } catch (error) {\n      console.error('Errore durante invio della notifica email:', error);\n    }\n  },\n\n    sendSystemNotification(event) {\n    if (Notification.permission === 'granted') {\n      const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n        body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`,\n      });\n      notification.onclick = () => {\n        window.focus();\n      };\n    } else {\n      console.error('Il permesso per le notifiche non è stato concesso.');\n    }\n  },\n\n  sendAlertNotification(event) {\n    window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n  },\n\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n    console.log(\"Schedulazione notifiche...\");\n    console.log(\"evento passato\", event);\n\n    try {\n      console.log(\"Chiamata API iniziata...\");\n      const response = await axios.get('/api/getTime-machine');\n      console.log(\"Time machine data:\", response.data);\n\n      const timeMachineNow = new Date(response.data).getTime();  // Ottieni il tempo attuale dalla Time Machine\n      console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n      const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;  // Combinazione di data e ora\n      const eventTime = new Date(eventDateTimeString).getTime();  // Calcola il tempo dell'evento\n      console.log(\"Event Time:\", eventTime);\n\n      if (isNaN(eventTime)) {\n        console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n        return;\n      }\n\n      const notificationTime = eventTime - event.notificationTime * 60000;  // Calcola l'orario di notifica\n      console.log(\"Notification Time:\", notificationTime);\n\n      const timeUntilNotification = notificationTime - timeMachineNow;  // Calcola il tempo fino alla notifica\n      console.log(\"Time Until Notification:\", timeUntilNotification);\n\n      if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n        console.warn(\"L'orario della notifica è già passato o non è valido.\");\n        return;\n      }\n\n      // Evita di creare nuovi timer se già esiste un timer per lo stesso evento\n      if (this.activeTimers[event._id]) {\n        clearInterval(this.activeTimers[event._id]); // Pulisce il timer precedente\n      }\n\n      if (timeUntilNotification > 0) {\n        setTimeout(() => {\n          console.log(\"trigger\");\n          this.triggerNotifications(event, emailRicevente);\n          if (event.repeatNotification > 0) {\n            this.activeTimers[event._id] = setInterval(() => {\n              this.triggerNotifications(event, emailRicevente);\n            }, event.repeatNotification * 60000);\n          }\n        }, timeUntilNotification);\n      } else {\n        console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n      }\n    } catch (error) {\n      console.error(\"Errore durante la richiesta della Time Machine:\", error);\n    }\n  },\n\n\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n    // Aggiungi il controllo per evitare notifiche duplicate\n    if (event.notificationSent) {\n      console.log(\"Notifica già inviata per l'evento:\", event.title);\n      return; // Non inviare di nuovo la notifica\n    }\n\n    console.log(\"evento notifica meccanismo:\", event.notificationMechanism);\n\n    // Imposta il flag per indicare che la notifica è stata inviata\n    event.notificationSent = true;\n\n    if (event.notificationMechanism.includes('system')) {\n      this.sendSystemNotification(event);\n    }\n    if (event.notificationMechanism.includes('email')) {\n      this.sendEmailNotification(event, emailRicevente);\n    }\n    if (event.notificationMechanism.includes('alert')) {\n      this.sendAlertNotification(event);\n    }\n  },\n\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username'); \n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n        console.log(response.data);\n        \n        this.events = response.data.filter(event => new Date(event.date) >= this.currentDate);\n        \n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"venti trovati\");\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n\n    // Avvia l'aggiornamento periodico degli eventi\n    startPeriodicUpdate() {\n      this.intervalId = setInterval(() => {\n        console.log(\"Aggiornamento eventi in corso...\");\n        this.fetchEvents();\n      }, 1000); // Aggiorna ogni 10secondi (1000 ms)\n    },\n\n    // Ferma l'aggiornamento periodico\n    stopPeriodicUpdate() {\n    clearInterval(this.intervalId);\n    // Pulisce anche i timer attivi per ogni evento\n    Object.values(this.activeTimers).forEach(timer => clearInterval(timer));\n  }\n},\n\n  mounted() {\n    this.events.forEach(event => {\n    event.notificationSent = false;  // Inizializza la proprietà per evitare notifiche duplicate\n  });\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents();  // Recupera gli eventi inizialmente\n    this.startPeriodicUpdate(); // Avvia l'aggiornamento periodico\n  },\n\n  beforeUnmount() {\n    this.stopPeriodicUpdate(); // Ferma l'aggiornamento periodico quando il componente viene distrutto\n  }\n};\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}