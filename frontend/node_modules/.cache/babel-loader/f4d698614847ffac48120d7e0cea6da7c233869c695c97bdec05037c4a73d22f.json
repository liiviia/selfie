{"ast":null,"code":"import axios from 'axios'; // Importa Axios\nimport moment from 'moment-timezone';\nexport default {\n  data() {\n    return {\n      intervalId: null // Per memorizzare l'ID dell'intervallo\n    };\n  },\n  created() {\n    /*\n    const timeMachine = async () => {\n      try {\n            const response = await axios.get('/api/getTime-machine'); \n            console.log(\"get time machine\", response.data);\n    \n            const localDate = moment(response.data.date).tz('Europe/Rome', true).format();\n            console.log(\"Data convertita nel fuso orario locale:\", localDate);\n        } catch (error) {\n            console.error('Errore nella richiesta GET:', error);\n        }\n    \n    };*/\n    const fetchAlerts = async () => {\n      try {\n        const loggedInUser = localStorage.getItem('username');\n\n        // Utilizza Axios per fare la richiesta GET\n        const response = await axios.get(`/alerts?userNome=${loggedInUser}`);\n        console.log(\"Risposta Axios:\", response);\n        if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n          // Quando ci sono notifiche, visualizzale subito come alert()\n          response.data.forEach(alert => {\n            alert(`TITOLO: ${alert.title}\\nData: ${alert.date}\\nOra di inizio: ${alert.startTime}`);\n          });\n        } else {\n          console.log('Nessuna notifica per l\\'utente');\n        }\n      } catch (error) {\n        // Gestisci gli errori\n        console.error('Errore nella richiesta Axios:', error);\n      }\n    };\n\n    // Esegui `fetchAlerts` ogni secondo\n    this.intervalId = setInterval(fetchAlerts, timeMachine, 1000); // 1000ms = 1 secondo\n  },\n  beforeUnmount() {\n    // Quando il componente viene distrutto, cancella l'intervallo\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n};","map":{"version":3,"names":["axios","moment","data","intervalId","created","fetchAlerts","loggedInUser","localStorage","getItem","response","get","console","log","Array","isArray","length","forEach","alert","title","date","startTime","error","setInterval","timeMachine","beforeUnmount","clearInterval"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Non Ã¨ necessario visualizzare notifiche in una lista, ma si possono processare qui -->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'; // Importa Axios\nimport moment from 'moment-timezone';\n\nexport default {\n  data() {\n    return {\n      intervalId: null, // Per memorizzare l'ID dell'intervallo\n    };\n  },\n  created() {\n    \n/*\nconst timeMachine = async () => {\n  try {\n        const response = await axios.get('/api/getTime-machine'); \n        console.log(\"get time machine\", response.data);\n\n        const localDate = moment(response.data.date).tz('Europe/Rome', true).format();\n        console.log(\"Data convertita nel fuso orario locale:\", localDate);\n    } catch (error) {\n        console.error('Errore nella richiesta GET:', error);\n    }\n\n};*/\n    const fetchAlerts = async () => {\n      try {\n        const loggedInUser = localStorage.getItem('username');\n\n        // Utilizza Axios per fare la richiesta GET\n        const response = await axios.get(`/alerts?userNome=${loggedInUser}`);\n        console.log(\"Risposta Axios:\", response);\n\n        if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n          // Quando ci sono notifiche, visualizzale subito come alert()\n          response.data.forEach(alert => {\n            alert(`TITOLO: ${alert.title}\\nData: ${alert.date}\\nOra di inizio: ${alert.startTime}`);\n          });\n        } else {\n          console.log('Nessuna notifica per l\\'utente');\n        }\n      } catch (error) {\n        // Gestisci gli errori\n        console.error('Errore nella richiesta Axios:', error);\n      }\n    };\n\n    // Esegui `fetchAlerts` ogni secondo\n    this.intervalId = setInterval(fetchAlerts, timeMachine, 1000); // 1000ms = 1 secondo\n  },\n\n  beforeUnmount() {\n    // Quando il componente viene distrutto, cancella l'intervallo\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* Stilizzazione personalizzata, se necessaria */\n</style>\n"],"mappings":"AAOA,OAAOA,KAAI,MAAO,OAAO,EAAE;AAC3B,OAAOC,MAAK,MAAO,iBAAiB;AAEpC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,IAAI,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IAEZ;AACA;;;;;;;;;;;AAWA;IACI,MAAMC,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,YAAW,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;QAErD;QACA,MAAMC,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,oBAAoBJ,YAAY,EAAE,CAAC;QACpEK,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,QAAQ,CAAC;QAExC,IAAIA,QAAQ,CAACP,IAAG,IAAKW,KAAK,CAACC,OAAO,CAACL,QAAQ,CAACP,IAAI,KAAKO,QAAQ,CAACP,IAAI,CAACa,MAAK,GAAI,CAAC,EAAE;UAC7E;UACAN,QAAQ,CAACP,IAAI,CAACc,OAAO,CAACC,KAAI,IAAK;YAC7BA,KAAK,CAAC,WAAWA,KAAK,CAACC,KAAK,WAAWD,KAAK,CAACE,IAAI,oBAAoBF,KAAK,CAACG,SAAS,EAAE,CAAC;UACzF,CAAC,CAAC;QACJ,OAAO;UACLT,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC/C;MACF,EAAE,OAAOS,KAAK,EAAE;QACd;QACAV,OAAO,CAACU,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;;IAED;IACA,IAAI,CAAClB,UAAS,GAAImB,WAAW,CAACjB,WAAW,EAAEkB,WAAW,EAAE,IAAI,CAAC,EAAE;EACjE,CAAC;EAEDC,aAAaA,CAAA,EAAG;IACd;IACA,IAAI,IAAI,CAACrB,UAAU,EAAE;MACnBsB,aAAa,CAAC,IAAI,CAACtB,UAAU,CAAC;IAChC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}