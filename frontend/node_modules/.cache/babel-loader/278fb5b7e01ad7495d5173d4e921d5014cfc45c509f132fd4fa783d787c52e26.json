{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport { createEvent } from 'ics';\nexport default {\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const events = ref([]);\n    const activities = ref([]);\n    const pomodoros = ref([]);\n    const incompleteSessions = ref([]);\n    const overdueActivities = ref([]);\n    const currentUser = localStorage.getItem('username');\n    const queryDate = computed(() => route.query.date);\n    const timeMachine = ref();\n    const confirmDeleteActivity = id => {\n      if (confirm(\"Sicuro di voler eliminare questa Attività?\")) {\n        deleteActivities(id);\n      }\n    };\n    const navigateToAddActivity = () => {\n      router.push({\n        path: '/addActivities',\n        query: {\n          date: queryDate.value\n        }\n      });\n    };\n    const navigateToAddEvent = () => {\n      router.push({\n        path: '/addEvent',\n        query: {\n          date: queryDate.value\n        }\n      });\n    };\n    const navigateToAddPomodoro = () => {\n      router.push({\n        path: '/pomodoroTempo',\n        query: {\n          date: queryDate.value,\n          nonFare: 'false'\n        }\n      });\n    };\n    const deleteActivities = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        await axios.delete(`/api/activitiesRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        console.log('Attività eliminata');\n        fetchEvents();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della attività:', error);\n      }\n    };\n    const confirmDeleteEvent = id => {\n      if (confirm(\"Sicuro di voler eliminare questo Evento?\")) {\n        deleteEvents(id);\n      }\n    };\n    const rejectEvent = id => {\n      deleteEvents(id);\n    };\n    const exportToIcal = async event => {\n      const eventDate = new Date(event.date);\n      const [hour, minute] = event.startTime.split(':').map(Number); // Converte l'orario in numeri\n      console.log(\"EV\", event.date);\n\n      // Crea un evento ICS con i dati corretti\n      const icsEvent = {\n        start: [eventDate.getFullYear(), eventDate.getMonth() + 1,\n        // iCalendar usa mesi da 1 a 12\n        eventDate.getDate(), hour, minute],\n        duration: {\n          hours: event.duration\n        },\n        // Assicurati che 'duration' sia in ore\n        title: event.title,\n        description: event.description,\n        organizer: {\n          name: event.author\n        }\n      };\n      console.log(\"vedi se va:\", icsEvent);\n\n      // Usa una libreria per generare il file ICS, come 'ical.js'\n      const ICAL = require('ical.js');\n\n      // Crea un componente iCalendar\n      const comp = new ICAL.Component([\"BEGIN:VEVENT\", `SUMMARY:${event.title}`, `DTSTART:${eventDate.getFullYear()}${(\"0\" + (eventDate.getMonth() + 1)).slice(-2)}${(\"0\" + eventDate.getDate()).slice(-2)}T${(\"0\" + hour).slice(-2)}${(\"0\" + minute).slice(-2)}00`, `DTEND:${eventDate.getFullYear()}${(\"0\" + (eventDate.getMonth() + 1)).slice(-2)}${(\"0\" + eventDate.getDate()).slice(-2)}T${(\"0\" + (hour + event.duration)).slice(-2)}${(\"0\" + minute).slice(-2)}00`,\n      // Fine dell'evento, considerando la durata\n      `DESCRIPTION:${event.description}`, `ORGANIZER:CN=\"${event.author}\"`, \"END:VEVENT\", \"END:VCALENDAR\"]);\n      const value = comp.toString();\n\n      // Crea un blob per il download\n      const blob = new Blob([value], {\n        type: 'text/calendar'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${event.title || \"evento\"}.ics`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      console.log('Evento esportato con successo!');\n    };\n    const deleteEvents = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        await axios.delete(`/api/eventsRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        console.log('Evento eliminato');\n        fetchEvents();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione di evento:', error);\n      }\n    };\n    const confirmDeletePomodoro = id => {\n      if (confirm(\"Sicuro di voler eliminare questa sessione Pomodoro?\")) {\n        deletePomodoro(id);\n      }\n    };\n    const deletePomodoro = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/pomRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Sessione Pomodoro eliminata');\n        fetchPoms();\n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della sessione:', error);\n      }\n    };\n    const iniziaPomodoro = async (id, remainingTime, date, tempoStudio, tempoPausa, ripetizioni) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        console.log(\"token pom\", token);\n        const response = await axios.post(`/api/iniziaPomodoro/${id}`, {\n          date\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data.success) {\n          router.push({\n            path: '/pomodoroTempo',\n            query: {\n              date: date,\n              remainingTime: remainingTime,\n              isStudyPhase: true,\n              tempoStudio: tempoStudio,\n              tempoPausa: tempoPausa,\n              ripetizioni: ripetizioni,\n              nuovo: true,\n              nonFare: true\n            }\n          });\n        } else {\n          console.log(response.data.message);\n        }\n      } catch (error) {\n        console.error('Errore durante l\\'avvio del pomodoro:', error);\n      }\n    };\n    const isSameDay = (date1, date2) => {\n      const d1 = new Date(date1);\n      const d2 = new Date(date2);\n      console.log(\"query date:\", date1, \"time machine date:\", date2);\n      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n    };\n    const fetchActivities = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const author = localStorage.getItem('username');\n        console.log('Fetching activities for:', {\n          date: queryDate.value,\n          author\n        });\n        const response = await axios.get('/api/activities/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            date: queryDate.value,\n            author\n          }\n        });\n        activities.value = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero delle attività:', error);\n      }\n    };\n    const fetchPoms = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        this.poms = response.data.filter(pom => {\n          const sessionDate = new Date(pom.giorno);\n          sessionDate.setHours(0, 0, 0, 0);\n          return sessionDate >= today;\n        });\n        console.log('Sessioni Pomodoro recuperate e filtrate:', this.poms);\n      } catch (error) {\n        console.error('Errore durante il recupero delle sessioni Pomodoro:', error);\n      }\n    };\n    const fetchEvents = async () => {\n      try {\n        const author = route.query.author;\n        const date = route.query.date;\n        const username = route.query.username || author;\n        const token = sessionStorage.getItem('token');\n        console.log('Fetching events for:', author, date);\n        const response = await axios.get('/api/events/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author,\n            date\n          }\n        });\n        events.value = Array.isArray(response.data) ? response.data : [response.data];\n        console.log('Fetched events:', events.value);\n\n        /*      const activityResponse = await axios.get('/api/activities/by-date', {\n                  headers: { Authorization: `Bearer ${token}` },\n                  params: { author, date }\n                });\n                // Filtra le attività completate \n                const allActivities = Array.isArray(activityResponse.data) ? activityResponse.data : [activityResponse.data];\n                activities.value = allActivities;\n                console.log('Fetched activities:', activities.value);\n        */\n        const pomodoroResponse = await axios.get('/api/poms/by-date', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username,\n            date\n          }\n        });\n        pomodoros.value = Array.isArray(pomodoroResponse.data) ? pomodoroResponse.data : [pomodoroResponse.data];\n        console.log('Fetched pomodoros:', pomodoros.value);\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi, delle attività e dei pomodori:', error);\n      }\n    };\n    const fetchIncompleteSessions = async () => {\n      console.log(\"fetchIncompleteSessions chiamata\");\n      const token = sessionStorage.getItem('token');\n      const username = localStorage.getItem('username');\n      try {\n        const response = await axios.get('/api/poms/incomplete', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username\n          }\n        });\n        incompleteSessions.value = (Array.isArray(response.data) ? response.data : [response.data]).filter(session => {\n          return session.studyCycles > 0 && session.remainingTime > 0 && session.tempoStudio && session.tempoPausa;\n        });\n      } catch (error) {\n        console.error('Errore nel recupero delle sessioni incomplete:', error);\n      }\n    };\n    const resumePomodoro = session => {\n      const plainSession = JSON.parse(JSON.stringify(session));\n      console.log(\"Sessione passata a pomodoroTempo:\", plainSession);\n      const nuovo = false;\n      router.push({\n        path: '/pomodoroTempo',\n        query: {\n          date: new Date(plainSession.giorno).toISOString(),\n          remainingTime: plainSession.remainingTime,\n          studyCycles: plainSession.studyCycles,\n          isStudyPhase: plainSession.isStudyPhase,\n          tempoStudio: plainSession.tempoStudio,\n          tempoPausa: plainSession.tempoPausa,\n          ripetizioni: plainSession.ripetizioni,\n          nuovo: nuovo,\n          nonFare: true\n        }\n      });\n    };\n    const discardPomodoro = async session => {\n      const token = sessionStorage.getItem('token');\n      try {\n        await axios.delete(`/api/pomRemove/${session._id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        incompleteSessions.value = incompleteSessions.value.filter(s => s._id !== session._id);\n        console.log('Sessione Pomodoro scartata.');\n      } catch (error) {\n        console.error('Errore nello scartare la sessione pomodoro:', error.response?.data || error);\n      }\n    };\n    const formatDate = dateString => {\n      if (!dateString) return 'Data non disponibile';\n      const date = new Date(dateString);\n      return date instanceof Date && !isNaN(date) ? date.toLocaleDateString('it-IT', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }) : 'Data non valida';\n    };\n    const fetchOverdueActivities = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/overdue', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username\n          }\n        });\n        overdueActivities.value = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero delle attività scadute:', error);\n      }\n    };\n    const filteredOverdueActivities = computed(() => overdueActivities.value.filter(activity => activity.title && activity.deadline));\n\n    /*const markActivityComplete = async (activity) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n         const response = await axios.post('/api/activities/mark-complete', {\n          id: activity._id,\n          username,\n          }, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n       console.log('Attività completata:', response.data);\n       activities.value = activities.value.filter(a => a._id !== activity._id);\n      } catch (error) {\n      console.error('Errore nel segnare l\\'attività come completata:', error);\n    }\n    };*/\n\n    const markAsCompleted = async activity => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.put(`/api/activities/${activity._id}`, {\n          completed: true\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        activity.completed = true;\n        // Aggiorna la lista localmente\n        activities.value = activities.value.filter(a => a._id !== activity._id);\n        overdueActivities.value = overdueActivities.value.filter(a => a._id !== activity._id);\n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nel completare l\\'attività:', error);\n      }\n    };\n    const discardActivity = async id => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        console.log('Discarding activity with ID:', id);\n        await axios.delete(`/api/activitiesRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        overdueActivities.value = overdueActivities.value.filter(a => a._id !== id);\n      } catch (error) {\n        console.error('Errore nello scartare l\\'attività:', error);\n      }\n    };\n    const getTimeMachine = async () => {\n      try {\n        const response = await axios.get('/api/getTime-machine');\n        timeMachine.value = response.data;\n        //console.log(\" data time machine event day calendar\",timeMachine);\n      } catch (error) {\n        console.log(\"errore recupero data time machine\", error);\n      }\n    };\n    onMounted(() => {\n      fetchEvents();\n      fetchActivities();\n      fetchOverdueActivities();\n      fetchIncompleteSessions();\n      setInterval(getTimeMachine, 1000);\n    });\n    return {\n      events,\n      activities,\n      pomodoros,\n      incompleteSessions,\n      overdueActivities,\n      formatDate,\n      queryDate,\n      navigateToAddEvent,\n      navigateToAddActivity,\n      navigateToAddPomodoro,\n      resumePomodoro,\n      discardPomodoro,\n      confirmDeleteActivity,\n      confirmDeleteEvent,\n      confirmDeletePomodoro,\n      //markActivityComplete ,\n      markAsCompleted,\n      filteredOverdueActivities,\n      discardActivity,\n      iniziaPomodoro,\n      timeMachine,\n      isSameDay,\n      currentUser,\n      rejectEvent,\n      exportToIcal\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useRoute","useRouter","axios","createEvent","setup","route","router","events","activities","pomodoros","incompleteSessions","overdueActivities","currentUser","localStorage","getItem","queryDate","query","date","timeMachine","confirmDeleteActivity","id","confirm","deleteActivities","navigateToAddActivity","push","path","value","navigateToAddEvent","navigateToAddPomodoro","nonFare","token","sessionStorage","username","delete","headers","Authorization","params","console","log","fetchEvents","error","confirmDeleteEvent","deleteEvents","rejectEvent","exportToIcal","event","eventDate","Date","hour","minute","startTime","split","map","Number","icsEvent","start","getFullYear","getMonth","getDate","duration","hours","title","description","organizer","name","author","ICAL","require","comp","Component","slice","toString","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","confirmDeletePomodoro","deletePomodoro","fetchPoms","window","location","reload","iniziaPomodoro","remainingTime","tempoStudio","tempoPausa","ripetizioni","response","post","data","success","isStudyPhase","nuovo","message","isSameDay","date1","date2","d1","d2","fetchActivities","get","today","setHours","poms","filter","pom","sessionDate","giorno","Array","isArray","pomodoroResponse","fetchIncompleteSessions","session","studyCycles","resumePomodoro","plainSession","JSON","parse","stringify","toISOString","discardPomodoro","_id","s","formatDate","dateString","isNaN","toLocaleDateString","year","month","day","fetchOverdueActivities","filteredOverdueActivities","activity","deadline","markAsCompleted","put","completed","a","discardActivity","getTimeMachine","setInterval"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/eventDayCalendar.vue"],"sourcesContent":["<template>\n   <div>\n    <h2 class=\"main-title\">Eventi, Attività e Pomodori per {{ formatDate(queryDate) }}</h2>\n     <div class=\"section events-section full-width\">\n      <h3>I TUOI EVENTI:</h3>\n      <div v-if=\"events.length > 0\">\n        <div v-for=\"event in events\" :key=\"event._id\" class=\"item-container\">\n  <h4><span style=\"font-size: 0.9em;\">Titolo:</span> {{ event.title }}</h4>\n  <p>Data: {{ formatDate(event.date) }}</p>\n  <p>Descrizione: {{ event.description }}</p>\n  <p v-if=\"event.type === 'gruppo'\" style=\"color: #FF6347;\">\n    Evento di gruppo creato da: {{ event.author }} <br>\n    gruppo composto da: {{ event.participants.join(', ') }}\n  </p>\n\n  <button v-if=\"event.author === currentUser\" @click=\"confirmDeleteEvent(event._id)\" class=\"delete-btn\">🗑️ Elimina Evento</button>\n\n  \n\n  <button v-if=\"event.participants.includes(currentUser) && event.author !== currentUser\" \n          @click=\"rejectEvent(event._id)\" \n          class=\"delete-btn\">🗑️ Rifiuta Evento</button>\n\n          <button @click=\"exportToIcal(event)\" class=\"export-btn\">📅 Esporta su iCalendar</button>\n</div>\n      </div>\n      <p v-else>Nessun evento per questa data.</p>\n      <div class=\"button-container\">\n        <button class=\"fixed-button\" @click=\"navigateToAddEvent\" style=\"background:#f4a460;\">\n          Aggiungi evento\n        </button>\n      </div>\n    </div>\n\n    <div class=\"content-container\">\n      <div class=\"section activities-section\">\n        <h3>LE TUE ATTIVITÀ:</h3>\n        <div v-if=\"activities.length > 0\">\n          <div v-for=\"activity in activities\" :key=\"activity._id\" class=\"item-container\"\n          :class=\"{ completed: activity.completed }\">\n            <h4><span style=\"font-size: 0.9em;\">Titolo:</span> {{ activity.title }}</h4>\n            <p>Data: {{ formatDate(activity.deadline || activity.date) }}</p>\n            <p>Descrizione: {{ activity.description }}</p>\n            <p v-if=\"activity.type === 'gruppo'\" style=\"color: #FF6347;\">\n              Attività di gruppo creata da: {{ activity.author }}<br>\n              Gruppo composto da: {{ activity.participants.join(', ') }}\n            </p>\n            <button v-if=\"!activity.completed\" @click=\"markAsCompleted(activity)\" class=\"complete-btn\">Completata</button>\n            <button @click=\"confirmDeleteActivity(activity._id)\" class=\"delete-btn\">🗑️</button>\n          </div>\n        </div>\n        <p v-else>Nessuna attività per questa data.</p>\n        <div class=\"button-container\">\n          <button class=\"fixed-button\" @click=\"navigateToAddActivity\" style=\"background:#f4a460;\">\n            Aggiungi attivita\n          </button>\n        </div>\n      </div>\n      \n      \n      <div class=\"content-container\">\n       <div class=\"section overdue-activities-section\">\n        <h3>ATTIVITÀ INCOMPLETE:</h3>\n        <div v-if=\"filteredOverdueActivities.length > 0\">\n          <div v-for=\"activity in filteredOverdueActivities\" :key=\"activity._id\" class=\"item-container overdue\">\n            <h4>Titolo: {{ activity.title }}</h4>\n            <p>Data scadenza: {{ formatDate(activity.deadline) }}</p>\n            <p>Descrizione: {{ activity.description }}</p>\n            <button @click=\"discardActivity(activity._id)\" class=\"delete-btn\">Scarta</button>\n          </div>\n        </div>\n        <p v-else>Nessuna attività incompleta trovata.</p>\n      </div>\n    </div>\n  </div>\n\n    <div class=\"content-container\">\n      <div class=\"section pomodoros-section\">\n    <h3>I TUOI POMODORI:</h3>\n    <div v-if=\"pomodoros.length > 0\">\n      <div v-for=\"pomodoro in pomodoros\" :key=\"pomodoro._id\" class=\"item-container\">\n        <h4>Pomodoro Sessione</h4>\n        <p>Data: {{ formatDate(pomodoro.giorno) }}</p>\n        <p>Tempo di studio: {{ pomodoro.tempoStudio }} minuti</p>\n        <p>Tempo di pausa: {{ pomodoro.tempoPausa }} minuti</p>\n        <p>Ripetizioni: {{ pomodoro.ripetizioni }}</p>\n        <button @click=\"confirmDeletePomodoro(pomodoro._id)\" class=\"delete-btn\">🗑️</button>\n        \n        <button\n  v-if=\"isSameDay(queryDate, timeMachine) && !pomodoro.isStarted\"\n  @click=\"iniziaPomodoro(pomodoro._id,  pomodoro.remainingTime, pomodoro.giorno, pomodoro.tempoStudio, pomodoro.tempoPausa, pomodoro.ripetizioni)\"\n>\n  Inizia il pomodoro\n</button>\n\n<p v-else-if=\"pomodoro.isStarted\">Pomodoro già avviato</p>\n\n      </div>\n    </div>\n    <p v-else>Nessun pomodoro per questa data.</p>\n    <div class=\"button-container\">\n      <button class=\"fixed-button\" @click=\"navigateToAddPomodoro\" style=\"background:#f4a460;\">\n        Aggiungi pomodoro\n      </button>\n    </div>\n  </div>\n\n\n      <div class=\"section pomodorosScaduti-section\">\n        <h3>I TUOI POMODORI INCOMPLETI</h3>\n      <div v-if=\"incompleteSessions.length > 0\">\n      <div v-for=\"session in incompleteSessions\" :key=\"session._id\" class=\"item-container\">\n        <p>Data: {{ formatDate(session.giorno) }}</p>\n        <p>Tempo rimanente: {{ Math.floor(session.remainingTime / 60) }}:{{ session.remainingTime % 60 }}</p>\n        <p>Cicli rimanenti: {{ session.studyCycles }}</p>\n         <button @click=\"resumePomodoro(session)\" class=\"action-button\">Riprendi Sessione</button>\n         <button @click=\"discardPomodoro(session)\" class=\"action-button\">\n          <span class=\"trash-icon\">🗑️ </span>Scarta\n         </button> \n      </div>\n    </div>\n    <p v-else>nessun pomodoro da portare a termine</p>\n  </div>\n\n  </div>\n  </div> \n\n</template>\n\n\n<script>\nimport { ref, onMounted, computed } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport { createEvent } from 'ics';\n\nexport default {\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const events = ref([]);\n    const activities = ref([]);\n    const pomodoros = ref([]); \n    const incompleteSessions = ref([]);\n    const overdueActivities = ref([]); \n    const currentUser = localStorage.getItem('username') ;\n    const queryDate = computed(() => route.query.date);\n    const timeMachine = ref();\n\n    const confirmDeleteActivity = (id) => {\n      if (confirm(\"Sicuro di voler eliminare questa Attività?\")) {\n        deleteActivities(id); \n      }\n    };\n    const navigateToAddActivity = () => {\n      router.push({ path: '/addActivities', query: { date: queryDate.value } });\n    };\n    const navigateToAddEvent = () => {\n      router.push({ path: '/addEvent', query: { date: queryDate.value } });\n    };\n    const navigateToAddPomodoro = () => {\n      router.push({ path: '/pomodoroTempo', query: { date: queryDate.value,nonFare: 'false' } });\n    };\n\n    const deleteActivities = async (id) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        await axios.delete(`/api/activitiesRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          },\n          params: { username: username } \n        });\n        console.log('Attività eliminata');\n        fetchEvents(); \n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della attività:', error);\n      }\n    };\n\n    const confirmDeleteEvent = (id) => {\n      if (confirm(\"Sicuro di voler eliminare questo Evento?\")) {\n        deleteEvents(id); \n      }\n    };\n\n    const rejectEvent = (id) => {\n      deleteEvents(id);\n    }\n\n    const exportToIcal = async (event) => {\n  const eventDate = new Date(event.date);\n  const [hour, minute] = event.startTime.split(':').map(Number); // Converte l'orario in numeri\n  console.log(\"EV\", event.date);\n\n  // Crea un evento ICS con i dati corretti\n  const icsEvent = {\n    start: [\n      eventDate.getFullYear(),\n      eventDate.getMonth() + 1, // iCalendar usa mesi da 1 a 12\n      eventDate.getDate(),\n      hour,\n      minute\n    ],\n    duration: { hours: event.duration }, // Assicurati che 'duration' sia in ore\n    title: event.title,\n    description: event.description,\n    organizer: { name: event.author },\n  };\n\n  console.log(\"vedi se va:\", icsEvent);\n\n  // Usa una libreria per generare il file ICS, come 'ical.js'\n  const ICAL = require('ical.js');\n\n  // Crea un componente iCalendar\n  const comp = new ICAL.Component([\n    \"BEGIN:VEVENT\",\n    `SUMMARY:${event.title}`,\n    `DTSTART:${eventDate.getFullYear()}${(\"0\" + (eventDate.getMonth() + 1)).slice(-2)}${(\"0\" + eventDate.getDate()).slice(-2)}T${(\"0\" + hour).slice(-2)}${(\"0\" + minute).slice(-2)}00`,\n    `DTEND:${eventDate.getFullYear()}${(\"0\" + (eventDate.getMonth() + 1)).slice(-2)}${(\"0\" + eventDate.getDate()).slice(-2)}T${(\"0\" + (hour + event.duration)).slice(-2)}${(\"0\" + minute).slice(-2)}00`, // Fine dell'evento, considerando la durata\n    `DESCRIPTION:${event.description}`,\n    `ORGANIZER:CN=\"${event.author}\"`,\n    \"END:VEVENT\",\n    \"END:VCALENDAR\"\n  ]);\n\n  const value = comp.toString();\n\n  // Crea un blob per il download\n  const blob = new Blob([value], { type: 'text/calendar' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = `${event.title || \"evento\"}.ics`;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n\n  console.log('Evento esportato con successo!');\n};\n\n\n    const deleteEvents = async (id) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        await axios.delete(`/api/eventsRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          },\n          params: { username: username }\n        });\n        console.log('Evento eliminato');\n        fetchEvents(); \n      } catch (error) {\n        console.error('Errore nell\\'eliminazione di evento:', error);\n      }\n    };\n\n    const confirmDeletePomodoro = (id) => {\n      if (confirm(\"Sicuro di voler eliminare questa sessione Pomodoro?\")) {\n        deletePomodoro(id); \n      }\n    };\n\n    const deletePomodoro = async (id) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/pomRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          }\n        });\n        console.log('Sessione Pomodoro eliminata');\n        fetchPoms(); \n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della sessione:', error);\n      }\n    };\n\n    const iniziaPomodoro = async (id, remainingTime, date, tempoStudio, tempoPausa, ripetizioni) => {\n  try {\n    const token = sessionStorage.getItem('token');\n    console.log(\"token pom\", token);\n    const response = await axios.post(`/api/iniziaPomodoro/${id}`, {\n      date },\n      {\n      headers: {\n         Authorization: `Bearer ${token}` \n        }\n    });\n\n    if (response.data.success) {\n      router.push({\n        path: '/pomodoroTempo',\n        query: {\n          date: date,\n          remainingTime: remainingTime,\n          isStudyPhase: true,\n          tempoStudio: tempoStudio,\n          tempoPausa: tempoPausa,\n          ripetizioni: ripetizioni,\n          nuovo: true,\n          nonFare: true\n        }\n      });\n    } else {\n      console.log(response.data.message); \n    }\n  } catch (error) {\n    console.error('Errore durante l\\'avvio del pomodoro:', error);\n  }\n};\n\n\n\n    const isSameDay = (date1, date2) => {\n      const d1 = new Date(date1);\n        const d2 = new Date(date2);\n       console.log(\"query date:\", date1 , \"time machine date:\" , date2);\n        return (\n            d1.getFullYear() === d2.getFullYear() &&\n            d1.getMonth() === d2.getMonth() &&\n            d1.getDate() === d2.getDate()\n        );\n\n    };\n\n\n    const fetchActivities = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    const author = localStorage.getItem('username'); \n    console.log('Fetching activities for:', { date: queryDate.value, author }); \n    const response = await axios.get('/api/activities/by-date', {\n      headers: { Authorization: `Bearer ${token}` },\n      params: { date: queryDate.value, author }, \n    });\n    activities.value = response.data;\n  } catch (error) {\n    console.error('Errore nel recupero delle attività:', error);\n  }\n};\n\n\n\n     const fetchPoms = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { username: username }\n        });\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        this.poms = response.data.filter(pom => {\n          const sessionDate = new Date(pom.giorno);\n          sessionDate.setHours(0, 0, 0, 0);\n          return sessionDate >= today;\n        });\n\n        console.log('Sessioni Pomodoro recuperate e filtrate:', this.poms);\n      } catch (error) {\n        console.error('Errore durante il recupero delle sessioni Pomodoro:', error);\n      }\n    }\n\n\n    const fetchEvents = async () => {\n      try {\n        const author = route.query.author;\n        const date = route.query.date;\n        const username = route.query.username || author;\n\n        const token = sessionStorage.getItem('token');\n        console.log('Fetching events for:', author, date);\n\n        const response = await axios.get('/api/events/by-date', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { author, date }\n        });\n        events.value = Array.isArray(response.data) ? response.data : [response.data];\n        console.log('Fetched events:', events.value);\n\n/*      const activityResponse = await axios.get('/api/activities/by-date', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { author, date }\n        });\n        // Filtra le attività completate \n        const allActivities = Array.isArray(activityResponse.data) ? activityResponse.data : [activityResponse.data];\n        activities.value = allActivities;\n        console.log('Fetched activities:', activities.value);\n*/\n        const pomodoroResponse = await axios.get('/api/poms/by-date', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { username, date }\n        });\n        pomodoros.value = Array.isArray(pomodoroResponse.data) ? pomodoroResponse.data : [pomodoroResponse.data];\n        console.log('Fetched pomodoros:', pomodoros.value);\n\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi, delle attività e dei pomodori:', error);\n      }\n    };\n\n    const fetchIncompleteSessions = async () => {\n      console.log(\"fetchIncompleteSessions chiamata\");\n      const token = sessionStorage.getItem('token');\n      const username = localStorage.getItem('username');\n\n      try {\n        const response = await axios.get('/api/poms/incomplete', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { username }\n        });\n        \n        incompleteSessions.value = (Array.isArray(response.data) ? response.data : [response.data]).filter(session => {\n        return (\n          session.studyCycles > 0 && \n          session.remainingTime > 0 &&\n          session.tempoStudio && \n          session.tempoPausa \n      );\n    });\n\n      } catch (error) {\n        console.error('Errore nel recupero delle sessioni incomplete:', error);\n      }\n    };\n\n    const resumePomodoro = (session) => {\n    const plainSession = JSON.parse(JSON.stringify(session));\n\n    console.log(\"Sessione passata a pomodoroTempo:\", plainSession);\n    const nuovo = false;\n\n    router.push({\n      path: '/pomodoroTempo',\n      query: {\n        date: new Date(plainSession.giorno).toISOString(),\n        remainingTime: plainSession.remainingTime,\n        studyCycles: plainSession.studyCycles,\n        isStudyPhase: plainSession.isStudyPhase,\n        tempoStudio: plainSession.tempoStudio, \n        tempoPausa: plainSession.tempoPausa,   \n        ripetizioni: plainSession.ripetizioni, \n        nuovo: nuovo,\n        nonFare:true,\n    },\n  });\n    };\n\n    const discardPomodoro = async (session) => {\n      const token = sessionStorage.getItem('token');\n      try {\n        await axios.delete(`/api/pomRemove/${session._id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n        incompleteSessions.value = incompleteSessions.value.filter(s => s._id !== session._id);\n        console.log('Sessione Pomodoro scartata.');\n      } catch (error) {\n        console.error('Errore nello scartare la sessione pomodoro:', error.response?.data || error);\n      }\n    };\n\n\n    const formatDate = (dateString) => {\n      if (!dateString) return 'Data non disponibile';\n      const date = new Date(dateString);\n      return date instanceof Date && !isNaN(date)\n        ? date.toLocaleDateString('it-IT', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        : 'Data non valida';\n    };\n\n\n    const fetchOverdueActivities = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/activities/overdue', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { username },\n        });\n        overdueActivities.value = response.data;\n      } catch (error) {\n        console.error('Errore nel recupero delle attività scadute:', error);\n      }\n    };\n\n    const filteredOverdueActivities = computed(() =>\n      overdueActivities.value.filter(activity => activity.title && activity.deadline)\n    );\n\n\n    /*const markActivityComplete = async (activity) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n\n        const response = await axios.post('/api/activities/mark-complete', {\n          id: activity._id,\n          username,\n          }, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n\n      console.log('Attività completata:', response.data);\n\n      activities.value = activities.value.filter(a => a._id !== activity._id);\n      } catch (error) {\n      console.error('Errore nel segnare l\\'attività come completata:', error);\n    }\n  };*/\n\n      const markAsCompleted = async (activity) => {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.put(`/api/activities/${activity._id}`, { completed: true }, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        activity.completed = true;\n        // Aggiorna la lista localmente\n        activities.value = activities.value.filter(a => a._id !== activity._id);\n        overdueActivities.value = overdueActivities.value.filter(a => a._id !== activity._id);\n        window.location.reload();\n      } catch (error) {\n        console.error('Errore nel completare l\\'attività:', error);\n      }\n    };\n\n    const discardActivity = async (id) => {\n  try {\n    const token = sessionStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    console.log('Discarding activity with ID:', id); \n    await axios.delete(`/api/activitiesRemove/${id}`, {\n      headers: { Authorization: `Bearer ${token}` },\n      params: {username: username}\n    });\n    overdueActivities.value = overdueActivities.value.filter(a => a._id !== id);\n  } catch (error) {\n    console.error('Errore nello scartare l\\'attività:', error);\n  }\n};\n\n   const getTimeMachine = async () => {\n\n    try{\n    const response = await axios.get('/api/getTime-machine');\n    timeMachine.value = response.data\n    //console.log(\" data time machine event day calendar\",timeMachine);\n\n    } catch (error) {\n      console.log(\"errore recupero data time machine\" , error);\n    }\n   };\n\n    onMounted(() => {\n      fetchEvents();\n      fetchActivities();\n      fetchOverdueActivities();\n      fetchIncompleteSessions();\n      setInterval(getTimeMachine, 1000);    });\n\n    return {\n      events,\n      activities,\n      pomodoros, \n      incompleteSessions, \n      overdueActivities,\n      formatDate,\n      queryDate,\n      navigateToAddEvent,\n      navigateToAddActivity,\n      navigateToAddPomodoro, \n      resumePomodoro, \n      discardPomodoro,\n      confirmDeleteActivity,\n      confirmDeleteEvent,\n      confirmDeletePomodoro,\n      //markActivityComplete ,\n      markAsCompleted,\n      filteredOverdueActivities,\n      discardActivity,\n      iniziaPomodoro,\n      timeMachine,\n      isSameDay,\n      currentUser,\n      rejectEvent,\n      exportToIcal\n    };\n  }\n};\n\n\n</script>\n\n<style scoped>\n.full-width {\n  width: 100%;\n  margin-bottom: 20px;\n  background-color: rgba(230, 247, 255, 0.8);\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  padding: 25px;\n}\n\n\n.center-container {\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n}\n\n.content-container {\n  display: flex;\n  justify-content: space-between;\n  gap: 40px;\n  padding: 20px;\n}\n\n.button-container {\n  margin-top: auto; \n  margin-bottom: 10px; \n}\n\nbutton {\n  margin-right: 10px;\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n.activities-section {\n  flex: 1.5; \n  background-color: #f9f9f9;\n}\n\n.events-section {\n  flex: 1.5; \n  background-color: #e6f7ff;\n}\n\n.pomodoros-section {\n  flex: 1.5; \n  background-color: #ffe6e6;\n}\n\n.section {\n  margin-right: 100px;\n  min-width: 500px;\n  flex: 1.5; \n  padding: 25px;\n  border: 1px solid #ddd; \n  border-radius: 10px; \n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); \n  background-color: rgba(255, 255, 255, 0.8); \n  display: flex; \n  flex-direction: column; \n  justify-content: space-between; \n}\n\n.section:hover {\n  transform: scale(1.02); \n}\n\n.activities-section {\n  background-color: rgba(249, 249, 249, 0.8); \n}\n\n.events-section {\n  background-color: rgba(230, 247, 255, 0.8); \n}\n\n.pomodoros-section {\n  background-color: rgba(255, 230, 230, 0.8);\n}\n\nhr {\n  border: 0; \n  height: 1px; \n  background-color: #ddd; \n  margin: 10px 0; \n}\n.item-container {\n  background-color: rgba(255, 255, 255, 0.9);\n  border: 1px solid #ddd; \n  border-radius: 8px; \n  padding: 15px; \n  margin-bottom: 15px; \n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  position: relative; \n}\n\n.delete-btn {\n  position: absolute; \n  bottom: 10px;\n  right: 10px; \n  background: none;\n  border: none; \n  cursor: pointer; \n  font-size: 1.2em;\n  color: #e74c3c; \n}\n\n.delete-btn:hover {\n  color: #c0392b; \n}\n\n\n@media (max-width: 768px) {\n  .content-container {\n    flex-direction: column; \n    margin-left: 0; \n  }\n\n  .section {\n    min-width: auto; \n    margin-right: 0; \n    margin-bottom: 20px; \n  }\n  .main-title {\n  margin-top: 20px; \n}\n}\n\n.item-container {\n  background-color: rgba(255, 255, 255, 0.9);\n  border: 1px solid #ddd; \n  border-radius: 8px; \n  padding: 15px; \n  margin-bottom: 15px; \n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  position: relative; \n  transition: border-color 0.3s ease; \n}\n\n.item-container.overdue {\n  border-color: red;\n  background-color: #ffe6e6;\n}\n\n.item-container.incpom {\n  border-color: red;\n  background-color: #ffe6e6;\n}\n\n\n.item-container.completed {\n  border-color: green;\n  box-shadow: 0 2px 8px rgba(0, 128, 0, 0.5); \n}\n\n.complete-btn {\n  background-color: #28a745; \n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.complete-btn:hover {\n  background-color: #218838; \n}\n\n.complete-btn:before {\n  content: '✔️ '; \n  margin-right: 8px; \n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}