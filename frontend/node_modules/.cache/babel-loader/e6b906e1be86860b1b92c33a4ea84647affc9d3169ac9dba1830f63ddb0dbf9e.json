{"ast":null,"code":"export default {\n  created() {\n    const fetchAlerts = async () => {\n      try {\n        const loggedInUser = localStorage.getItem('username');\n        const response = await fetch(`/alerts?userNome=${loggedInUser}`);\n        if (response.ok) {\n          // Controlla che la risposta sia in formato JSON\n          const contentType = response.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            const newAlerts = await response.json();\n            if (Array.isArray(newAlerts) && newAlerts.length > 0) {\n              // Quando ci sono notifiche, visualizzale subito come alert()\n              newAlerts.forEach(alert => {\n                alert(`TITOLO: ${alert.title}\\nData: ${alert.date}\\nOra di inizio: ${alert.startTime}`);\n              });\n            } else {\n              console.log('Nessuna notifica per l\\'utente');\n            }\n          } else {\n            console.error('La risposta del server non è in formato JSON');\n          }\n        } else {\n          console.error('Errore nella richiesta:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta:', error);\n      }\n    };\n    fetchAlerts();\n  }\n};","map":{"version":3,"names":["created","fetchAlerts","loggedInUser","localStorage","getItem","response","fetch","ok","contentType","headers","get","includes","newAlerts","json","Array","isArray","length","forEach","alert","title","date","startTime","console","log","error","statusText"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Non è necessario visualizzare notifiche in una lista, ma si possono processare qui -->\n  </div>\n</template>\n\n<script>\nexport default {\n  created() {\n    const fetchAlerts = async () => {\n      try {\n        const loggedInUser = localStorage.getItem('username');\n        const response = await fetch(`/alerts?userNome=${loggedInUser}`);\n\n        if (response.ok) {\n          // Controlla che la risposta sia in formato JSON\n          const contentType = response.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            const newAlerts = await response.json();\n\n            if (Array.isArray(newAlerts) && newAlerts.length > 0) {\n              // Quando ci sono notifiche, visualizzale subito come alert()\n              newAlerts.forEach(alert => {\n                alert(`TITOLO: ${alert.title}\\nData: ${alert.date}\\nOra di inizio: ${alert.startTime}`);\n              });\n            } else {\n              console.log('Nessuna notifica per l\\'utente');\n            }\n          } else {\n            console.error('La risposta del server non è in formato JSON');\n          }\n        } else {\n          console.error('Errore nella richiesta:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta:', error);\n      }\n    };\n\n    fetchAlerts();\n  },\n};\n</script>\n\n<style scoped>\n/* Stilizzazione personalizzata, se necessaria */\n</style>\n"],"mappings":"AAOA,eAAe;EACbA,OAAOA,CAAA,EAAG;IACR,MAAMC,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,YAAW,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;QACrD,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,oBAAoBJ,YAAY,EAAE,CAAC;QAEhE,IAAIG,QAAQ,CAACE,EAAE,EAAE;UACf;UACA,MAAMC,WAAU,GAAIH,QAAQ,CAACI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UACxD,IAAIF,WAAU,IAAKA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;YAC3D,MAAMC,SAAQ,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;YAEvC,IAAIC,KAAK,CAACC,OAAO,CAACH,SAAS,KAAKA,SAAS,CAACI,MAAK,GAAI,CAAC,EAAE;cACpD;cACAJ,SAAS,CAACK,OAAO,CAACC,KAAI,IAAK;gBACzBA,KAAK,CAAC,WAAWA,KAAK,CAACC,KAAK,WAAWD,KAAK,CAACE,IAAI,oBAAoBF,KAAK,CAACG,SAAS,EAAE,CAAC;cACzF,CAAC,CAAC;YACJ,OAAO;cACLC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;YAC/C;UACF,OAAO;YACLD,OAAO,CAACE,KAAK,CAAC,8CAA8C,CAAC;UAC/D;QACF,OAAO;UACLF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEnB,QAAQ,CAACoB,UAAU,CAAC;QAC/D;MACF,EAAE,OAAOD,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDvB,WAAW,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}