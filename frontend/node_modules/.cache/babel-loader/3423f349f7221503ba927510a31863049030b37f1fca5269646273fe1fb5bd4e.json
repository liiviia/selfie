{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"pomodoro-list\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"no-poms\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"Lista delle Sessioni Pomodoro Salvate\", -1 /* HOISTED */)), _createElementVNode(\"h2\", null, \"Numero Pomodori : \" + _toDisplayString($data.poms.length), 1 /* TEXT */), $data.poms.length > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.poms, pom => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: pom._id,\n      class: \"pomodoro-item\"\n    }, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Sessione Pomodoro\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"strong\", null, \"Username:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(pom.username), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Tempo di Studio:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(pom.tempoStudio) + \" minuti\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Tempo di Pausa:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(pom.tempoPausa) + \" minuti\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Ripetizioni:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(pom.ripetizioni), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Data della Sessione:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($options.formatDate(pom.giorno)), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n      onClick: $event => $options.confirmDelete(pom._id),\n      class: \"delete-btn\"\n    }, \"üóëÔ∏è\", 8 /* PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"Non ci sono sessioni Pomodoro da visualizzare.\"))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$data","poms","length","_hoisted_2","_Fragment","_renderList","pom","_id","_createTextVNode","username","tempoStudio","tempoPausa","ripetizioni","$options","formatDate","giorno","onClick","$event","confirmDelete","_hoisted_3","_hoisted_4"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/pomSession.vue"],"sourcesContent":["<template>\n  <div class=\"pomodoro-list\">\n    <h1>Lista delle Sessioni Pomodoro Salvate</h1>\n\n    <h2>Numero Pomodori : {{poms.length}}</h2>\n\n    <ul v-if=\"poms.length > 0\">\n      <li v-for=\"pom in poms\" :key=\"pom._id\" class=\"pomodoro-item\">\n        <h2>Sessione Pomodoro</h2>\n        <p><strong>Username:</strong> {{ pom.username }}</p>\n        <p><strong>Tempo di Studio:</strong> {{ pom.tempoStudio }} minuti</p>\n        <p><strong>Tempo di Pausa:</strong> {{ pom.tempoPausa }} minuti</p>\n        <p><strong>Ripetizioni:</strong> {{ pom.ripetizioni }}</p>\n        <p><strong>Data della Sessione:</strong> {{ formatDate(pom.giorno) }}</p>\n        <button @click=\"confirmDelete(pom._id)\" class=\"delete-btn\">üóëÔ∏è</button>\n      </li>\n    </ul>\n    <p v-else class=\"no-poms\">Non ci sono sessioni Pomodoro da visualizzare.</p>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      poms: []\n    };\n  },\n  methods: {\n    confirmDelete(id) {\n      if (confirm(\"Sicuro di voler eliminare questa sessione Pomodoro?\")) {\n        this.deletePomodoro(id); \n      }\n    },\n    \n    async deletePomodoro(id) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/pomRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          }\n        });\n        this.fetchPoms(); \n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della sessione:', error);\n      }\n    },\n\n    async fetchPoms() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { username: username }\n        });\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        this.poms = response.data.filter(pom => {\n          const sessionDate = new Date(pom.giorno);\n          sessionDate.setHours(0, 0, 0, 0);\n          return sessionDate >= today;\n        });\n\n        console.log('Sessioni Pomodoro recuperate e filtrate:', this.poms);\n      } catch (error) {\n        console.error('Errore durante il recupero delle sessioni Pomodoro:', error);\n      }\n    },\n    \n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    }\n  }, \n  mounted() {\n    this.fetchPoms();\n  }\n};\n</script>\n\n\n<style scoped>\n.pomodoro-list {\n  max-width: 800px;\n  margin: 20px auto;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\nh1 {\n  text-align: center;\n  margin-bottom: 20px;\n  color: #343a40;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.pomodoro-item {\n  margin-bottom: 20px;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n  position: relative;\n  padding-right: 40px; \n}\n\n.pomodoro-item h2 {\n  color: #007bff;\n  margin: 0;\n}\n\n.pomodoro-item p {\n  margin: 5px 0;\n}\n\n.delete-btn {\n  position: absolute;\n  right: 10px;\n  bottom: 10px;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  font-size: 24px;\n}\n\n.delete-btn:hover {\n  color: red;\n}\n\n.no-poms {\n  text-align: center;\n  color: #6c757d;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAD5BC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;EAiBcD,KAAK,EAAC;;;uBAhBlBE,mBAAA,CAiBM,OAjBNC,UAiBM,G,0BAhBJC,mBAAA,CAA8C,YAA1C,uCAAqC,sBAEzCA,mBAAA,CAA0C,YAAtC,oBAAkB,GAAAC,gBAAA,CAAEC,KAAA,CAAAC,IAAI,CAACC,MAAM,kBAEzBF,KAAA,CAAAC,IAAI,CAACC,MAAM,Q,cAArBN,mBAAA,CAUK,MAhBTO,UAAA,I,kBAOMP,mBAAA,CAQKQ,SAAA,QAfXC,WAAA,CAOwBL,KAAA,CAAAC,IAAI,EAAXK,GAAG;yBAAdV,mBAAA,CAQK;MARoBD,GAAG,EAAEW,GAAG,CAACC,GAAG;MAAEb,KAAK,EAAC;kCAC3CI,mBAAA,CAA0B,YAAtB,mBAAiB,sBACrBA,mBAAA,CAAoD,Y,0BAAjDA,mBAAA,CAA0B,gBAAlB,WAAS,sBAT5BU,gBAAA,CASqC,GAAC,GAAAT,gBAAA,CAAGO,GAAG,CAACG,QAAQ,iB,GAC7CX,mBAAA,CAAqE,Y,0BAAlEA,mBAAA,CAAiC,gBAAzB,kBAAgB,sBAVnCU,gBAAA,CAU4C,GAAC,GAAAT,gBAAA,CAAGO,GAAG,CAACI,WAAW,IAAG,SAAO,gB,GACjEZ,mBAAA,CAAmE,Y,0BAAhEA,mBAAA,CAAgC,gBAAxB,iBAAe,sBAXlCU,gBAAA,CAW2C,GAAC,GAAAT,gBAAA,CAAGO,GAAG,CAACK,UAAU,IAAG,SAAO,gB,GAC/Db,mBAAA,CAA0D,Y,0BAAvDA,mBAAA,CAA6B,gBAArB,cAAY,sBAZ/BU,gBAAA,CAYwC,GAAC,GAAAT,gBAAA,CAAGO,GAAG,CAACM,WAAW,iB,GACnDd,mBAAA,CAAyE,Y,0BAAtEA,mBAAA,CAAqC,gBAA7B,sBAAoB,sBAbvCU,gBAAA,CAagD,GAAC,GAAAT,gBAAA,CAAGc,QAAA,CAAAC,UAAU,CAACR,GAAG,CAACS,MAAM,kB,GACjEjB,mBAAA,CAAuE;MAA9DkB,OAAK,EAAAC,MAAA,IAAEJ,QAAA,CAAAK,aAAa,CAACZ,GAAG,CAACC,GAAG;MAAGb,KAAK,EAAC;OAAa,KAAG,iBAdtEyB,UAAA,E;qDAiBIvB,mBAAA,CAA4E,KAA5EwB,UAA4E,EAAlD,gDAA8C,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}