{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"event-form\"\n};\nconst _hoisted_2 = {\n  id: \"studio-pausa\"\n};\nconst _hoisted_3 = {\n  class: \"controls\"\n};\nconst _hoisted_4 = {\n  class: \"button-row\"\n};\nconst _hoisted_5 = {\n  class: \"button-row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[17] || (_cache[17] = _createElementVNode(\"h1\", null, \"Sessione Pomodoro\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $setup.aggiungiPomodoro && $setup.aggiungiPomodoro(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"tempoStudio\"\n  }, \"Tempo di studio (minuti):\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newPom.tempoStudio = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newPom.tempoStudio]])]), _createElementVNode(\"div\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"tempoPausa\"\n  }, \"Tempo di pausa (minuti):\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newPom.tempoPausa = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newPom.tempoPausa]])]), _createElementVNode(\"div\", null, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    for: \"ripetizioni\"\n  }, \"Numero di ripetizioni:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.newPom.ripetizioni = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newPom.ripetizioni]])]), _createElementVNode(\"div\", null, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    for: \"giorno\"\n  }, \"Giorno della sessione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.newPom.giorno = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newPom.giorno]])]), _cache[16] || (_cache[16] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"rounded-btn\"\n  }, \"Aggiungi Sessione\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createElementVNode(\"p\", _hoisted_2, _toDisplayString($setup.statusMessage), 1 /* TEXT */), _cache[18] || (_cache[18] = _createElementVNode(\"div\", {\n    id: \"clock\",\n    class: \"blob\"\n  }, [_createElementVNode(\"div\", {\n    class: \"timer\",\n    id: \"timerDisplay\"\n  }, \"00:00\"), _createElementVNode(\"div\", {\n    class: \"progress-bar\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.skipPhase && $setup.skipPhase(...args))\n  }, \"Salta alla fase successiva\"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.restartCycle && $setup.restartCycle(...args))\n  }, \"Ricomincia ciclo\")]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $setup.endCycle && $setup.endCycle(...args))\n  }, \"Termina ciclo\"), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $setup.pauseTimer && $setup.pauseTimer(...args))\n  }, \"Stoppa timer\"), $setup.isPaused ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[9] || (_cache[9] = (...args) => $setup.resumeTimer && $setup.resumeTimer(...args))\n  }, \"Riprendi timer\")) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"button\", {\n    class: \"fixed-button\",\n    onClick: _cache[10] || (_cache[10] = (...args) => $setup.openModal && $setup.openModal(...args)),\n    style: {\n      \"background\": \"#f4a460\",\n      \"margin-bottom\": \"50px\"\n    }\n  }, \" Vedi Notifiche \"), _ctx.isOpenModal ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"modal\",\n    onClick: _cache[11] || (_cache[11] = _withModifiers((...args) => _ctx.closeNotificationModal && _ctx.closeNotificationModal(...args), [\"self\"]))\n  }, \" alert(\\\"ciao\\\"); \")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","id","_createElementBlock","_hoisted_1","_createElementVNode","onSubmit","_cache","_withModifiers","args","$setup","aggiungiPomodoro","for","type","$event","newPom","tempoStudio","min","required","tempoPausa","ripetizioni","giorno","_hoisted_2","_toDisplayString","statusMessage","_hoisted_3","_hoisted_4","onClick","skipPhase","restartCycle","_hoisted_5","endCycle","pauseTimer","isPaused","key","resumeTimer","_createCommentVNode","openModal","style","_ctx","isOpenModal","closeNotificationModal"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/pomodoroTempo.vue"],"sourcesContent":["<template>\n  <div class=\"event-form\">\n    <h1>Sessione Pomodoro</h1>\n    <form @submit.prevent=\"aggiungiPomodoro\">\n      <div>\n        <label for=\"tempoStudio\">Tempo di studio (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoStudio\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"tempoPausa\">Tempo di pausa (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoPausa\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"ripetizioni\">Numero di ripetizioni:</label>\n        <input type=\"number\" v-model=\"newPom.ripetizioni\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"giorno\">Giorno della sessione:</label>\n        <input type=\"date\" v-model=\"newPom.giorno\" required>\n      </div>\n\n      <button type=\"submit\" class=\"rounded-btn\">Aggiungi Sessione</button>\n    </form>\n\n    <p id=\"studio-pausa\">{{ statusMessage }}</p>\n\n    <div id=\"clock\" class=\"blob\">\n      <div class=\"timer\" id=\"timerDisplay\">00:00</div>\n      <div class=\"progress-bar\"></div>\n    </div>\n\n    <div class=\"controls\">\n  <div class=\"button-row\">\n    <button @click=\"skipPhase\">Salta alla fase successiva</button>\n    <button @click=\"restartCycle\">Ricomincia ciclo</button>\n  </div>\n  <div class=\"button-row\">\n    <button @click=\"endCycle\">Termina ciclo</button>\n    <button @click=\"pauseTimer\">Stoppa timer</button>\n    <button v-if=\"isPaused\" @click=\"resumeTimer\">Riprendi timer</button> \n  </div>\n</div>\n\n\n<button class=\"fixed-button\" @click=\"openModal\" style=\"background:#f4a460; margin-bottom: 50px;\">\n  Vedi Notifiche\n</button>\n\n<div v-if=\"isOpenModal\" class=\"modal\" @click.self=\"closeNotificationModal\">\n  alert(\"ciao\");\n</div>\n\n\n\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid'; \n\n\n\n\nexport default {\n  setup() {\n    const route = useRoute();\n    const isOpenModal = false;\n\n    const openModal = () => {\n      isModalOpen.value = true;  // Accedi al valore reattivo tramite .value\n    };\n    \n\n    \n\n\n    const cercaPomodoro = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    const response = await axios.get('/api/pomsGiornoCorrente', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        username,\n        giorno: currentDate\n      }\n    });\n\n    if (response.data) {\n       pomodoro.value = response.data; // Poich√© ora ricevi un oggetto singolo\n     let alertMessage = \"Ci sono sessioni Pomodoro programmate per oggi:\\n\";\n\n      console.log(response.data);\n\n      // Aggiungi i dettagli della sessione Pomodoro nell'alert\n     alertMessage += `cicli: ${pomodoro.value.ripetizioni},\\n  tempo studio: ${pomodoro.value.tempoStudio} minuti,  \\n tempo pausa: ${pomodoro.value.tempoPausa} minuti   \\n`;\n\n     alert(alertMessage);\n\n      const startSession = confirm(\"Vuoi iniziare la sessione Pomodoro?\");\n\n               if (startSession) {\n                sessionIDP.value = pomodoro.value.sessionID;\n                   console.log(\"Inizia la sessione Pomodoro\");\n                   console.log(sessionIDP);\n                   studyCycles.value = pomodoro.value.ripetizioni; // Imposta il numero di cicli\n        startStudyTimer(pomodoro.value.tempoStudio, studyCycles.value, pomodoro.value.tempoPausa);\n      pomEsistente = true;\n\n        await savePomDataIntermediGiaAggiunti(pomodoro);\n}\n    }\n  } catch (error) {\n    console.error(\"Errore:\", error);\n  }\n};\n\n\n\n\n\n    const newPom = ref({\n      username: localStorage.getItem('username') || 'Guest',\n      tempoStudio: 30,  \n      tempoPausa: 5,    \n      ripetizioni: 5,  \n      sessionID: uuidv4(),\n      giorno: ''\n    });\n    const statusMessage = ref('');\n    let studyCycles = ref(0); \n    let timerInterval = null;\n    let isStudyPhase = ref(true); \n    let remainingTime = ref(0); \n    let isPaused = ref(false); \n   // let isPomodoroSaved = false;\n    const sessionIDP = ref(null);\n    let pomEsistente = false;\n    const pomodoro = ref(null);\n\n    \n\n    onMounted(() => {\n      if (route.query.date) {\n        newPom.value.giorno = route.query.date;\n      }\n\n     \n     \n     \n    /*  let savePomDataFunction;\n\nwindow.addEventListener('beforeunload', () => {\n  if (!isPomodoroSaved) {\n    if (pomEsistente) {\n      // Usa una funzione wrapper per passare `pomodoro`\n      savePomDataFunction = () => savePomDataIntermediGiaAggiunti(pomodoro);\n      console.log(pomodoro);\n    } else {\n      savePomDataFunction = savePomDataIntermedi;\n    }\n    savePomDataFunction();\n  }\n});\n\nonBeforeUnmount(() => {\n  if (pomEsistente) {\n    // Rimuovi l'event listener passando la funzione senza eseguirla\n    window.removeEventListener('beforeunload', savePomDataFunction);\n  } else {\n    window.removeEventListener('beforeunload', savePomDataIntermedi);\n  }\n});*/\n\n\n  \n  \n  cercaPomodoro();\n \n\n\n});\n\n\n\n\n    \n  \n    const savePomDataIntermediGiaAggiunti = async (pomodoro) => {\n  try {\n    console.log('Dati pomodoro prima del salvataggio:', pomodoro);\n\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio = Math.floor(remainingTime.value / 60); // Tempo di studio completato\n      savedTempoPausa = pomodoro.value.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = pomodoro.value.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Tempo di pausa completato\n    }\n\n    console.log(savedTempoPausa);\n    console.log(savedTempoStudio);\n\n    // Crea il payload per il salvataggio\n    const pomData = {\n      username: pomodoro.value.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value,\n      sessionID: pomodoro.value.sessionID,\n      giorno: pomodoro.value.giorno\n    };\n\n    // Invia i dati al backend\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      \n    });\n    console.log('Salvataggio pomData:', pomData); \n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n\n\n    const savePomDataIntermedi = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio =Math.floor(remainingTime.value / 60); // Calcola il tempo di studio completato\n      savedTempoPausa = newPom.value.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = newPom.value.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Calcola il tempo di pausa completato\n    }\n\n    // Crea il payload da inviare\n    const pomData = {\n      username: newPom.value.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value, \n      sessionID: newPom.value.sessionID,\n      giorno: newPom.value.giorno\n    };\n\n    console.log('Salvataggio pomData:', pomData); // Aggiungi questo log per il debug\n\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n     \n\n\n\n\n\n\n    const aggiungiPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        const currentDate = new Date();\n        const selectedDate = new Date(newPom.value.giorno);\n\n        const response = await axios.post('/api/pomsPOST', newPom.value, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        console.log('Sessione pomodoro aggiunta:', response.data);\n\n        if (selectedDate.getTime() > currentDate.getTime()) {\n          statusMessage.value = 'Sessione pomodoro aggiunta per una data futura.';\n        } else {\n          studyCycles.value = newPom.value.ripetizioni;\n          startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n        }\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    };\n\n    const startStudyTimer = async (studyTime, cycles, pause) => {\n\n      if (cycles <= 0) {\n        try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Studio! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = studyTime * 60;\n      console.log(remainingTime.value);\n\n      isStudyPhase.value = true;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, studyTime, pause, cycles, startBreakTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const startBreakTimer = (pauseTime, cycles) => {\n      if (cycles <= 0) {\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Pausa! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = pauseTime * 60;\n      isStudyPhase.value = false;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, pauseTime, pauseTime, cycles, startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const updateTimer = (remaining, phaseTime, pauseTime, cycles, nextPhase) => {\n      if (remaining > 0) {\n        const minutes = Math.floor(remaining / 60);\n        const seconds = remaining % 60;\n        document.getElementById('timerDisplay').textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      } else {\n        clearInterval(timerInterval);\n        studyCycles.value--;\n        nextPhase(phaseTime, studyCycles.value);\n      }\n    };\n\n    const skipPhase = async () => {\n      clearInterval(timerInterval);\n\n      if (isStudyPhase.value) {\n        studyCycles.value--;\n        startBreakTimer(newPom.value.tempoPausa, studyCycles.value);\n      } else {\n        startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n      }\n\n      if (studyCycles.value <= 0) {\n        \n        try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n\n        \n        statusMessage.value = \"Ciclo completato!\";\n        document.getElementById('timerDisplay').textContent = \"00:00\";\n      }\n    };\n\n    const restartCycle = () => {\n      clearInterval(timerInterval);\n      studyCycles.value = newPom.value.ripetizioni;\n      startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n    };\n\n    const endCycle = async () => {\n  clearInterval(timerInterval);\n  studyCycles.value = 0;\n  try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n  statusMessage.value = 'Ciclo terminato manualmente.';\n  document.getElementById('timerDisplay').textContent = \"00:00\";\n\n \n};\n\n\n    const pauseTimer = () => {\n      clearInterval(timerInterval);\n      if(pomEsistente) {\n        console.log(\"pomodoro prima di chiamare f\",pomodoro);\n        savePomDataIntermediGiaAggiunti(pomodoro);\n      }\n      else{\n        console.log(\"pomodoro.value undefined\");\n        savePomDataIntermedi();}\n      \n     // isPomodoroSaved = true; \n      isPaused.value = true;\n    };\n\n    const resumeTimer = () => {\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, newPom.value.tempoStudio, newPom.value.tempoPausa, studyCycles.value, isStudyPhase.value ? startBreakTimer : startStudyTimer);\n        remainingTime.value--;\n      }, 1000); \n    };\n\n    return {\n      newPom,\n      statusMessage,\n      aggiungiPomodoro,\n      skipPhase,\n      restartCycle,\n      endCycle,\n      pauseTimer,\n      resumeTimer,\n      isPaused,\n    };\n    return { isModalOpen, openModal };\n  }\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n  width: 300px;\n  text-align: center;\n}\n\nbutton {\n  padding: 10px;\n  margin: 10px;\n  cursor: pointer;\n}\n\n.view-pomodoro-btn {\n  margin-top: 20px;\n  padding: 10px;\n}\n\n#clock {\n  margin-top: 20px;\n}\n\n.progress-bar {\n  width: 0;\n  height: 20px;\n  background-color: green;\n  transition: width 1s linear;\n}\n\n.timer {\n  font-size: 2em;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\nform {\n  max-width: 400px;\n  margin: auto;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 10px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\nbutton.rounded-btn {\n  border-radius: 20px; \n}\n\n\n.controls {\n  margin-top: 20px;\n  margin-bottom: 40px;\n  display: flex; \n  flex-wrap: wrap; \n  justify-content: center; \n}\n\n.controls button {\n  padding: 10px;\n  margin: 10px; \n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\n.button-row {\n  display: flex; \n  justify-content: space-between; \n  margin-bottom: 10px; \n}\n\n.controls button {\n  flex: 1; \n  margin-right: 10px; \n}\n\n.controls button:last-child {\n  margin-right: 0;\n}\n\n#clock {\n  margin-top: 40px;\n}\n\n@media (max-width: 600px) {\n  h1 {\n    margin-top: 30px; \n  }\n\n  .controls button {\n    margin-right: 10px; \n  }\n}\n\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}