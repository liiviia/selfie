{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport axios from 'axios';\nexport default {\n  name: 'NotificationManager',\n  data() {\n    return {\n      events: [],\n      currentDate: new Date(),\n      notifiedEvents: new Set(),\n      eventTimers: new Map(),\n      timeMachineDate: new Date()\n    };\n  },\n  methods: {\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n        const sendEmail = async () => {\n          try {\n            await axios.post('/api/events/email', {\n              emailRicevente,\n              eventDetails: event\n            }, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            console.log('Notifica email inviata con successo');\n          } catch (error) {\n            console.error('Errore durante invio della notifica email:', error);\n          }\n        };\n        await sendEmail();\n      } catch (error) {\n        console.error('Errore durante il processo di invio delle notifiche email:', error);\n      }\n    },\n    sendAlertNotification(event) {\n      if (this.notifiedEvents.has(event.id)) {\n        return;\n      }\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n      this.notifiedEvents.add(event.id);\n    },\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: username\n          }\n        });\n        console.log(response.data);\n        this.events = response.data;\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"Eventi trovati\");\n          console.log(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"Schedulazione notifiche...\");\n      console.log(\"Evento passato\", event);\n      if (this.eventTimers.has(event.id)) {\n        console.log(\"Timer già esistente per l'evento\", event.id);\n        clearTimeout(this.eventTimers.get(event.id));\n        this.eventTimers.delete(event.id);\n      }\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        //console.log(\"Time machine data:\", response.data);\n\n        const timeMachineNow = new Date(response.data).getTime();\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n        const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;\n        const eventTime = new Date(eventDateTimeString).getTime();\n        console.log(\"Event Time:\", eventTime);\n        if (isNaN(eventTime)) {\n          console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n          return;\n        }\n        const notificationTime = eventTime - event.notificationTime * 60000;\n        console.log(\"Notification Time:\", notificationTime);\n        const timeUntilNotification = notificationTime - timeMachineNow;\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n        if (timeUntilNotification > 0) {\n          const timerId = setTimeout(() => {\n            console.log(\"Triggering notifications for event:\", event.title);\n            this.triggerNotifications(event, emailRicevente);\n          }, timeUntilNotification);\n          this.eventTimers.set(event.id, timerId);\n        } else {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"Evento notifica meccanismo:\", event.notificationMechanism);\n      if (this.notifiedEvents.has(event.id)) {\n        return;\n      }\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n      this.notifiedEvents.add(event.id);\n    },\n    async fetchTimeMachineDate() {\n      try {\n        const response = await axios.get('/api/getTime-machine');\n        this.timeMachineDate = new Date(response.data);\n        console.log(\"Time Machine Date Updated:\", this.timeMachineDate);\n      } catch (error) {\n        console.error('Errore nel recupero della Time Machine:', error);\n      }\n    }\n  },\n  watch: {\n    timeMachineDate(newDate, oldDate) {\n      if (newDate !== oldDate) {\n        console.log(\"La data della Time Machine è cambiata!\");\n        this.fetchEvents();\n      }\n    }\n  },\n  mounted() {\n    this.requestNotificationPermission();\n    this.fetchEvents();\n    this.fetchTimeMachineDate();\n    setInterval(this.fetchTimeMachineDate, 1000);\n  },\n  beforeUnmount() {\n    this.eventTimers.forEach(timerId => clearTimeout(timerId));\n    this.eventTimers.clear();\n  }\n};","map":{"version":3,"names":["axios","name","data","events","currentDate","Date","notifiedEvents","Set","eventTimers","Map","timeMachineDate","methods","requestNotificationPermission","window","permesso","Notification","requestPermission","console","log","warn","error","sendEmailNotification","event","emailRicevente","token","sessionStorage","getItem","sendEmail","post","eventDetails","headers","Authorization","sendAlertNotification","has","id","alert","title","startTime","date","add","fetchEvents","username","localStorage","response","get","params","author","forEach","scheduleNotification","clearTimeout","delete","timeMachineNow","getTime","eventDateTimeString","slice","eventTime","isNaN","notificationTime","timeUntilNotification","timerId","setTimeout","triggerNotifications","set","notificationMechanism","includes","sendSystemNotification","fetchTimeMachineDate","watch","newDate","oldDate","mounted","setInterval","beforeUnmount","clear"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n\n  data() {\n    return {\n      events: [], \n      currentDate: new Date(), \n      notifiedEvents: new Set(),\n      eventTimers: new Map(),\n      timeMachineDate: new Date(), \n    };\n  },\n\n  methods: {\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n\n\n    async sendEmailNotification(event, emailRicevente) {\n  try {\n    const token = sessionStorage.getItem('token');\n    \n    const sendEmail = async () => {\n      try {\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`  \n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    };\n\n    await sendEmail();\n\n  } catch (error) {\n    console.error('Errore durante il processo di invio delle notifiche email:', error);\n  }\n},\n\n\nsendAlertNotification(event) {\n  if (this.notifiedEvents.has(event.id)) {\n    return;\n  }\n  window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n  this.notifiedEvents.add(event.id);\n},\n\n\n\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username'); \n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n        console.log(response.data);\n        \n        this.events = response.data;\n        \n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"Eventi trovati\");\n       console.log(event,emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n\n    async scheduleNotification(event, emailRicevente) {\n  console.log(\"Schedulazione notifiche...\");\n  console.log(\"Evento passato\", event);\n\n  if (this.eventTimers.has(event.id)) {\n    console.log(\"Timer già esistente per l'evento\", event.id);\n    clearTimeout(this.eventTimers.get(event.id));  \n    this.eventTimers.delete(event.id);  \n  }\n\n  try {\n    console.log(\"Chiamata API iniziata...\");\n    const response = await axios.get('/api/getTime-machine');\n    //console.log(\"Time machine data:\", response.data);\n\n    const timeMachineNow = new Date(response.data).getTime();\n    console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n    const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;\n    const eventTime = new Date(eventDateTimeString).getTime();\n    console.log(\"Event Time:\", eventTime);\n\n    if (isNaN(eventTime)) {\n      console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n      return;\n    }\n\n    const notificationTime = eventTime - event.notificationTime * 60000;\n    console.log(\"Notification Time:\", notificationTime);\n\n    const timeUntilNotification = notificationTime - timeMachineNow;\n    console.log(\"Time Until Notification:\", timeUntilNotification);\n\n    if (timeUntilNotification > 0) {\n      const timerId = setTimeout(() => {\n        console.log(\"Triggering notifications for event:\", event.title);\n        this.triggerNotifications(event, emailRicevente);\n      }, timeUntilNotification);\n\n      this.eventTimers.set(event.id, timerId);\n    } else {\n      console.warn(\"L'orario della notifica è già passato o non è valido.\");\n    }\n  } catch (error) {\n    console.error(\"Errore durante la richiesta della Time Machine:\", error);\n  }\n},\n\n\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"Evento notifica meccanismo:\", event.notificationMechanism);\n\n      if (this.notifiedEvents.has(event.id)) {\n        return;\n      }\n\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n\n      this.notifiedEvents.add(event.id);\n    },\n\n    async fetchTimeMachineDate() {\n      try {\n        const response = await axios.get('/api/getTime-machine');\n        this.timeMachineDate = new Date(response.data);\n        console.log(\"Time Machine Date Updated:\", this.timeMachineDate);\n      } catch (error) {\n        console.error('Errore nel recupero della Time Machine:', error);\n      }\n    },\n  },\n\n  watch: {\n    timeMachineDate(newDate, oldDate) {\n      if (newDate !== oldDate) {\n        console.log(\"La data della Time Machine è cambiata!\");\n        this.fetchEvents(); \n      }\n    }\n  },\n\n  mounted() {\n    this.requestNotificationPermission(); \n    this.fetchEvents();  \n    \n    this.fetchTimeMachineDate();\n\n    setInterval(this.fetchTimeMachineDate, 1000); \n  },\n\n  beforeUnmount() {\n    this.eventTimers.forEach(timerId => clearTimeout(timerId));\n    this.eventTimers.clear();\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}