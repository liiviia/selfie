{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  setup() {\n    const route = useRoute();\n    const cercaPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const currentDate = new Date().toISOString().split('T')[0];\n        const response = await axios.get('/api/pomsGiornoCorrente', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username,\n            giorno: currentDate\n          }\n        });\n        if (response.data) {\n          pomodoro.value = response.data; // PoichÃ© ora ricevi un oggetto singolo\n          let alertMessage = \"Ci sono sessioni Pomodoro programmate per oggi:\\n\";\n          console.log(response.data);\n\n          // Aggiungi i dettagli della sessione Pomodoro nell'alert\n          // alertMessage += `cicli: ${pomodoro.value.ripetizioni},\\n  tempo studio: ${pomodoro.value.tempoStudio} minuti,  \\n tempo pausa: ${pomodoro.value.tempoPausa} minuti   \\n`;\n\n          //   alert(alertMessage);\n\n          const startSession = confirm(\"Vuoi iniziare la sessione Pomodoro?\");\n          if (startSession) {\n            sessionIDP.value = pomodoro.value.sessionID;\n            console.log(\"Inizia la sessione Pomodoro\");\n            console.log(sessionIDP);\n            studyCycles.value = pomodoro.value.ripetizioni; // Imposta il numero di cicli\n            startStudyTimer(pomodoro.value.tempoStudio, studyCycles.value, pomodoro.value.tempoPausa);\n            pomEsistente = true;\n            await savePomDataIntermediGiaAggiunti(pomodoro);\n          }\n        }\n      } catch (error) {\n        console.error(\"Errore:\", error);\n      }\n    };\n    const newPom = ref({\n      username: localStorage.getItem('username') || 'Guest',\n      tempoStudio: 30,\n      tempoPausa: 5,\n      ripetizioni: 5,\n      sessionID: uuidv4(),\n      giorno: ''\n    });\n    const statusMessage = ref('');\n    let studyCycles = ref(0);\n    let timerInterval = null;\n    let isStudyPhase = ref(true);\n    let remainingTime = ref(0);\n    let isPaused = ref(false);\n    // let isPomodoroSaved = false;\n    const sessionIDP = ref(null);\n    let pomEsistente = false;\n    const pomodoro = ref(null);\n    let pomodoroSalvato = null; // Per memorizzare i dettagli del pomodoro salvato\n    let isModalVisible = false;\n    onMounted(() => {\n      if (route.query.date) {\n        newPom.value.giorno = route.query.date;\n      }\n\n      /*  let savePomDataFunction;\n      window.addEventListener('beforeunload', () => {\n      if (!isPomodoroSaved) {\n      if (pomEsistente) {\n        // Usa una funzione wrapper per passare `pomodoro`\n        savePomDataFunction = () => savePomDataIntermediGiaAggiunti(pomodoro);\n        console.log(pomodoro);\n      } else {\n        savePomDataFunction = savePomDataIntermedi;\n      }\n      savePomDataFunction();\n      }\n      });\n      onBeforeUnmount(() => {\n      if (pomEsistente) {\n      // Rimuovi l'event listener passando la funzione senza eseguirla\n      window.removeEventListener('beforeunload', savePomDataFunction);\n      } else {\n      window.removeEventListener('beforeunload', savePomDataIntermedi);\n      }\n      });*/\n\n      cercaPomodoro();\n    });\n    const openPomodoroModal = () => {\n      cercaPomodoro(); // Chiamata per cercare il pomodoro salvato\n      isModalVisible.value = true; // Mostra il modal\n    };\n    const closePomodoroModal = () => {\n      isModalVisible.value = false; // Nascondi il modal\n    };\n    const savePomDataIntermediGiaAggiunti = async pomodoro => {\n      try {\n        console.log('Dati pomodoro prima del salvataggio:', pomodoro);\n        const token = sessionStorage.getItem('token');\n\n        // Definisci le variabili per il tempo rimanente\n        let savedTempoStudio;\n        let savedTempoPausa;\n\n        // Se siamo in fase di studio\n        if (isStudyPhase.value) {\n          savedTempoStudio = Math.floor(remainingTime.value / 60); // Tempo di studio completato\n          savedTempoPausa = pomodoro.value.tempoPausa; // Usa il tempo di pausa predefinito\n        } else {\n          // Se siamo in pausa\n          savedTempoStudio = pomodoro.value.tempoStudio; // Usa il tempo di studio predefinito\n          savedTempoPausa = Math.floor(remainingTime.value / 60); // Tempo di pausa completato\n        }\n        console.log(savedTempoPausa);\n        console.log(savedTempoStudio);\n\n        // Crea il payload per il salvataggio\n        const pomData = {\n          username: pomodoro.value.username,\n          tempoStudio: savedTempoStudio,\n          tempoPausa: savedTempoPausa,\n          ripetizioni: studyCycles.value,\n          sessionID: pomodoro.value.sessionID,\n          giorno: pomodoro.value.giorno\n        };\n\n        // Invia i dati al backend\n        await axios.post('/api/savePomDataIntermedi', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Salvataggio pomData:', pomData);\n      } catch (error) {\n        console.error('Errore nel salvataggio dei dati:', error);\n      }\n    };\n    const savePomDataIntermedi = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        // Definisci le variabili per il tempo rimanente\n        let savedTempoStudio;\n        let savedTempoPausa;\n\n        // Se siamo in fase di studio\n        if (isStudyPhase.value) {\n          savedTempoStudio = Math.floor(remainingTime.value / 60); // Calcola il tempo di studio completato\n          savedTempoPausa = newPom.value.tempoPausa; // Usa il tempo di pausa predefinito\n        } else {\n          // Se siamo in pausa\n          savedTempoStudio = newPom.value.tempoStudio; // Usa il tempo di studio predefinito\n          savedTempoPausa = Math.floor(remainingTime.value / 60); // Calcola il tempo di pausa completato\n        }\n\n        // Crea il payload da inviare\n        const pomData = {\n          username: newPom.value.username,\n          tempoStudio: savedTempoStudio,\n          tempoPausa: savedTempoPausa,\n          ripetizioni: studyCycles.value,\n          sessionID: newPom.value.sessionID,\n          giorno: newPom.value.giorno\n        };\n        console.log('Salvataggio pomData:', pomData); // Aggiungi questo log per il debug\n\n        await axios.post('/api/savePomDataIntermedi', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } catch (error) {\n        console.error('Errore nel salvataggio dei dati:', error);\n      }\n    };\n    const aggiungiPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        const currentDate = new Date();\n        const selectedDate = new Date(newPom.value.giorno);\n        const response = await axios.post('/api/pomsPOST', newPom.value, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Sessione pomodoro aggiunta:', response.data);\n        if (selectedDate.getTime() > currentDate.getTime()) {\n          statusMessage.value = 'Sessione pomodoro aggiunta per una data futura.';\n        } else {\n          studyCycles.value = newPom.value.ripetizioni;\n          startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n        }\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    };\n    const startStudyTimer = async (studyTime, cycles, pause) => {\n      if (cycles <= 0) {\n        try {\n          const token = sessionStorage.getItem('token');\n\n          // Crea l'oggetto pomodoro da inviare\n          const pomData = {\n            sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n            terminato: true\n          };\n\n          // Fai la richiesta PATCH\n          await axios.patch('/api/pomsUpdateFinito', pomData, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          console.log('Ciclo marcato come terminato nel backend.');\n        } catch (error) {\n          console.error('Errore nell\\'aggiornamento del ciclo:', error);\n        }\n        alert('Ciclo completato!');\n        return;\n      }\n      statusMessage.value = `Studio! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = studyTime * 60;\n      console.log(remainingTime.value);\n      isStudyPhase.value = true;\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, studyTime, pause, cycles, startBreakTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    const startBreakTimer = (pauseTime, cycles) => {\n      if (cycles <= 0) {\n        alert('Ciclo completato!');\n        return;\n      }\n      statusMessage.value = `Pausa! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = pauseTime * 60;\n      isStudyPhase.value = false;\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, pauseTime, pauseTime, cycles, startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    const updateTimer = (remaining, phaseTime, pauseTime, cycles, nextPhase) => {\n      if (remaining > 0) {\n        const minutes = Math.floor(remaining / 60);\n        const seconds = remaining % 60;\n        document.getElementById('timerDisplay').textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      } else {\n        clearInterval(timerInterval);\n        studyCycles.value--;\n        nextPhase(phaseTime, studyCycles.value);\n      }\n    };\n    const skipPhase = async () => {\n      clearInterval(timerInterval);\n      if (isStudyPhase.value) {\n        studyCycles.value--;\n        startBreakTimer(newPom.value.tempoPausa, studyCycles.value);\n      } else {\n        startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n      }\n      if (studyCycles.value <= 0) {\n        try {\n          const token = sessionStorage.getItem('token');\n\n          // Crea l'oggetto pomodoro da inviare\n          const pomData = {\n            sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n            terminato: true\n          };\n\n          // Fai la richiesta PATCH\n          await axios.patch('/api/pomsUpdateFinito', pomData, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          console.log('Ciclo marcato come terminato nel backend.');\n        } catch (error) {\n          console.error('Errore nell\\'aggiornamento del ciclo:', error);\n        }\n        statusMessage.value = \"Ciclo completato!\";\n        document.getElementById('timerDisplay').textContent = \"00:00\";\n      }\n    };\n    const restartCycle = () => {\n      clearInterval(timerInterval);\n      studyCycles.value = newPom.value.ripetizioni;\n      startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n    };\n    const endCycle = async () => {\n      clearInterval(timerInterval);\n      studyCycles.value = 0;\n      try {\n        const token = sessionStorage.getItem('token');\n\n        // Crea l'oggetto pomodoro da inviare\n        const pomData = {\n          sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n          terminato: true\n        };\n\n        // Fai la richiesta PATCH\n        await axios.patch('/api/pomsUpdateFinito', pomData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Ciclo marcato come terminato nel backend.');\n      } catch (error) {\n        console.error('Errore nell\\'aggiornamento del ciclo:', error);\n      }\n      statusMessage.value = 'Ciclo terminato manualmente.';\n      document.getElementById('timerDisplay').textContent = \"00:00\";\n    };\n    const pauseTimer = () => {\n      clearInterval(timerInterval);\n      if (pomEsistente) {\n        console.log(\"pomodoro prima di chiamare f\", pomodoro);\n        savePomDataIntermediGiaAggiunti(pomodoro);\n      } else {\n        console.log(\"pomodoro.value undefined\");\n        savePomDataIntermedi();\n      }\n\n      // isPomodoroSaved = true; \n      isPaused.value = true;\n    };\n    const resumeTimer = () => {\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, newPom.value.tempoStudio, newPom.value.tempoPausa, studyCycles.value, isStudyPhase.value ? startBreakTimer : startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n    return {\n      newPom,\n      statusMessage,\n      aggiungiPomodoro,\n      skipPhase,\n      restartCycle,\n      endCycle,\n      pauseTimer,\n      resumeTimer,\n      isPaused\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","axios","v4","uuidv4","setup","route","cercaPomodoro","token","sessionStorage","getItem","username","localStorage","currentDate","Date","toISOString","split","response","get","headers","Authorization","params","giorno","data","pomodoro","value","alertMessage","console","log","startSession","confirm","sessionIDP","sessionID","studyCycles","ripetizioni","startStudyTimer","tempoStudio","tempoPausa","pomEsistente","savePomDataIntermediGiaAggiunti","error","newPom","statusMessage","timerInterval","isStudyPhase","remainingTime","isPaused","pomodoroSalvato","isModalVisible","query","date","openPomodoroModal","closePomodoroModal","savedTempoStudio","savedTempoPausa","Math","floor","pomData","post","savePomDataIntermedi","aggiungiPomodoro","selectedDate","getTime","studyTime","cycles","pause","terminato","patch","alert","clearInterval","setInterval","updateTimer","startBreakTimer","pauseTime","remaining","phaseTime","nextPhase","minutes","seconds","document","getElementById","textContent","String","padStart","skipPhase","restartCycle","endCycle","pauseTimer","resumeTimer"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/views/pomodoroTempo.vue"],"sourcesContent":["<template>\n  <div class=\"event-form\">\n    <h1>Sessione Pomodoro</h1>\n    <form @submit.prevent=\"aggiungiPomodoro\">\n      <div>\n        <label for=\"tempoStudio\">Tempo di studio (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoStudio\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"tempoPausa\">Tempo di pausa (minuti):</label>\n        <input type=\"number\" v-model=\"newPom.tempoPausa\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"ripetizioni\">Numero di ripetizioni:</label>\n        <input type=\"number\" v-model=\"newPom.ripetizioni\" min=\"1\" required>\n      </div>\n\n      <div>\n        <label for=\"giorno\">Giorno della sessione:</label>\n        <input type=\"date\" v-model=\"newPom.giorno\" required>\n      </div>\n\n      <button type=\"submit\" class=\"rounded-btn\">Aggiungi Sessione</button>\n    </form>\n\n    <p id=\"studio-pausa\">{{ statusMessage }}</p>\n\n    <div id=\"clock\" class=\"blob\">\n      <div class=\"timer\" id=\"timerDisplay\">00:00</div>\n      <div class=\"progress-bar\"></div>\n    </div>\n\n    <div class=\"controls\">\n  <div class=\"button-row\">\n    <button @click=\"skipPhase\">Salta alla fase successiva</button>\n    <button @click=\"restartCycle\">Ricomincia ciclo</button>\n  </div>\n  <div class=\"button-row\">\n    <button @click=\"endCycle\">Termina ciclo</button>\n    <button @click=\"pauseTimer\">Stoppa timer</button>\n    <button v-if=\"isPaused\" @click=\"resumeTimer\">Riprendi timer</button> \n  </div>\n</div>\n\n\n\n\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid'; \n\n\nexport default {\n  setup() {\n    const route = useRoute();\n\n\n    const cercaPomodoro = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    const response = await axios.get('/api/pomsGiornoCorrente', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        username,\n        giorno: currentDate\n      }\n    });\n\n    if (response.data) {\n       pomodoro.value = response.data; // PoichÃ© ora ricevi un oggetto singolo\n     let alertMessage = \"Ci sono sessioni Pomodoro programmate per oggi:\\n\";\n\n      console.log(response.data);\n\n      // Aggiungi i dettagli della sessione Pomodoro nell'alert\n     // alertMessage += `cicli: ${pomodoro.value.ripetizioni},\\n  tempo studio: ${pomodoro.value.tempoStudio} minuti,  \\n tempo pausa: ${pomodoro.value.tempoPausa} minuti   \\n`;\n\n   //   alert(alertMessage);\n\n      const startSession = confirm(\"Vuoi iniziare la sessione Pomodoro?\");\n\n               if (startSession) {\n                sessionIDP.value = pomodoro.value.sessionID;\n                   console.log(\"Inizia la sessione Pomodoro\");\n                   console.log(sessionIDP);\n                   studyCycles.value = pomodoro.value.ripetizioni; // Imposta il numero di cicli\n        startStudyTimer(pomodoro.value.tempoStudio, studyCycles.value, pomodoro.value.tempoPausa);\n      pomEsistente = true;\n\n        await savePomDataIntermediGiaAggiunti(pomodoro);\n}\n    }\n  } catch (error) {\n    console.error(\"Errore:\", error);\n  }\n};\n\n\n\n\n\n    const newPom = ref({\n      username: localStorage.getItem('username') || 'Guest',\n      tempoStudio: 30,  \n      tempoPausa: 5,    \n      ripetizioni: 5,  \n      sessionID: uuidv4(),\n      giorno: ''\n    });\n    const statusMessage = ref('');\n    let studyCycles = ref(0); \n    let timerInterval = null;\n    let isStudyPhase = ref(true); \n    let remainingTime = ref(0); \n    let isPaused = ref(false); \n   // let isPomodoroSaved = false;\n    const sessionIDP = ref(null);\n    let pomEsistente = false;\n    const pomodoro = ref(null);\n\n    let pomodoroSalvato= null;  // Per memorizzare i dettagli del pomodoro salvato\n    let isModalVisible= false;\n\n    onMounted(() => {\n      if (route.query.date) {\n        newPom.value.giorno = route.query.date;\n      }\n\n     \n     \n     \n    /*  let savePomDataFunction;\n\nwindow.addEventListener('beforeunload', () => {\n  if (!isPomodoroSaved) {\n    if (pomEsistente) {\n      // Usa una funzione wrapper per passare `pomodoro`\n      savePomDataFunction = () => savePomDataIntermediGiaAggiunti(pomodoro);\n      console.log(pomodoro);\n    } else {\n      savePomDataFunction = savePomDataIntermedi;\n    }\n    savePomDataFunction();\n  }\n});\n\nonBeforeUnmount(() => {\n  if (pomEsistente) {\n    // Rimuovi l'event listener passando la funzione senza eseguirla\n    window.removeEventListener('beforeunload', savePomDataFunction);\n  } else {\n    window.removeEventListener('beforeunload', savePomDataIntermedi);\n  }\n});*/\n\n\n  \n  \n  cercaPomodoro();\n \n\n\n});\n\n\n\nconst openPomodoroModal = () => {\n      cercaPomodoro();  // Chiamata per cercare il pomodoro salvato\n      isModalVisible.value = true;  // Mostra il modal\n    };\n\n    const closePomodoroModal = () => {\n      isModalVisible.value = false;  // Nascondi il modal\n    };\n\n    \n  \n    const savePomDataIntermediGiaAggiunti = async (pomodoro) => {\n  try {\n    console.log('Dati pomodoro prima del salvataggio:', pomodoro);\n\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio = Math.floor(remainingTime.value / 60); // Tempo di studio completato\n      savedTempoPausa = pomodoro.value.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = pomodoro.value.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Tempo di pausa completato\n    }\n\n    console.log(savedTempoPausa);\n    console.log(savedTempoStudio);\n\n    // Crea il payload per il salvataggio\n    const pomData = {\n      username: pomodoro.value.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value,\n      sessionID: pomodoro.value.sessionID,\n      giorno: pomodoro.value.giorno\n    };\n\n    // Invia i dati al backend\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      \n    });\n    console.log('Salvataggio pomData:', pomData); \n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n\n\n    const savePomDataIntermedi = async () => {\n  try {\n    const token = sessionStorage.getItem('token');\n    \n    // Definisci le variabili per il tempo rimanente\n    let savedTempoStudio;\n    let savedTempoPausa;\n\n    // Se siamo in fase di studio\n    if (isStudyPhase.value) {\n      savedTempoStudio =Math.floor(remainingTime.value / 60); // Calcola il tempo di studio completato\n      savedTempoPausa = newPom.value.tempoPausa; // Usa il tempo di pausa predefinito\n    } else { // Se siamo in pausa\n      savedTempoStudio = newPom.value.tempoStudio; // Usa il tempo di studio predefinito\n      savedTempoPausa = Math.floor(remainingTime.value / 60); // Calcola il tempo di pausa completato\n    }\n\n    // Crea il payload da inviare\n    const pomData = {\n      username: newPom.value.username,\n      tempoStudio: savedTempoStudio,\n      tempoPausa: savedTempoPausa,\n      ripetizioni: studyCycles.value, \n      sessionID: newPom.value.sessionID,\n      giorno: newPom.value.giorno\n    };\n\n    console.log('Salvataggio pomData:', pomData); // Aggiungi questo log per il debug\n\n    await axios.post('/api/savePomDataIntermedi', pomData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  } catch (error) {\n    console.error('Errore nel salvataggio dei dati:', error);\n  }\n};\n\n\n\n\n     \n\n\n\n\n\n\n    const aggiungiPomodoro = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n\n        const currentDate = new Date();\n        const selectedDate = new Date(newPom.value.giorno);\n\n        const response = await axios.post('/api/pomsPOST', newPom.value, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        console.log('Sessione pomodoro aggiunta:', response.data);\n\n        if (selectedDate.getTime() > currentDate.getTime()) {\n          statusMessage.value = 'Sessione pomodoro aggiunta per una data futura.';\n        } else {\n          studyCycles.value = newPom.value.ripetizioni;\n          startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n        }\n      } catch (error) {\n        console.error('Errore:', error);\n      }\n    };\n\n    const startStudyTimer = async (studyTime, cycles, pause) => {\n\n      if (cycles <= 0) {\n        try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Studio! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = studyTime * 60;\n      console.log(remainingTime.value);\n\n      isStudyPhase.value = true;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, studyTime, pause, cycles, startBreakTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const startBreakTimer = (pauseTime, cycles) => {\n      if (cycles <= 0) {\n        alert('Ciclo completato!');\n        return;\n      }\n\n      statusMessage.value = `Pausa! Numero cicli rimanenti: ${cycles}`;\n      remainingTime.value = pauseTime * 60;\n      isStudyPhase.value = false;\n      isPaused.value = false;\n\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, pauseTime, pauseTime, cycles, startStudyTimer);\n        remainingTime.value--;\n      }, 1000);\n    };\n\n    const updateTimer = (remaining, phaseTime, pauseTime, cycles, nextPhase) => {\n      if (remaining > 0) {\n        const minutes = Math.floor(remaining / 60);\n        const seconds = remaining % 60;\n        document.getElementById('timerDisplay').textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      } else {\n        clearInterval(timerInterval);\n        studyCycles.value--;\n        nextPhase(phaseTime, studyCycles.value);\n      }\n    };\n\n    const skipPhase = async () => {\n      clearInterval(timerInterval);\n\n      if (isStudyPhase.value) {\n        studyCycles.value--;\n        startBreakTimer(newPom.value.tempoPausa, studyCycles.value);\n      } else {\n        startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n      }\n\n      if (studyCycles.value <= 0) {\n        \n        try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n\n        \n        statusMessage.value = \"Ciclo completato!\";\n        document.getElementById('timerDisplay').textContent = \"00:00\";\n      }\n    };\n\n    const restartCycle = () => {\n      clearInterval(timerInterval);\n      studyCycles.value = newPom.value.ripetizioni;\n      startStudyTimer(newPom.value.tempoStudio, studyCycles.value, newPom.value.tempoPausa);\n    };\n\n    const endCycle = async () => {\n  clearInterval(timerInterval);\n  studyCycles.value = 0;\n  try {\n  const token = sessionStorage.getItem('token');\n  \n  // Crea l'oggetto pomodoro da inviare\n  const pomData = {\n    sessionID: pomEsistente ? pomodoro.value.sessionID : newPom.value.sessionID,\n    terminato: true\n  };\n\n  // Fai la richiesta PATCH\n  await axios.patch('/api/pomsUpdateFinito', pomData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  console.log('Ciclo marcato come terminato nel backend.');\n} catch (error) {\n  console.error('Errore nell\\'aggiornamento del ciclo:', error);\n}\n  statusMessage.value = 'Ciclo terminato manualmente.';\n  document.getElementById('timerDisplay').textContent = \"00:00\";\n\n \n};\n\n\n    const pauseTimer = () => {\n      clearInterval(timerInterval);\n      if(pomEsistente) {\n        console.log(\"pomodoro prima di chiamare f\",pomodoro);\n        savePomDataIntermediGiaAggiunti(pomodoro);\n      }\n      else{\n        console.log(\"pomodoro.value undefined\");\n        savePomDataIntermedi();}\n      \n     // isPomodoroSaved = true; \n      isPaused.value = true;\n    };\n\n    const resumeTimer = () => {\n      isPaused.value = false;\n      clearInterval(timerInterval);\n      timerInterval = setInterval(() => {\n        updateTimer(remainingTime.value, newPom.value.tempoStudio, newPom.value.tempoPausa, studyCycles.value, isStudyPhase.value ? startBreakTimer : startStudyTimer);\n        remainingTime.value--;\n      }, 1000); \n    };\n\n    return {\n      newPom,\n      statusMessage,\n      aggiungiPomodoro,\n      skipPhase,\n      restartCycle,\n      endCycle,\n      pauseTimer,\n      resumeTimer,\n      isPaused\n    };\n  }\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n  width: 300px;\n  text-align: center;\n}\n\nbutton {\n  padding: 10px;\n  margin: 10px;\n  cursor: pointer;\n}\n\n.view-pomodoro-btn {\n  margin-top: 20px;\n  padding: 10px;\n}\n\n#clock {\n  margin-top: 20px;\n}\n\n.progress-bar {\n  width: 0;\n  height: 20px;\n  background-color: green;\n  transition: width 1s linear;\n}\n\n.timer {\n  font-size: 2em;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\nform {\n  max-width: 400px;\n  margin: auto;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 10px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\nbutton.rounded-btn {\n  border-radius: 20px; \n}\n\n\n.controls {\n  margin-top: 20px;\n  margin-bottom: 40px;\n  display: flex; \n  flex-wrap: wrap; \n  justify-content: center; \n}\n\n.controls button {\n  padding: 10px;\n  margin: 10px; \n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\n.button-row {\n  display: flex; \n  justify-content: space-between; \n  margin-bottom: 10px; \n}\n\n.controls button {\n  flex: 1; \n  margin-right: 10px; \n}\n\n.controls button:last-child {\n  margin-right: 0;\n}\n\n#clock {\n  margin-top: 40px;\n}\n\n@media (max-width: 600px) {\n  h1 {\n    margin-top: 30px; \n  }\n\n  .controls button {\n    margin-right: 10px; \n  }\n}\n\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}