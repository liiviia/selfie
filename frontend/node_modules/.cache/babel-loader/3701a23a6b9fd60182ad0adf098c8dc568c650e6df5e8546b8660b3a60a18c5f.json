{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Non Ã¨ necessario visualizzare notifiche in una lista, ma si possono processare qui -->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'; // Importa Axios\nimport moment from 'moment-timezone';\n\nexport default {\n  data() {\n    return {\n      intervalId: null, // Per memorizzare l'ID dell'intervallo\n    };\n  },\n  created() {\n    \n\nconst timeMachine = async () => {\n  try {\n        const response = await axios.get('/api/getTime-machine'); \n        console.log(\"get time machine\", response.data);\n\n        const localDate = moment(response.data.date).tz('Europe/Rome', true).format();\n        console.log(\"Data convertita nel fuso orario locale:\", localDate);\n    } catch (error) {\n        console.error('Errore nella richiesta GET:', error);\n    }\n\n};\n  /*  const fetchAlerts = async () => {\n      try {\n        const loggedInUser = localStorage.getItem('username');\n\n        // Utilizza Axios per fare la richiesta GET\n        const response = await axios.get(`/alerts?userNome=${loggedInUser}`);\n        console.log(\"Risposta Axios:\", response);\n\n        if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n          // Quando ci sono notifiche, visualizzale subito come alert()\n          response.data.forEach(alert => {\n            alert(`TITOLO: ${alert.title}\\nData: ${alert.date}\\nOra di inizio: ${alert.startTime}`);\n          });\n        } else {\n          console.log('Nessuna notifica per l\\'utente');\n        }\n      } catch (error) {\n        // Gestisci gli errori\n        console.error('Errore nella richiesta Axios:', error);\n      }\n    };*/\n\n    // Esegui `fetchAlerts` ogni secondo\n    this.intervalId = setInterval( timeMachine, 1000); // 1000ms = 1 secondo\n  },\n\n  beforeUnmount() {\n    // Quando il componente viene distrutto, cancella l'intervallo\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* Stilizzazione personalizzata, se necessaria */\n</style>\n"],"mappings":";;uBACEA,mBAAA,CAEM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}