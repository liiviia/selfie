{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      poms: []\n    };\n  },\n  methods: {\n    async handleBeforeUnload() {\n      const sessionData = {\n        username: localStorage.getItem('username'),\n        giorno: new Date().toISOString(),\n        tempoStudio: this.tempoStudio,\n        // Riferimento ai dati attuali\n        tempoPausa: this.tempoPausa,\n        ripetizioni: this.ripetizioni,\n        remainingTime: this.remainingTime,\n        isStudyPhase: this.isStudyPhase,\n        studyCycles: this.studyCycles\n      };\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/poms/saveIncomplete', sessionData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Sessione incompleta salvata.');\n      } catch (error) {\n        console.error('Errore nel salvataggio della sessione incompleta:', error);\n      }\n    },\n    confirmDelete(id) {\n      if (confirm(\"Sicuro di voler eliminare questa sessione Pomodoro?\")) {\n        this.deletePomodoro(id);\n      }\n    },\n    async deletePomodoro(id) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/pomRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.fetchPoms();\n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della sessione:', error);\n      }\n    },\n    async fetchPoms() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            username: username\n          }\n        });\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        this.poms = response.data.filter(pom => {\n          const sessionDate = new Date(pom.giorno);\n          sessionDate.setHours(0, 0, 0, 0);\n          return sessionDate >= today;\n        });\n        console.log('Sessioni Pomodoro recuperate e filtrate:', this.poms);\n      } catch (error) {\n        console.error('Errore durante il recupero delle sessioni Pomodoro:', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    }\n  },\n  mounted() {\n    this.fetchPoms();\n    window.addEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  }\n};","map":{"version":3,"names":["axios","data","poms","methods","handleBeforeUnload","sessionData","username","localStorage","getItem","giorno","Date","toISOString","tempoStudio","tempoPausa","ripetizioni","remainingTime","isStudyPhase","studyCycles","token","sessionStorage","post","headers","Authorization","console","log","error","confirmDelete","id","confirm","deletePomodoro","delete","fetchPoms","response","get","params","today","setHours","filter","pom","sessionDate","formatDate","date","toLocaleDateString","mounted","window","addEventListener","beforeUnmount","removeEventListener"],"sources":["/home/livia/Scrivania/TW/progettoTWvue/frontend/src/views/pomSession.vue"],"sourcesContent":["<template>\n  <div class=\"pomodoro-list\">\n    <h1>Lista delle Sessioni Pomodoro Salvate</h1>\n\n    <h2>Numero Pomodori : {{poms.length}}</h2>\n\n    <ul v-if=\"poms.length > 0\">\n      <li v-for=\"pom in poms\" :key=\"pom._id\" class=\"pomodoro-item\">\n        <h2>Sessione Pomodoro</h2>\n        <p><strong>Username:</strong> {{ pom.username }}</p>\n        <p><strong>Tempo di Studio:</strong> {{ pom.tempoStudio }} minuti</p>\n        <p><strong>Tempo di Pausa:</strong> {{ pom.tempoPausa }} minuti</p>\n        <p><strong>Ripetizioni:</strong> {{ pom.ripetizioni }}</p>\n        <p><strong>Data della Sessione:</strong> {{ formatDate(pom.giorno) }}</p>\n        <button @click=\"confirmDelete(pom._id)\" class=\"delete-btn\">üóëÔ∏è</button>\n      </li>\n    </ul>\n    <p v-else class=\"no-poms\">Non ci sono sessioni Pomodoro da visualizzare.</p>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      poms: []\n    };\n  },\n  methods: {\n\n    async handleBeforeUnload() {\n      const sessionData = {\n        username: localStorage.getItem('username'),\n        giorno: new Date().toISOString(),\n        tempoStudio: this.tempoStudio, // Riferimento ai dati attuali\n        tempoPausa: this.tempoPausa,\n        ripetizioni: this.ripetizioni,\n        remainingTime: this.remainingTime,\n        isStudyPhase: this.isStudyPhase,\n        studyCycles: this.studyCycles,\n      };\n\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/poms/saveIncomplete', sessionData, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        console.log('Sessione incompleta salvata.');\n      } catch (error) {\n        console.error('Errore nel salvataggio della sessione incompleta:', error);\n      }\n    },\n\n    confirmDelete(id) {\n      if (confirm(\"Sicuro di voler eliminare questa sessione Pomodoro?\")) {\n        this.deletePomodoro(id); \n      }\n    },\n    \n    async deletePomodoro(id) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.delete(`/api/pomRemove/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` \n          }\n        });\n        this.fetchPoms(); \n      } catch (error) {\n        console.error('Errore nell\\'eliminazione della sessione:', error);\n      }\n    },\n\n    async fetchPoms() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/poms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { username: username }\n        });\n\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        this.poms = response.data.filter(pom => {\n          const sessionDate = new Date(pom.giorno);\n          sessionDate.setHours(0, 0, 0, 0);\n          return sessionDate >= today;\n        });\n\n        console.log('Sessioni Pomodoro recuperate e filtrate:', this.poms);\n      } catch (error) {\n        console.error('Errore durante il recupero delle sessioni Pomodoro:', error);\n      }\n    },\n    \n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    }\n  }, \n\n  mounted() {\n    this.fetchPoms();\n    window.addEventListener('beforeunload', this.handleBeforeUnload);\n  },\n\n   beforeUnmount() {\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n\n};\n</script>\n\n\n<style scoped>\n.pomodoro-list {\n  max-width: 800px;\n  margin: 20px auto;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\nh1 {\n  text-align: center;\n  margin-bottom: 20px;\n  color: #343a40;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.pomodoro-item {\n  margin-bottom: 20px;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n  position: relative;\n  padding-right: 40px; \n}\n\n.pomodoro-item h2 {\n  color: #007bff;\n  margin: 0;\n}\n\n.pomodoro-item p {\n  margin: 5px 0;\n}\n\n.delete-btn {\n  position: absolute;\n  right: 10px;\n  bottom: 10px;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  font-size: 24px;\n}\n\n.delete-btn:hover {\n  color: red;\n}\n\n.no-poms {\n  text-align: center;\n  color: #6c757d;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}