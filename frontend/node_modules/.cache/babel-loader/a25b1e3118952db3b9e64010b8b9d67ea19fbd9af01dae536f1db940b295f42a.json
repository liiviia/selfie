{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport axios from 'axios';\nexport default {\n  name: 'NotificationManager',\n  data() {\n    return {\n      events: [],\n      // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(),\n      // Data corrente\n      intervalId: null,\n      // ID per l'intervallo che può essere utilizzato per fermarlo\n      notifiedEvents: new Set()\n    };\n  },\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n          body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`\n        });\n        notification.onclick = () => {\n          window.focus();\n        };\n      } else {\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n    sendAlertNotification(event) {\n      // Verifica se l'evento è già stato notificato\n      if (this.notifiedEvents.has(event.id)) {\n        // Se la notifica è già stata inviata, non fare nulla\n        return;\n      }\n\n      // Invia la notifica iniziale\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n\n      // Se repeatNotification è maggiore di 0, invia notifiche ripetute\n      if (event.repeatNotification > 0) {\n        for (let i = 0; i < event.repeatNotification; i++) {\n          // Fai un delay per ogni ripetizione (ad esempio, puoi usare setTimeout)\n          setTimeout(() => {\n            window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n          }, (i + 1) * 6000); // Ogni ripetizione dopo 1 minuto (60000 ms)\n        }\n      }\n\n      // Aggiungi l'evento all'elenco degli eventi notificati per evitare notifiche multiple\n      this.notifiedEvents.add(event.id);\n    },\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"Schedulazione notifiche...\");\n      console.log(\"evento passato\", event);\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n        const timeMachineNow = new Date(response.data).getTime(); // Ottieni il tempo attuale dalla Time Machine\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n        // Crea la data dell'evento combinando event.date e event.startTime\n        const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`; // Combinazione di data e ora\n        const eventTime = new Date(eventDateTimeString).getTime(); // Calcola il tempo dell'evento\n        console.log(\"Event Time:\", eventTime);\n\n        // Verifica se eventTime è valido\n        if (isNaN(eventTime)) {\n          console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n          return;\n        }\n        const notificationTime = eventTime - event.notificationTime * 60000; // Calcola l'orario di notifica\n        console.log(\"Notification Time:\", notificationTime);\n        const timeUntilNotification = notificationTime - timeMachineNow; // Calcola il tempo fino alla notifica\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n        if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n          return;\n        }\n        if (timeUntilNotification > 0) {\n          setTimeout(() => {\n            console.log(\"trigger\");\n            this.triggerNotifications(event, emailRicevente);\n            if (event.repeatNotification > 0) {\n              setInterval(() => {\n                this.triggerNotifications(event, emailRicevente);\n              }, event.repeatNotification * 60000);\n            }\n          }, timeUntilNotification);\n        } else {\n          console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"evento notifica meccanismo:\", event.notificationMechanism);\n\n      // Verifica se la notifica per questo evento è già stata inviata\n      if (this.notifiedEvents.has(event.id)) {\n        return; // Se è già stata inviata, non fare nulla\n      }\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n\n      // Aggiungi l'evento all'elenco degli eventi notificati\n      this.notifiedEvents.add(event.id);\n    },\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: username\n          }\n        });\n        console.log(response.data);\n        this.events = response.data.filter(event => new Date(event.date) >= this.currentDate);\n\n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"venti trovati\");\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n    // Avvia l'aggiornamento periodico degli eventi\n    startPeriodicUpdate() {\n      this.intervalId = setInterval(() => {\n        console.log(\"Aggiornamento eventi in corso...\");\n        this.fetchEvents();\n      }, 1000); // Aggiorna ogni 10secondi (1000 ms)\n    },\n    // Ferma l'aggiornamento periodico\n    stopPeriodicUpdate() {\n      clearInterval(this.intervalId);\n    }\n  },\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents(); // Recupera gli eventi inizialmente\n    this.startPeriodicUpdate(); // Avvia l'aggiornamento periodico\n  },\n  beforeUnmount() {\n    this.stopPeriodicUpdate(); // Ferma l'aggiornamento periodico quando il componente viene distrutto\n  }\n};","map":{"version":3,"names":["axios","name","data","events","currentDate","Date","intervalId","notifiedEvents","Set","methods","requestNotificationPermission","window","permesso","Notification","requestPermission","console","log","warn","error","sendEmailNotification","event","emailRicevente","token","sessionStorage","getItem","post","eventDetails","headers","Authorization","sendSystemNotification","permission","notification","title","body","startTime","date","onclick","focus","sendAlertNotification","has","id","alert","repeatNotification","i","setTimeout","add","scheduleNotification","response","get","timeMachineNow","getTime","eventDateTimeString","slice","eventTime","isNaN","notificationTime","timeUntilNotification","triggerNotifications","setInterval","notificationMechanism","includes","fetchEvents","username","localStorage","params","author","filter","forEach","startPeriodicUpdate","stopPeriodicUpdate","clearInterval","mounted","beforeUnmount"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n\n  data() {\n    return {\n      events: [], // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(), // Data corrente\n      intervalId: null, // ID per l'intervallo che può essere utilizzato per fermarlo\n      notifiedEvents: new Set(),\n    };\n  },\n\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n          body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`,\n        });\n        notification.onclick = () => {\n          window.focus();\n        };\n      } else {\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n    sendAlertNotification(event) {\n  // Verifica se l'evento è già stato notificato\n  if (this.notifiedEvents.has(event.id)) {\n    // Se la notifica è già stata inviata, non fare nulla\n    return;\n  }\n\n  // Invia la notifica iniziale\n  window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n\n  // Se repeatNotification è maggiore di 0, invia notifiche ripetute\n  if (event.repeatNotification > 0) {\n    for (let i = 0; i < event.repeatNotification; i++) {\n      // Fai un delay per ogni ripetizione (ad esempio, puoi usare setTimeout)\n      setTimeout(() => {\n        window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n      }, (i + 1) * 6000); // Ogni ripetizione dopo 1 minuto (60000 ms)\n    }\n  }\n\n  // Aggiungi l'evento all'elenco degli eventi notificati per evitare notifiche multiple\n  this.notifiedEvents.add(event.id);\n},\n\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n  console.log(\"Schedulazione notifiche...\");\n  console.log(\"evento passato\", event);\n\n  try {\n    console.log(\"Chiamata API iniziata...\");\n    const response = await axios.get('/api/getTime-machine');\n    console.log(\"Time machine data:\", response.data);\n\n    const timeMachineNow = new Date(response.data).getTime();  // Ottieni il tempo attuale dalla Time Machine\n    console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n    // Crea la data dell'evento combinando event.date e event.startTime\n    const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;  // Combinazione di data e ora\n    const eventTime = new Date(eventDateTimeString).getTime();  // Calcola il tempo dell'evento\n    console.log(\"Event Time:\", eventTime);\n\n    // Verifica se eventTime è valido\n    if (isNaN(eventTime)) {\n      console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n      return;\n    }\n\n    const notificationTime = eventTime - event.notificationTime * 60000;  // Calcola l'orario di notifica\n    console.log(\"Notification Time:\", notificationTime);\n\n    const timeUntilNotification = notificationTime - timeMachineNow;  // Calcola il tempo fino alla notifica\n    console.log(\"Time Until Notification:\", timeUntilNotification);\n\n    if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n      console.warn(\"L'orario della notifica è già passato o non è valido.\");\n      return;\n    }\n\n    if (timeUntilNotification > 0) {\n      setTimeout(() => {\n        console.log(\"trigger\");\n        this.triggerNotifications(event, emailRicevente);\n         if (event.repeatNotification > 0) {\n          setInterval(() => {\n            this.triggerNotifications(event, emailRicevente);\n          }, event.repeatNotification * 60000);\n        }\n      }, timeUntilNotification);\n    } else {\n      console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n    }\n  } catch (error) {\n    console.error(\"Errore durante la richiesta della Time Machine:\", error);\n  }\n},\n\n\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"evento notifica meccanismo:\",event.notificationMechanism);\n    \n    // Verifica se la notifica per questo evento è già stata inviata\n    if (this.notifiedEvents.has(event.id)) {\n      return; // Se è già stata inviata, non fare nulla\n    }\n\n    if (event.notificationMechanism.includes('system')) {\n      this.sendSystemNotification(event);\n    }\n    if (event.notificationMechanism.includes('email')) {\n      this.sendEmailNotification(event, emailRicevente);\n    }\n    if (event.notificationMechanism.includes('alert')) {\n      this.sendAlertNotification(event);\n    }\n\n    // Aggiungi l'evento all'elenco degli eventi notificati\n    this.notifiedEvents.add(event.id);\n    },\n\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username'); \n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n        console.log(response.data);\n        \n        this.events = response.data.filter(event => new Date(event.date) >= this.currentDate);\n        \n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"venti trovati\");\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n\n    // Avvia l'aggiornamento periodico degli eventi\n    startPeriodicUpdate() {\n      this.intervalId = setInterval(() => {\n        console.log(\"Aggiornamento eventi in corso...\");\n        this.fetchEvents();\n      }, 1000); // Aggiorna ogni 10secondi (1000 ms)\n    },\n\n    // Ferma l'aggiornamento periodico\n    stopPeriodicUpdate() {\n      clearInterval(this.intervalId);\n    }\n  },\n\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents();  // Recupera gli eventi inizialmente\n    this.startPeriodicUpdate(); // Avvia l'aggiornamento periodico\n  },\n\n  beforeUnmount() {\n    this.stopPeriodicUpdate(); // Ferma l'aggiornamento periodico quando il componente viene distrutto\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}