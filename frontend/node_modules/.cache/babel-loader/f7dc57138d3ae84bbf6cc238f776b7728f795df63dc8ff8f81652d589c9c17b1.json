{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n  \n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n          body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`,\n        });\n        notification.onclick = () => {\n          window.focus();\n        };\n      } else {\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n\n    sendAlertNotification(event) {\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n    },\n\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"schedulerr\");\n\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n\n        const timeMachineNow = new Date(response.data).getTime();  // Ottieni il tempo attuale dalla Time Machine\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n        const eventTime = new Date(`${event.date}T${event.startTime}`).getTime();  // Calcola il tempo dell'evento\n        console.log(\"Event Time:\", eventTime);\n\n        const notificationTime = eventTime - event.notificationTime * 60000;  // Calcola l'orario di notifica\n        console.log(\"Notification Time:\", notificationTime);\n\n        const timeUntilNotification = notificationTime - timeMachineNow;  // Calcola il tempo fino alla notifica\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n\n        if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n          return;\n        }\n\n        if (timeUntilNotification > 0) {\n          setTimeout(() => {\n            this.triggerNotifications(event, emailRicevente);\n            if (event.repeatNotification > 0) {\n              setInterval(() => {\n                this.triggerNotifications(event, emailRicevente);\n              }, event.repeatNotification * 60000);\n            }\n          }, timeUntilNotification);\n        } else {\n          console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n\n    triggerNotifications(event, emailRicevente) {\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n    },\n\n    // Funzione per aggiornare periodicamente l'orario della Time Machine e pianificare le notifiche\n    startScheduler() {\n      setInterval(() => {\n        // Recupera l'email (ad esempio, da sessionStorage o da un'altra fonte)\n        const emailRicevente = sessionStorage.getItem('email');\n\n        if (emailRicevente) {\n          // Recupera gli eventi da pianificare (potresti fare una chiamata API o prendere dalla tua lista locale)\n          this.getAllEvents().forEach(event => {\n            this.scheduleNotification(event, emailRicevente);\n          });\n        }\n      }, 1000);  // Esegui ogni secondo (1000 ms)\n    },\n\n    // Recupera tutti gli eventi (potresti ottenere gli eventi tramite un'API)\n    async getAllEvents() {\n      try {\n        const response = await axios.get('/api/events');\n        return response.data;  // Supponiamo che la risposta contenga una lista di eventi\n      } catch (error) {\n        console.error(\"Errore nel recupero degli eventi:\", error);\n        return [];\n      }\n    }\n  },\n\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.startScheduler();  // Avvia il ciclo di aggiornamento periodico ogni secondo\n  },\n};\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}