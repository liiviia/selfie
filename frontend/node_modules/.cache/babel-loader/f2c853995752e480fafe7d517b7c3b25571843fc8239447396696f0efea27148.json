{"ast":null,"code":"import axios from 'axios';\nimport timeMachineConfig from '../../../timeMachineConfig';\nexport default {\n  name: 'NotificationManager',\n  methods: {\n    //permesso notifiche\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema neagtoo');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n    //Notifica di sistema --> visibile anche quando l'utente non è sull app\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n          body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`\n        });\n        notification.onclick = () => {\n          window.focus();\n        };\n      } else {\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n    //notifica alert\n    sendAlertNotification(event) {\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n    },\n    //scheduler notifiche\n\n    async scheduleNotification(event, emailRicevente) {\n      try {\n        // Fai una richiesta GET all'API per ottenere la data della Time Machine\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n\n        // Usa la data della Time Machine ricevuta dalla risposta\n        const timeMachineNow = new Date(response.data.date).getTime(); // Assicurati che la risposta contenga la data corretta\n\n        // Calcola l'orario di inizio evento\n        const eventTime = new Date(`${event.date}T${event.startTime}`).getTime();\n        const notificationTime = eventTime - event.notificationTime * 60000; // Ora di notifica\n\n        const timeUntilNotification = notificationTime - timeMachineNow;\n        console.log(\"time machine scheduler-------\", timeMachineNow);\n\n        // Verifica se la notifica è ancora valida\n        if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n          return;\n        }\n        if (timeUntilNotification > 0) {\n          // Verifica che il tempo rimanente sia positivo\n          setTimeout(() => {\n            this.triggerNotifications(event, emailRicevente);\n\n            // Pianifica notifiche ripetute\n            if (event.repeatNotification > 0) {\n              setInterval(() => {\n                this.triggerNotifications(event, emailRicevente);\n              }, event.repeatNotification * 60000);\n            }\n          }, timeUntilNotification);\n        } else {\n          console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n    triggerNotifications(event, emailRicevente) {\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      // if (event.notificationMechanism.includes('whatsapp')) {\n      //   this.sendWhatsAppNotification(event);\n      // }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n    }\n  },\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n  }\n};","map":{"version":3,"names":["axios","timeMachineConfig","name","methods","requestNotificationPermission","window","permesso","Notification","requestPermission","console","log","warn","error","sendEmailNotification","event","emailRicevente","token","sessionStorage","getItem","post","eventDetails","headers","Authorization","sendSystemNotification","permission","notification","title","body","startTime","date","onclick","focus","sendAlertNotification","alert","scheduleNotification","response","get","data","timeMachineNow","Date","getTime","eventTime","notificationTime","timeUntilNotification","isNaN","setTimeout","triggerNotifications","repeatNotification","setInterval","notificationMechanism","includes","mounted"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["\n<template>\n  <div></div>\n</template>\n\n<script>\n\nimport axios from 'axios';\nimport timeMachineConfig  from '../../../timeMachineConfig';\n\n\nexport default {\n  name: 'NotificationManager',\n  \n  methods: {\n\n     //permesso notifiche\n     async requestNotificationPermission(){\n      try {\n        if ('Notification' in window) {\n        const permesso=await Notification.requestPermission();\n        console.log(\"permesso: \", permesso);\n        if (permesso === 'granted') {\n          console.log('Permesso notifiche di sistema concesso');\n        }else{\n          console.warn('Permesso notifiche di sistema neagtoo');\n        }\n      }\n      } catch (error) {\n          console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n\n    async sendEmailNotification(event,emailRicevente){\n      try {\n        const token = sessionStorage.getItem('token');\n\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers:{\n            Authorization: `Bearer ${token}`\n          }\n        });\n      console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n\n   \n    //Notifica di sistema --> visibile anche quando l'utente non è sull app\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      } \n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n        body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`,  \n      });\n\n        notification.onclick = () => {\n          window.focus();\n        };\n\n      }else{\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n\n    //notifica alert\n    sendAlertNotification(event){\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n    },\n    \n    //scheduler notifiche\n\n    async scheduleNotification(event, emailRicevente) {\n  try {\n    // Fai una richiesta GET all'API per ottenere la data della Time Machine\n    const response = await axios.get('/api/getTime-machine'); \n    console.log(\"Time machine data:\", response.data);\n\n    // Usa la data della Time Machine ricevuta dalla risposta\n    const timeMachineNow = new Date(response.data.date).getTime(); // Assicurati che la risposta contenga la data corretta\n\n    // Calcola l'orario di inizio evento\n    const eventTime = new Date(`${event.date}T${event.startTime}`).getTime(); \n    const notificationTime = eventTime - event.notificationTime * 60000;  // Ora di notifica\n\n    const timeUntilNotification = notificationTime - timeMachineNow;\n    console.log(\"time machine scheduler-------\", timeMachineNow);\n\n    // Verifica se la notifica è ancora valida\n    if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n      console.warn(\"L'orario della notifica è già passato o non è valido.\");\n      return;\n    }\n\n    if (timeUntilNotification > 0) {  // Verifica che il tempo rimanente sia positivo\n      setTimeout(() => {\n        this.triggerNotifications(event, emailRicevente);\n\n        // Pianifica notifiche ripetute\n        if (event.repeatNotification > 0) {\n          setInterval(() => {\n            this.triggerNotifications(event, emailRicevente);\n          }, event.repeatNotification * 60000);\n        }\n      }, timeUntilNotification);\n    } else {\n      console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n    }\n  } catch (error) {\n    console.error(\"Errore durante la richiesta della Time Machine:\", error);\n  }\n},\n\n\n    \n    \n    triggerNotifications(event, emailRicevente) {\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      // if (event.notificationMechanism.includes('whatsapp')) {\n      //   this.sendWhatsAppNotification(event);\n      // }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n    },\n\n    \n  },\n\n  \n  mounted(){\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n  },\n\n\n};\n\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}