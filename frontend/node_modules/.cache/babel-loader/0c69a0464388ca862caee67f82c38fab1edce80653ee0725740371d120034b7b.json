{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport axios from 'axios';\nexport default {\n  name: 'NotificationManager',\n  data() {\n    return {\n      events: [],\n      // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(),\n      // Data corrente\n      notifiedEvents: new Set(),\n      eventTimers: new Map(),\n      timeMachineDate: new Date() // Aggiungi la variabile per la data della Time Machine\n    };\n  },\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n    // Altri metodi per l'invio di notifiche (email, alert, etc.) rimangono invariati\n\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: username\n          }\n        });\n        console.log(response.data);\n        this.events = response.data;\n\n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"Eventi trovati\");\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"Schedulazione notifiche...\");\n      console.log(\"Evento passato\", event);\n      if (this.eventTimers.has(event.id)) {\n        console.log(\"Timer eliminato\");\n        clearTimeout(this.eventTimers.get(event.id)); // Cancella il timer esistente\n        this.eventTimers.delete(event.id); // Elimina il timer dalla mappa\n      }\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n        const timeMachineNow = new Date(response.data).getTime();\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n        const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;\n        const eventTime = new Date(eventDateTimeString).getTime();\n        console.log(\"Event Time:\", eventTime);\n        if (isNaN(eventTime)) {\n          console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n          return;\n        }\n\n        // Calcola il tempo per la notifica\n        const notificationTime = eventTime - event.notificationTime * 60000;\n        console.log(\"Notification Time:\", notificationTime);\n        const timeUntilNotification = notificationTime - timeMachineNow;\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n        if (timeUntilNotification > 0) {\n          const timerId = setTimeout(() => {\n            console.log(\"Triggering notifications for event:\", event.title);\n            this.triggerNotifications(event, emailRicevente);\n          }, timeUntilNotification);\n          this.eventTimers.set(event.id, timerId);\n        } else {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"Evento notifica meccanismo:\", event.notificationMechanism);\n      if (this.notifiedEvents.has(event.id)) {\n        return;\n      }\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n      this.notifiedEvents.add(event.id);\n    }\n  },\n  watch: {\n    timeMachineDate(newDate, oldDate) {\n      if (newDate !== oldDate) {\n        console.log(\"La data della Time Machine è cambiata!\");\n        this.fetchEvents(); // Richiama fetchEvents solo quando la data cambia\n      }\n    }\n  },\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents(); // Recupera gli eventi inizialmente\n  },\n  beforeUnmount() {\n    // Ferma i timer attivi quando il componente è smontato\n    this.eventTimers.forEach(timerId => clearTimeout(timerId));\n    this.eventTimers.clear();\n  }\n};","map":{"version":3,"names":["axios","name","data","events","currentDate","Date","notifiedEvents","Set","eventTimers","Map","timeMachineDate","methods","requestNotificationPermission","window","permesso","Notification","requestPermission","console","log","warn","error","fetchEvents","token","sessionStorage","getItem","username","localStorage","response","get","headers","Authorization","params","author","forEach","event","emailRicevente","scheduleNotification","has","id","clearTimeout","delete","timeMachineNow","getTime","eventDateTimeString","date","slice","startTime","eventTime","isNaN","notificationTime","timeUntilNotification","timerId","setTimeout","title","triggerNotifications","set","notificationMechanism","includes","sendSystemNotification","sendEmailNotification","sendAlertNotification","add","watch","newDate","oldDate","mounted","beforeUnmount","clear"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n\n  data() {\n    return {\n      events: [], // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(), // Data corrente\n      notifiedEvents: new Set(),\n      eventTimers: new Map(),\n      timeMachineDate: new Date(), // Aggiungi la variabile per la data della Time Machine\n    };\n  },\n\n    \n\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n    // Altri metodi per l'invio di notifiche (email, alert, etc.) rimangono invariati\n\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username'); \n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n        console.log(response.data);\n        \n        this.events = response.data;\n        \n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"Eventi trovati\");\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"Schedulazione notifiche...\");\n      console.log(\"Evento passato\", event);\n\n      if (this.eventTimers.has(event.id)) {\n        console.log(\"Timer eliminato\");\n        clearTimeout(this.eventTimers.get(event.id));  // Cancella il timer esistente\n        this.eventTimers.delete(event.id);  // Elimina il timer dalla mappa\n      }\n\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n\n        const timeMachineNow = new Date(response.data).getTime();\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n        const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;\n        const eventTime = new Date(eventDateTimeString).getTime();\n        console.log(\"Event Time:\", eventTime);\n\n        if (isNaN(eventTime)) {\n          console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n          return;\n        }\n\n        // Calcola il tempo per la notifica\n        const notificationTime = eventTime - event.notificationTime * 60000;\n        console.log(\"Notification Time:\", notificationTime);\n\n        const timeUntilNotification = notificationTime - timeMachineNow;\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n\n        if (timeUntilNotification > 0) {\n          const timerId = setTimeout(() => {\n            console.log(\"Triggering notifications for event:\", event.title);\n            this.triggerNotifications(event, emailRicevente);\n          }, timeUntilNotification);\n\n          this.eventTimers.set(event.id, timerId);\n        } else {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"Evento notifica meccanismo:\", event.notificationMechanism);\n\n      if (this.notifiedEvents.has(event.id)) {\n        return;\n      }\n\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n\n      this.notifiedEvents.add(event.id);\n    },\n  },\n\n  watch: {\n    timeMachineDate(newDate, oldDate) {\n      if (newDate !== oldDate) {\n        console.log(\"La data della Time Machine è cambiata!\");\n        this.fetchEvents(); // Richiama fetchEvents solo quando la data cambia\n      }\n    }\n  },\n\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents();  // Recupera gli eventi inizialmente\n  },\n\n  beforeUnmount() {\n    // Ferma i timer attivi quando il componente è smontato\n    this.eventTimers.forEach(timerId => clearTimeout(timerId));\n    this.eventTimers.clear();\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}