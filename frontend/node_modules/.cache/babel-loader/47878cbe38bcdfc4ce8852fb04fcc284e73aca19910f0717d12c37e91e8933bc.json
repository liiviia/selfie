{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationComponent.vue"],"sourcesContent":["<template>\n  <div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      alerts: [],  \n      seenAlerts: new Set(),  \n    };\n  },\n  created() {\n    this.startPolling();  \n  },\n  methods: {\n  startPolling() {\n    const token = sessionStorage.getItem('token');\n    setInterval(() => {\n      fetch('/api/get-latest-alert', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Errore nella risposta');\n        }\n        return response.json();\n      })\n      .then(data => {\n        if (data.alerts && data.alerts.length > 0) {\n          const username = localStorage.getItem('username');\n          const filteredAlerts = data.alerts.filter(alert => alert.userNome.toLowerCase() === username.toLowerCase());\n\n          if (filteredAlerts.length > 0) {\n            this.alerts = filteredAlerts;\n            filteredAlerts.forEach(alertItem => {\n              alert(`Evento: ${alertItem.title}\\nData: ${new Date(alertItem.date).toLocaleDateString()}\\nOrario: ${alertItem.startTime}`);\n            });\n          }\n        }\n      })\n      .catch(err => {\n        console.error('Errore nel polling:', err);\n      });\n    }, 5000); // Intervallo di 5 secondi\n  }\n}\n\n};\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":";;uBACEA,mBAAA,CACM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}