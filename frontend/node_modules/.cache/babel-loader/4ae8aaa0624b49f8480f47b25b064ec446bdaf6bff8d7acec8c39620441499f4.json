{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n\n  data() {\n    return {\n      events: [], \n      currentDate: new Date(), \n      notifiedEvents: new Set(),\n      eventTimers: new Map(),\n      timeMachineDate: new Date(), \n    };\n  },\n\n  methods: {\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n\n\n    async sendEmailNotification(event, emailRicevente) {\n  try {\n    const token = sessionStorage.getItem('token');\n    \n    const sendEmail = async () => {\n      try {\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`  \n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    };\n\n    await sendEmail();\n\n  } catch (error) {\n    console.error('Errore durante il processo di invio delle notifiche email:', error);\n  }\n},\n\n\nsendAlertNotification(event) {\n  if (this.notifiedEvents.has(event.id)) {\n    return;\n  }\n  window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n  this.notifiedEvents.add(event.id);\n},\n\n\n\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username'); \n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n        console.log(response.data);\n        \n        this.events = response.data;\n        \n        this.events.forEach(event => {\n          const emailRicevente = localStorage.getItem('email');\n          console.log(\"Eventi trovati\");\n       console.log(event,emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n\n    async scheduleNotification(event, emailRicevente) {\n  console.log(\"Schedulazione notifiche...\");\n  console.log(\"Evento passato\", event);\n\n  if (this.eventTimers.has(event.id)) {\n    console.log(\"Timer già esistente per l'evento\", event.id);\n    clearTimeout(this.eventTimers.get(event.id));  \n    this.eventTimers.delete(event.id);  \n  }\n\n  try {\n    console.log(\"Chiamata API iniziata...\");\n    const response = await axios.get('/api/getTime-machine');\n    //console.log(\"Time machine data:\", response.data);\n\n    const timeMachineNow = new Date(response.data).getTime();\n    console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n    const eventDateTimeString = `${event.date.slice(0, 10)}T${event.startTime}:00`;\n    const eventTime = new Date(eventDateTimeString).getTime();\n    console.log(\"Event Time:\", eventTime);\n\n    if (isNaN(eventTime)) {\n      console.error(\"La data dell'evento non è valida:\", eventDateTimeString);\n      return;\n    }\n\n    const notificationTime = eventTime - event.notificationTime * 60000;\n    console.log(\"Notification Time:\", notificationTime);\n\n    const timeUntilNotification = notificationTime - timeMachineNow;\n    console.log(\"Time Until Notification:\", timeUntilNotification);\n\n    if (timeUntilNotification > 0) {\n      const timerId = setTimeout(() => {\n        console.log(\"Triggering notifications for event:\", event.title);\n        this.triggerNotifications(event, emailRicevente);\n      }, timeUntilNotification);\n\n      this.eventTimers.set(event.id, timerId);\n    } else {\n      console.warn(\"L'orario della notifica è già passato o non è valido.\");\n    }\n  } catch (error) {\n    console.error(\"Errore durante la richiesta della Time Machine:\", error);\n  }\n},\n\n\n    triggerNotifications(event, emailRicevente) {\n      console.log(\"Evento notifica meccanismo:\", event.notificationMechanism);\n\n      if (this.notifiedEvents.has(event.id)) {\n        return;\n      }\n\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n\n      this.notifiedEvents.add(event.id);\n    },\n\n    async fetchTimeMachineDate() {\n      try {\n        const response = await axios.get('/api/getTime-machine');\n        this.timeMachineDate = new Date(response.data);\n        console.log(\"Time Machine Date Updated:\", this.timeMachineDate);\n      } catch (error) {\n        console.error('Errore nel recupero della Time Machine:', error);\n      }\n    },\n  },\n\n  watch: {\n    timeMachineDate(newDate, oldDate) {\n      if (newDate !== oldDate) {\n        console.log(\"La data della Time Machine è cambiata!\");\n        this.fetchEvents(); \n      }\n    }\n  },\n\n  mounted() {\n    this.requestNotificationPermission(); \n    this.fetchEvents();  \n    \n    this.fetchTimeMachineDate();\n\n    setInterval(this.fetchTimeMachineDate, 1000); \n  },\n\n  beforeUnmount() {\n    this.eventTimers.forEach(timerId => clearTimeout(timerId));\n    this.eventTimers.clear();\n  }\n};\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}