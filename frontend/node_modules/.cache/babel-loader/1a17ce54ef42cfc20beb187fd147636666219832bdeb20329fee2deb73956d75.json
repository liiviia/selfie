{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'NotificationManager',\n  data() {\n    return {\n      events: [],\n      // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(),\n      // Data corrente\n      intervalId: null // ID per l'intervallo che può essere utilizzato per fermarlo\n    };\n  },\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n          body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`\n        });\n        notification.onclick = () => {\n          window.focus();\n        };\n      } else {\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n    sendAlertNotification(event) {\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n    },\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"Schedulazione notifiche...\");\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n        const timeMachineNow = new Date(response.data).getTime(); // Ottieni il tempo attuale dalla Time Machine\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n        const eventTime = new Date(`${event.date}T${event.startTime}`).getTime(); // Calcola il tempo dell'evento\n        console.log(\"Event Time:\", eventTime);\n        const notificationTime = eventTime - event.notificationTime * 60000; // Calcola l'orario di notifica\n        console.log(\"Notification Time:\", notificationTime);\n        const timeUntilNotification = notificationTime - timeMachineNow; // Calcola il tempo fino alla notifica\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n        if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n          return;\n        }\n        if (timeUntilNotification > 0) {\n          setTimeout(() => {\n            this.triggerNotifications(event, emailRicevente);\n            if (event.repeatNotification > 0) {\n              setInterval(() => {\n                this.triggerNotifications(event, emailRicevente);\n              }, event.repeatNotification * 60000);\n            }\n          }, timeUntilNotification);\n        } else {\n          console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n    },\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: {\n            author: username\n          }\n        });\n        this.events = response.data.filter(event => new Date(event.date) >= this.currentDate);\n\n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = sessionStorage.getItem('email');\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n    // Avvia l'aggiornamento periodico degli eventi\n    startPeriodicUpdate() {\n      this.intervalId = setInterval(() => {\n        console.log(\"Aggiornamento eventi in corso...\");\n        this.fetchEvents();\n      }, 1000); // Aggiorna ogni 10secondi (1000 ms)\n    },\n    // Ferma l'aggiornamento periodico\n    stopPeriodicUpdate() {\n      clearInterval(this.intervalId);\n    }\n  },\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents(); // Recupera gli eventi inizialmente\n    this.startPeriodicUpdate(); // Avvia l'aggiornamento periodico\n  },\n  beforeUnmount() {\n    this.stopPeriodicUpdate(); // Ferma l'aggiornamento periodico quando il componente viene distrutto\n  }\n};","map":{"version":3,"names":["axios","name","data","events","currentDate","Date","intervalId","methods","requestNotificationPermission","window","permesso","Notification","requestPermission","console","log","warn","error","sendEmailNotification","event","emailRicevente","token","sessionStorage","getItem","post","eventDetails","headers","Authorization","sendSystemNotification","permission","notification","title","body","startTime","date","onclick","focus","sendAlertNotification","alert","scheduleNotification","response","get","timeMachineNow","getTime","eventTime","notificationTime","timeUntilNotification","isNaN","setTimeout","triggerNotifications","repeatNotification","setInterval","notificationMechanism","includes","fetchEvents","username","localStorage","params","author","filter","forEach","startPeriodicUpdate","stopPeriodicUpdate","clearInterval","mounted","beforeUnmount"],"sources":["/home/massi1/Documenti/uni/tecWEB/progettoClone/progettoTWvue/frontend/src/components/NotificationManager.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'NotificationManager',\n\n  data() {\n    return {\n      events: [], // Array per memorizzare gli eventi recuperati\n      currentDate: new Date(), // Data corrente\n      intervalId: null, // ID per l'intervallo che può essere utilizzato per fermarlo\n    };\n  },\n\n  methods: {\n    // Richiedi permesso per le notifiche di sistema\n    async requestNotificationPermission() {\n      try {\n        if ('Notification' in window) {\n          const permesso = await Notification.requestPermission();\n          console.log(\"Permesso: \", permesso);\n          if (permesso === 'granted') {\n            console.log('Permesso notifiche di sistema concesso');\n          } else {\n            console.warn('Permesso notifiche di sistema negato');\n          }\n        }\n      } catch (error) {\n        console.error('Errore nella richiesta del permesso:', error);\n      }\n    },\n\n    async sendEmailNotification(event, emailRicevente) {\n      try {\n        const token = sessionStorage.getItem('token');\n        await axios.post('/api/events/email', {\n          emailRicevente,\n          eventDetails: event\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Notifica email inviata con successo');\n      } catch (error) {\n        console.error('Errore durante invio della notifica email:', error);\n      }\n    },\n\n    sendSystemNotification(event) {\n      if (!event) {\n        console.warn(\"I dati dell'evento sono incompleti. Notifica non inviata.\");\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(`Nuovo Evento: ${event.title}`, {\n          body: `L'evento inizia alle ${event.startTime} del giorno ${event.date}`,\n        });\n        notification.onclick = () => {\n          window.focus();\n        };\n      } else {\n        console.error('Il permesso per le notifiche non è stato concesso.');\n      }\n    },\n\n    sendAlertNotification(event) {\n      window.alert(`Nuovo Evento: ${event.title}\\nInizio alle ${event.startTime} del giorno ${event.date}`);\n    },\n\n    // Funzione per schedulare le notifiche\n    async scheduleNotification(event, emailRicevente) {\n      console.log(\"Schedulazione notifiche...\");\n\n      try {\n        console.log(\"Chiamata API iniziata...\");\n        const response = await axios.get('/api/getTime-machine');\n        console.log(\"Time machine data:\", response.data);\n\n        const timeMachineNow = new Date(response.data).getTime();  // Ottieni il tempo attuale dalla Time Machine\n        console.log(\"Time Machine Current Time:\", timeMachineNow);\n\n        const eventTime = new Date(`${event.date}T${event.startTime}`).getTime();  // Calcola il tempo dell'evento\n        console.log(\"Event Time:\", eventTime);\n\n        const notificationTime = eventTime - event.notificationTime * 60000;  // Calcola l'orario di notifica\n        console.log(\"Notification Time:\", notificationTime);\n\n        const timeUntilNotification = notificationTime - timeMachineNow;  // Calcola il tempo fino alla notifica\n        console.log(\"Time Until Notification:\", timeUntilNotification);\n\n        if (isNaN(eventTime) || isNaN(notificationTime) || timeUntilNotification <= 0) {\n          console.warn(\"L'orario della notifica è già passato o non è valido.\");\n          return;\n        }\n\n        if (timeUntilNotification > 0) {\n          setTimeout(() => {\n            this.triggerNotifications(event, emailRicevente);\n            if (event.repeatNotification > 0) {\n              setInterval(() => {\n                this.triggerNotifications(event, emailRicevente);\n              }, event.repeatNotification * 60000);\n            }\n          }, timeUntilNotification);\n        } else {\n          console.warn(\"L'ora di notifica è già passata o il tempo è impostato a meno di 0 minuti.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante la richiesta della Time Machine:\", error);\n      }\n    },\n\n    // Funzione per triggerare le notifiche\n    triggerNotifications(event, emailRicevente) {\n      if (event.notificationMechanism.includes('system')) {\n        this.sendSystemNotification(event);\n      }\n      if (event.notificationMechanism.includes('email')) {\n        this.sendEmailNotification(event, emailRicevente);\n      }\n      if (event.notificationMechanism.includes('alert')) {\n        this.sendAlertNotification(event);\n      }\n    },\n\n    // Funzione per ottenere gli eventi\n    async fetchEvents() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const username = localStorage.getItem('username'); \n        const response = await axios.get('/api/eventsGET', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          params: { author: username }\n        });\n        \n        this.events = response.data.filter(event => new Date(event.date) >= this.currentDate);\n        \n        // Avvia lo scheduler per ciascun evento\n        this.events.forEach(event => {\n          const emailRicevente = sessionStorage.getItem('email');\n          this.scheduleNotification(event, emailRicevente);\n        });\n      } catch (error) {\n        console.error('Errore nel recupero degli eventi:', error);\n      }\n    },\n\n    // Avvia l'aggiornamento periodico degli eventi\n    startPeriodicUpdate() {\n      this.intervalId = setInterval(() => {\n        console.log(\"Aggiornamento eventi in corso...\");\n        this.fetchEvents();\n      }, 1000); // Aggiorna ogni 10secondi (1000 ms)\n    },\n\n    // Ferma l'aggiornamento periodico\n    stopPeriodicUpdate() {\n      clearInterval(this.intervalId);\n    }\n  },\n\n  mounted() {\n    this.requestNotificationPermission(); //richiede il permesso per le notifiche di sistema\n    this.fetchEvents();  // Recupera gli eventi inizialmente\n    this.startPeriodicUpdate(); // Avvia l'aggiornamento periodico\n  },\n\n  beforeUnmount() {\n    this.stopPeriodicUpdate(); // Ferma l'aggiornamento periodico quando il componente viene distrutto\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}